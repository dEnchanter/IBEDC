{"version":3,"file":"headlessui.cjs.production.min.js","sources":["../src/utils/render.ts","../src/components/keyboard.ts","../src/utils/match.ts","../src/hooks/use-sync-refs.ts","../src/utils/bugs.ts","../src/hooks/use-iso-morphic-effect.ts","../src/hooks/use-id.ts","../src/utils/focus-management.ts","../src/internal/dom-containers.ts","../src/hooks/use-focus-trap.ts","../src/hooks/use-inert-others.ts","../src/internal/stack-context.tsx","../src/internal/portal-force-root.tsx","../src/components/portal/portal.tsx","../src/components/dialog/dialog.tsx","../src/components/disclosure/disclosure.tsx","../src/utils/calculate-active-index.ts","../src/components/listbox/listbox.tsx","../src/utils/disposables.ts","../src/hooks/use-disposables.ts","../src/hooks/use-computed.ts","../src/components/menu/menu.tsx","../src/components/popover/popover.tsx","../src/components/label/label.tsx","../src/components/description/description.tsx","../src/components/radio-group/radio-group.tsx","../src/hooks/use-flags.ts","../src/components/switch/switch.tsx","../src/components/transitions/utils/transition.ts","../src/hooks/use-is-initial-render.ts","../src/utils/once.ts","../src/components/transitions/transition.tsx","../src/hooks/use-is-mounted.ts","../src/components/alert/alert.tsx","../src/components/focus-trap/focus-trap.tsx"],"sourcesContent":["import {\n  Fragment,\n  cloneElement,\n  createElement,\n  forwardRef,\n  isValidElement,\n\n  // Types\n  ElementType,\n  ReactElement,\n} from 'react'\nimport { Props, XOR, __, Expand } from '../types'\nimport { match } from './match'\n\nexport enum Features {\n  /** No features at all */\n  None = 0,\n\n  /**\n   * When used, this will allow us to use one of the render strategies.\n   *\n   * **The render strategies are:**\n   *    - **Unmount**   _(Will unmount the component.)_\n   *    - **Hidden**    _(Will hide the component using the [hidden] attribute.)_\n   */\n  RenderStrategy = 1,\n\n  /**\n   * When used, this will allow the user of our component to be in control. This can be used when\n   * you want to transition based on some state.\n   */\n  Static = 2,\n}\n\nexport enum RenderStrategy {\n  Unmount,\n  Hidden,\n}\n\ntype PropsForFeature<TPassedInFeatures extends Features, TForFeature extends Features, TProps> = {\n  [P in TPassedInFeatures]: P extends TForFeature ? TProps : __\n}[TPassedInFeatures]\n\nexport type PropsForFeatures<T extends Features> = XOR<\n  PropsForFeature<T, Features.Static, { static?: boolean }>,\n  PropsForFeature<T, Features.RenderStrategy, { unmount?: boolean }>\n>\n\nexport function render<TFeature extends Features, TTag extends ElementType, TBag>(\n  props: Expand<Props<TTag, TBag, any> & PropsForFeatures<TFeature>>,\n  propsBag: TBag,\n  defaultTag: ElementType,\n  features?: TFeature,\n  visible: boolean = true\n) {\n  // Visible always render\n  if (visible) return _render(props, propsBag, defaultTag)\n\n  let featureFlags = features ?? Features.None\n\n  if (featureFlags & Features.Static) {\n    let { static: isStatic = false, ...rest } = props as PropsForFeatures<Features.Static>\n\n    // When the `static` prop is passed as `true`, then the user is in control, thus we don't care about anything else\n    if (isStatic) return _render(rest, propsBag, defaultTag)\n  }\n\n  if (featureFlags & Features.RenderStrategy) {\n    let { unmount = true, ...rest } = props as PropsForFeatures<Features.RenderStrategy>\n    let strategy = unmount ? RenderStrategy.Unmount : RenderStrategy.Hidden\n\n    return match(strategy, {\n      [RenderStrategy.Unmount]() {\n        return null\n      },\n      [RenderStrategy.Hidden]() {\n        return _render(\n          { ...rest, ...{ hidden: true, style: { display: 'none' } } },\n          propsBag,\n          defaultTag\n        )\n      },\n    })\n  }\n\n  // No features enabled, just render\n  return _render(props, propsBag, defaultTag)\n}\n\nfunction _render<TTag extends ElementType, TBag>(\n  props: Props<TTag, TBag> & { ref?: unknown },\n  bag: TBag,\n  tag: ElementType\n) {\n  let { as: Component = tag, children, refName = 'ref', ...passThroughProps } = omit(props, [\n    'unmount',\n    'static',\n  ])\n\n  // This allows us to use `<HeadlessUIComponent as={MyComopnent} refName=\"innerRef\" />`\n  let refRelatedProps = props.ref !== undefined ? { [refName]: props.ref } : {}\n\n  let resolvedChildren = (typeof children === 'function' ? children(bag) : children) as\n    | ReactElement\n    | ReactElement[]\n\n  // Allow for className to be a function with the bag as the contents\n  if (passThroughProps.className && typeof passThroughProps.className === 'function') {\n    ;(passThroughProps as any).className = passThroughProps.className(bag)\n  }\n\n  if (Component === Fragment) {\n    if (Object.keys(passThroughProps).length > 0) {\n      if (Array.isArray(resolvedChildren) && resolvedChildren.length > 1) {\n        let err = new Error('You should only render 1 child')\n        if (Error.captureStackTrace) Error.captureStackTrace(err, _render)\n        throw err\n      }\n\n      if (!isValidElement(resolvedChildren)) {\n        let err = new Error(\n          `You should render an element as a child. Did you forget the as=\"...\" prop?`\n        )\n        if (Error.captureStackTrace) Error.captureStackTrace(err, _render)\n        throw err\n      }\n\n      return cloneElement(\n        resolvedChildren,\n        Object.assign(\n          {},\n          // Filter out undefined values so that they don't override the existing values\n          mergeEventFunctions(compact(omit(passThroughProps, ['ref'])), resolvedChildren.props, [\n            'onClick',\n          ]),\n          refRelatedProps\n        )\n      )\n    }\n  }\n\n  return createElement(\n    Component,\n    Object.assign({}, omit(passThroughProps, ['ref']), Component !== Fragment && refRelatedProps),\n    resolvedChildren\n  )\n}\n\n/**\n * We can use this function for the following useCase:\n *\n * <Menu.Item> <button onClick={console.log} /> </Menu.Item>\n *\n * Our `Menu.Item` will have an internal `onClick`, if you passthrough an `onClick` to the actual\n * `Menu.Item` component we will call it correctly. However, when we have an `onClick` on the actual\n * first child, that one should _also_ be called (but before this implementation, it was just\n * overriding the `onClick`). But it is only when we *render* that we have access to the existing\n * props of this component.\n *\n * It's a bit hacky, and not that clean, but it is something internal and we have tests to rely on\n * so that we can refactor this later (if needed).\n */\nfunction mergeEventFunctions(\n  passThroughProps: Record<string, any>,\n  existingProps: Record<string, any>,\n  functionsToMerge: string[]\n) {\n  let clone = Object.assign({}, passThroughProps)\n  for (let func of functionsToMerge) {\n    if (passThroughProps[func] !== undefined && existingProps[func] !== undefined) {\n      Object.assign(clone, {\n        [func](event: { defaultPrevented: boolean }) {\n          // Props we control\n          if (!event.defaultPrevented) passThroughProps[func](event)\n\n          // Existing props on the component\n          if (!event.defaultPrevented) existingProps[func](event)\n        },\n      })\n    }\n  }\n\n  return clone\n}\n\n/**\n * This is a hack, but basically we want to keep the full 'API' of the component, but we do want to\n * wrap it in a forwardRef so that we _can_ passthrough the ref\n */\nexport function forwardRefWithAs<T extends { name: string; displayName?: string }>(\n  component: T\n): T & { displayName: string } {\n  return Object.assign(forwardRef((component as unknown) as any) as any, {\n    displayName: component.displayName ?? component.name,\n  })\n}\n\nfunction compact<T extends Record<any, any>>(object: T) {\n  let clone = Object.assign({}, object)\n  for (let key in clone) {\n    if (clone[key] === undefined) delete clone[key]\n  }\n  return clone\n}\n\nfunction omit<T extends Record<any, any>>(object: T, keysToOmit: string[] = []) {\n  let clone = Object.assign({}, object)\n  for (let key of keysToOmit) {\n    if (key in clone) delete clone[key]\n  }\n  return clone\n}\n","// TODO: This must already exist somewhere, right? ðŸ¤”\n// Ref: https://www.w3.org/TR/uievents-key/#named-key-attribute-values\nexport enum Keys {\n  Space = ' ',\n  Enter = 'Enter',\n  Escape = 'Escape',\n  Backspace = 'Backspace',\n\n  ArrowLeft = 'ArrowLeft',\n  ArrowUp = 'ArrowUp',\n  ArrowRight = 'ArrowRight',\n  ArrowDown = 'ArrowDown',\n\n  Home = 'Home',\n  End = 'End',\n\n  PageUp = 'PageUp',\n  PageDown = 'PageDown',\n\n  Tab = 'Tab',\n}\n","export function match<TValue extends string | number = string, TReturnValue = unknown>(\n  value: TValue,\n  lookup: Record<TValue, TReturnValue | ((...args: any[]) => TReturnValue)>,\n  ...args: any[]\n): TReturnValue {\n  if (value in lookup) {\n    let returnValue = lookup[value]\n    return typeof returnValue === 'function' ? returnValue(...args) : returnValue\n  }\n\n  let error = new Error(\n    `Tried to handle \"${value}\" but there is no handler defined. Only defined handlers are: ${Object.keys(\n      lookup\n    )\n      .map(key => `\"${key}\"`)\n      .join(', ')}.`\n  )\n  if (Error.captureStackTrace) Error.captureStackTrace(error, match)\n  throw error\n}\n","import { useRef, useEffect, useCallback } from 'react'\n\nexport function useSyncRefs<TType>(\n  ...refs: (React.MutableRefObject<TType> | ((instance: TType) => void) | null)[]\n) {\n  let cache = useRef(refs)\n\n  useEffect(() => {\n    cache.current = refs\n  }, [refs])\n\n  return useCallback(\n    (value: TType) => {\n      for (let ref of cache.current) {\n        if (ref == null) continue\n        if (typeof ref === 'function') ref(value)\n        else ref.current = value\n      }\n    },\n    [cache]\n  )\n}\n","// See: https://github.com/facebook/react/issues/7711\n// See: https://github.com/facebook/react/pull/20612\n// See: https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#concept-fe-disabled (2.)\nexport function isDisabledReactIssue7711(element: Element): boolean {\n  let parent = element.parentElement\n  let legend = null\n\n  while (parent && !(parent instanceof HTMLFieldSetElement)) {\n    if (parent instanceof HTMLLegendElement) legend = parent\n    parent = parent.parentElement\n  }\n\n  let isParentDisabled = parent?.getAttribute('disabled') === '' ?? false\n  if (isParentDisabled && isFirstLegend(legend)) return false\n\n  return isParentDisabled\n}\n\nfunction isFirstLegend(element: HTMLLegendElement | null): boolean {\n  if (!element) return false\n\n  let previous = element.previousElementSibling\n\n  while (previous !== null) {\n    if (previous instanceof HTMLLegendElement) return false\n    previous = previous.previousElementSibling\n  }\n\n  return true\n}\n","import { useLayoutEffect, useEffect } from 'react'\n\nexport const useIsoMorphicEffect = typeof window !== 'undefined' ? useLayoutEffect : useEffect\n","import { useState, useEffect } from 'react'\nimport { useIsoMorphicEffect } from './use-iso-morphic-effect'\n\n// We used a \"simple\" approach first which worked for SSR and rehydration on the client. However we\n// didn't take care of the Suspense case. To fix this we used the approach the @reach-ui/auto-id\n// uses.\n//\n// Credits: https://github.com/reach/reach-ui/blob/develop/packages/auto-id/src/index.tsx\n\nlet state = { serverHandoffComplete: false }\nlet id = 0\nfunction generateId() {\n  return ++id\n}\n\nexport function useId() {\n  let [id, setId] = useState(state.serverHandoffComplete ? generateId : null)\n\n  useIsoMorphicEffect(() => {\n    if (id === null) setId(generateId())\n  }, [id])\n\n  useEffect(() => {\n    if (state.serverHandoffComplete === false) state.serverHandoffComplete = true\n  }, [])\n\n  return id != null ? '' + id : undefined\n}\n","import { match } from './match'\n\n// Credit:\n//  - https://stackoverflow.com/a/30753870\nlet focusableSelector = [\n  '[contentEditable=true]',\n  '[tabindex]',\n  'a[href]',\n  'area[href]',\n  'button:not([disabled])',\n  'iframe',\n  'input:not([disabled])',\n  'select:not([disabled])',\n  'textarea:not([disabled])',\n]\n  .map(\n    process.env.NODE_ENV === 'test'\n      ? // TODO: Remove this once JSDOM fixes the issue where an element that is\n        // \"hidden\" can be the document.activeElement, because this is not possible\n        // in real browsers.\n        selector => `${selector}:not([tabindex='-1']):not([style*='display: none'])`\n      : selector => `${selector}:not([tabindex='-1'])`\n  )\n  .join(',')\n\nexport enum Focus {\n  /** Focus the first non-disabled element */\n  First = 1 << 0,\n\n  /** Focus the previous non-disabled element */\n  Previous = 1 << 1,\n\n  /** Focus the next non-disabled element */\n  Next = 1 << 2,\n\n  /** Focus the last non-disabled element */\n  Last = 1 << 3,\n\n  /** Wrap tab around */\n  WrapAround = 1 << 4,\n\n  /** Prevent scrolling the focusable elements into view */\n  NoScroll = 1 << 5,\n}\n\nexport enum FocusResult {\n  Error,\n  Overflow,\n  Success,\n  Underflow,\n}\n\nenum Direction {\n  Previous = -1,\n  Next = 1,\n}\n\nexport function getFocusableElements(container: HTMLElement | null = document.body) {\n  if (container == null) return []\n  return Array.from(container.querySelectorAll<HTMLElement>(focusableSelector))\n}\n\nexport enum FocusableMode {\n  /** The element itself must be focusable. */\n  Strict,\n\n  /** The element should be inside of a focusable element. */\n  Loose,\n}\n\nexport function isFocusableElement(\n  element: HTMLElement,\n  mode: FocusableMode = FocusableMode.Strict\n) {\n  if (element === document.body) return false\n\n  return match(mode, {\n    [FocusableMode.Strict]() {\n      return element.matches(focusableSelector)\n    },\n    [FocusableMode.Loose]() {\n      let next: HTMLElement | null = element\n\n      while (next !== null) {\n        if (next.matches(focusableSelector)) return true\n        next = next.parentElement\n      }\n\n      return false\n    },\n  })\n}\n\nexport function focusElement(element: HTMLElement | null) {\n  element?.focus({ preventScroll: true })\n}\n\nexport function focusIn(container: HTMLElement | HTMLElement[], focus: Focus) {\n  let elements = Array.isArray(container) ? container : getFocusableElements(container)\n  let active = document.activeElement as HTMLElement\n\n  let direction = (() => {\n    if (focus & (Focus.First | Focus.Next)) return Direction.Next\n    if (focus & (Focus.Previous | Focus.Last)) return Direction.Previous\n\n    throw new Error('Missing Focus.First, Focus.Previous, Focus.Next or Focus.Last')\n  })()\n\n  let startIndex = (() => {\n    if (focus & Focus.First) return 0\n    if (focus & Focus.Previous) return Math.max(0, elements.indexOf(active)) - 1\n    if (focus & Focus.Next) return Math.max(0, elements.indexOf(active)) + 1\n    if (focus & Focus.Last) return elements.length - 1\n\n    throw new Error('Missing Focus.First, Focus.Previous, Focus.Next or Focus.Last')\n  })()\n\n  let focusOptions = focus & Focus.NoScroll ? { preventScroll: true } : {}\n\n  let offset = 0\n  let total = elements.length\n  let next = undefined\n  do {\n    // Guard against infinite loops\n    if (offset >= total || offset + total <= 0) return FocusResult.Error\n\n    let nextIdx = startIndex + offset\n\n    if (focus & Focus.WrapAround) {\n      nextIdx = (nextIdx + total) % total\n    } else {\n      if (nextIdx < 0) return FocusResult.Underflow\n      if (nextIdx >= total) return FocusResult.Overflow\n    }\n\n    next = elements[nextIdx]\n\n    // Try the focus the next element, might not work if it is \"hidden\" to the user.\n    next?.focus(focusOptions)\n\n    // Try the next one in line\n    offset += direction\n  } while (next !== document.activeElement)\n\n  return FocusResult.Success\n}\n","export function contains(containers: Set<HTMLElement>, element: HTMLElement) {\n  for (let container of containers) {\n    if (container.contains(element)) return true\n  }\n\n  return false\n}\n","import {\n  useRef,\n  // Types\n  MutableRefObject,\n} from 'react'\n\nimport { Keys } from '../components/keyboard'\nimport { useIsoMorphicEffect } from './use-iso-morphic-effect'\nimport { focusElement, focusIn, Focus, FocusResult } from '../utils/focus-management'\nimport { contains } from '../internal/dom-containers'\n\nexport function useFocusTrap(\n  containers: MutableRefObject<Set<HTMLElement>>,\n  enabled: boolean = true,\n  options: { initialFocus?: MutableRefObject<HTMLElement | null> } = {}\n) {\n  let restoreElement = useRef<HTMLElement | null>(\n    typeof window !== 'undefined' ? (document.activeElement as HTMLElement) : null\n  )\n  let previousActiveElement = useRef<HTMLElement | null>(null)\n  let mounted = useRef(false)\n\n  // Handle initial focus\n  useIsoMorphicEffect(() => {\n    if (!enabled) return\n    if (containers.current.size !== 1) return\n\n    mounted.current = true\n\n    let activeElement = document.activeElement as HTMLElement\n\n    if (options.initialFocus?.current) {\n      if (options.initialFocus?.current === activeElement) {\n        return // Initial focus ref is already the active element\n      }\n    } else if (contains(containers.current, activeElement)) {\n      return // Already focused within Dialog\n    }\n\n    restoreElement.current = activeElement\n\n    // Try to focus the initialFocus ref\n    if (options.initialFocus?.current) {\n      focusElement(options.initialFocus.current)\n    } else {\n      let couldFocus = false\n      for (let container of containers.current) {\n        let result = focusIn(container, Focus.First)\n        if (result === FocusResult.Success) {\n          couldFocus = true\n          break\n        }\n      }\n\n      if (!couldFocus) throw new Error('There are no focusable elements inside the <FocusTrap />')\n    }\n\n    previousActiveElement.current = document.activeElement as HTMLElement\n\n    return () => {\n      mounted.current = false\n      focusElement(restoreElement.current)\n      restoreElement.current = null\n      previousActiveElement.current = null\n    }\n  }, [enabled, containers, mounted, options.initialFocus])\n\n  // Handle Tab & Shift+Tab keyboard events\n  useIsoMorphicEffect(() => {\n    if (!enabled) return\n\n    function handler(event: KeyboardEvent) {\n      if (event.key !== Keys.Tab) return\n      if (!document.activeElement) return\n      if (containers.current.size !== 1) return\n\n      event.preventDefault()\n\n      for (let element of containers.current) {\n        let result = focusIn(\n          element,\n          (event.shiftKey ? Focus.Previous : Focus.Next) | Focus.WrapAround\n        )\n\n        if (result === FocusResult.Success) {\n          previousActiveElement.current = document.activeElement as HTMLElement\n          break\n        }\n      }\n    }\n\n    window.addEventListener('keydown', handler)\n    return () => window.removeEventListener('keydown', handler)\n  }, [enabled, containers])\n\n  // Prevent programmatically escaping\n  useIsoMorphicEffect(() => {\n    if (!enabled) return\n    if (containers.current.size !== 1) return\n\n    function handler(event: FocusEvent) {\n      let previous = previousActiveElement.current\n      if (!previous) return\n      if (!mounted.current) return\n\n      let toElement = event.target as HTMLElement | null\n\n      if (toElement && toElement instanceof HTMLElement) {\n        if (!contains(containers.current, toElement)) {\n          event.preventDefault()\n          event.stopPropagation()\n          focusElement(previous)\n        } else {\n          previousActiveElement.current = toElement\n          focusElement(toElement)\n        }\n      } else {\n        focusElement(previousActiveElement.current)\n      }\n    }\n\n    window.addEventListener('focus', handler, true)\n    return () => window.removeEventListener('focus', handler, true)\n  }, [enabled, mounted, containers])\n}\n","import { MutableRefObject } from 'react'\nimport { useIsoMorphicEffect } from './use-iso-morphic-effect'\n\nlet interactables = new Set<HTMLElement>()\nlet originals = new Map<HTMLElement, { 'aria-hidden': string | null; inert: boolean }>()\n\nfunction inert(element: HTMLElement) {\n  element.setAttribute('aria-hidden', 'true')\n  // @ts-expect-error `inert` does not exist on HTMLElement (yet!)\n  element.inert = true\n}\n\nfunction restore(element: HTMLElement) {\n  let original = originals.get(element)\n  if (!original) return\n\n  if (original['aria-hidden'] === null) element.removeAttribute('aria-hidden')\n  else element.setAttribute('aria-hidden', original['aria-hidden'])\n  // @ts-expect-error `inert` does not exist on HTMLElement (yet!)\n  element.inert = original.inert\n}\n\nexport function useInertOthers<TElement extends HTMLElement>(\n  container: MutableRefObject<TElement | null>,\n  enabled: boolean = true\n) {\n  useIsoMorphicEffect(() => {\n    if (!enabled) return\n    if (!container.current) return\n\n    let element = container.current\n\n    // Mark myself as an interactable element\n    interactables.add(element)\n\n    // Restore elements that now contain an interactable child\n    for (let original of originals.keys()) {\n      if (original.contains(element)) {\n        restore(original)\n        originals.delete(original)\n      }\n    }\n\n    // Collect direct children of the body\n    document.querySelectorAll('body > *').forEach(child => {\n      if (!(child instanceof HTMLElement)) return // Skip non-HTMLElements\n\n      // Skip the interactables, and the parents of the interactables\n      for (let interactable of interactables) {\n        if (child.contains(interactable)) return\n      }\n\n      // Keep track of the elements\n      if (interactables.size === 1) {\n        originals.set(child, {\n          'aria-hidden': child.getAttribute('aria-hidden'),\n          // @ts-expect-error `inert` does not exist on HTMLElement (yet!)\n          inert: child.inert,\n        })\n\n        // Mutate the element\n        inert(child)\n      }\n    })\n\n    return () => {\n      // Inert is disabled on the current element\n      interactables.delete(element)\n\n      // We still have interactable elements, therefore this one and its parent\n      // will become inert as well.\n      if (interactables.size > 0) {\n        // Collect direct children of the body\n        document.querySelectorAll('body > *').forEach(child => {\n          if (!(child instanceof HTMLElement)) return // Skip non-HTMLElements\n\n          // Skip already inert parents\n          if (originals.has(child)) return\n\n          // Skip the interactables, and the parents of the interactables\n          for (let interactable of interactables) {\n            if (child.contains(interactable)) return\n          }\n\n          originals.set(child, {\n            'aria-hidden': child.getAttribute('aria-hidden'),\n            // @ts-expect-error `inert` does not exist on HTMLElement (yet!)\n            inert: child.inert,\n          })\n\n          // Mutate the element\n          inert(child)\n        })\n      } else {\n        for (let element of originals.keys()) {\n          // Restore\n          restore(element)\n\n          // Cleanup\n          originals.delete(element)\n        }\n      }\n    }\n  }, [enabled])\n}\n","import React, { ReactNode, createContext, useContext, useCallback } from 'react'\nimport { useIsoMorphicEffect } from '../hooks/use-iso-morphic-effect'\n\ntype OnUpdate = (message: StackMessage, element: HTMLElement) => void\n\nlet StackContext = createContext<OnUpdate>(() => {})\nStackContext.displayName = 'StackContext'\n\nexport enum StackMessage {\n  AddElement,\n  RemoveElement,\n}\n\nexport function useStackContext() {\n  return useContext(StackContext)\n}\n\nexport function useElemenStack(element: HTMLElement | null) {\n  let notify = useStackContext()\n\n  useIsoMorphicEffect(() => {\n    if (!element) return\n\n    notify(StackMessage.AddElement, element)\n    return () => notify(StackMessage.RemoveElement, element)\n  }, [element])\n}\n\nexport function StackProvider({\n  children,\n  onUpdate,\n}: {\n  children: ReactNode\n  onUpdate?: OnUpdate\n}) {\n  let parentUpdate = useStackContext()\n\n  let notify = useCallback(\n    (...args: Parameters<OnUpdate>) => {\n      // Notify our layer\n      onUpdate?.(...args)\n\n      // Notify the parent\n      parentUpdate(...args)\n    },\n    [parentUpdate, onUpdate]\n  )\n\n  return <StackContext.Provider value={notify}>{children}</StackContext.Provider>\n}\n","import React, {\n  createContext,\n  useContext,\n\n  // Types\n  ReactNode,\n} from 'react'\n\nlet ForcePortalRootContext = createContext(false)\n\nexport function usePortalRoot() {\n  return useContext(ForcePortalRootContext)\n}\n\ninterface ForcePortalRootProps {\n  force: boolean\n  children: ReactNode\n}\n\nexport function ForcePortalRoot(props: ForcePortalRootProps) {\n  return (\n    <ForcePortalRootContext.Provider value={props.force}>\n      {props.children}\n    </ForcePortalRootContext.Provider>\n  )\n}\n","// WAI-ARIA: https://www.w3.org/TR/wai-aria-practices-1.2/#dialog_modal\nimport React, {\n  Fragment,\n  createContext,\n  useContext,\n  useEffect,\n  useState,\n\n  // Types\n  ElementType,\n  MutableRefObject,\n} from 'react'\nimport { createPortal } from 'react-dom'\n\nimport { Props } from '../../types'\nimport { render } from '../../utils/render'\nimport { useIsoMorphicEffect } from '../../hooks/use-iso-morphic-effect'\nimport { useElemenStack, StackProvider } from '../../internal/stack-context'\nimport { usePortalRoot } from '../../internal/portal-force-root'\n\nfunction usePortalTarget(): HTMLElement | null {\n  let forceInRoot = usePortalRoot()\n  let groupTarget = useContext(PortalGroupContext)\n  let [target, setTarget] = useState(() => {\n    // Group context is used, but still null\n    if (!forceInRoot && groupTarget !== null) return null\n\n    // No group context is used, let's create a default portal root\n    if (typeof window === 'undefined') return null\n    let existingRoot = document.getElementById('headlessui-portal-root')\n    if (existingRoot) return existingRoot\n\n    let root = document.createElement('div')\n    root.setAttribute('id', 'headlessui-portal-root')\n    return document.body.appendChild(root)\n  })\n\n  useEffect(() => {\n    if (forceInRoot) return\n    if (groupTarget === null) return\n    setTarget(groupTarget.current)\n  }, [groupTarget, setTarget, forceInRoot])\n\n  return target\n}\n\n// ---\n\nlet DEFAULT_PORTAL_TAG = Fragment\ninterface PortalRenderPropArg {}\n\nexport function Portal<TTag extends ElementType = typeof DEFAULT_PORTAL_TAG>(\n  props: Props<TTag, PortalRenderPropArg>\n) {\n  let passthroughProps = props\n  let target = usePortalTarget()\n  let [element] = useState<HTMLDivElement | null>(() =>\n    typeof window === 'undefined' ? null : document.createElement('div')\n  )\n\n  useElemenStack(element)\n\n  useIsoMorphicEffect(() => {\n    if (!target) return\n    if (!element) return\n\n    target.appendChild(element)\n\n    return () => {\n      if (!target) return\n      if (!element) return\n\n      target.removeChild(element)\n\n      if (target.childNodes.length <= 0) {\n        target.parentElement?.removeChild(target)\n      }\n    }\n  }, [target, element])\n\n  return (\n    <StackProvider>\n      {!target || !element\n        ? null\n        : createPortal(render(passthroughProps, {}, DEFAULT_PORTAL_TAG), element)}\n    </StackProvider>\n  )\n}\n\n// ---\n\nlet DEFAULT_GROUP_TAG = Fragment\ninterface GroupRenderPropArg {}\n\nlet PortalGroupContext = createContext<MutableRefObject<HTMLElement | null> | null>(null)\n\nfunction Group<TTag extends ElementType = typeof DEFAULT_GROUP_TAG>(\n  props: Props<TTag, GroupRenderPropArg> & {\n    target: MutableRefObject<HTMLElement | null>\n  }\n) {\n  let { target, ...passthroughProps } = props\n\n  return (\n    <PortalGroupContext.Provider value={target}>\n      {render(passthroughProps, {}, DEFAULT_GROUP_TAG)}\n    </PortalGroupContext.Provider>\n  )\n}\n\n// ---\n\nPortal.Group = Group\n","// WAI-ARIA: https://www.w3.org/TR/wai-aria-practices-1.2/#dialog_modal\nimport React, {\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useReducer,\n  useRef,\n\n  // Types\n  ContextType,\n  ElementType,\n  MouseEvent as ReactMouseEvent,\n  MutableRefObject,\n  Ref,\n} from 'react'\n\nimport { Props } from '../../types'\nimport { match } from '../../utils/match'\nimport { forwardRefWithAs, render, Features, PropsForFeatures } from '../../utils/render'\nimport { useSyncRefs } from '../../hooks/use-sync-refs'\nimport { Keys } from '../keyboard'\nimport { isDisabledReactIssue7711 } from '../../utils/bugs'\nimport { useId } from '../../hooks/use-id'\nimport { useFocusTrap } from '../../hooks/use-focus-trap'\nimport { useInertOthers } from '../../hooks/use-inert-others'\nimport { Portal } from '../../components/portal/portal'\nimport { StackProvider, StackMessage } from '../../internal/stack-context'\nimport { ForcePortalRoot } from '../../internal/portal-force-root'\nimport { contains } from '../../internal/dom-containers'\n\nenum DialogStates {\n  Open,\n  Closed,\n}\n\ninterface StateDefinition {\n  titleId: string | null\n  descriptionId: string | null\n}\n\nenum ActionTypes {\n  SetTitleId,\n  SetDescriptionId,\n}\n\ntype Actions =\n  | { type: ActionTypes.SetTitleId; id: string | null }\n  | { type: ActionTypes.SetDescriptionId; id: string | null }\n\nlet reducers: {\n  [P in ActionTypes]: (\n    state: StateDefinition,\n    action: Extract<Actions, { type: P }>\n  ) => StateDefinition\n} = {\n  [ActionTypes.SetTitleId](state, action) {\n    if (state.titleId === action.id) return state\n    return { ...state, titleId: action.id }\n  },\n  [ActionTypes.SetDescriptionId](state, action) {\n    if (state.descriptionId === action.id) return state\n    return { ...state, descriptionId: action.id }\n  },\n}\n\nlet DialogContext = createContext<\n  | [\n      {\n        dialogState: DialogStates\n        close(): void\n        setTitleId(id: string | null): void\n        setDescriptionId(id: string | null): void\n      },\n      StateDefinition\n    ]\n  | null\n>(null)\nDialogContext.displayName = 'DialogContext'\n\nfunction useDialogContext(component: string) {\n  let context = useContext(DialogContext)\n  if (context === null) {\n    let err = new Error(`<${component} /> is missing a parent <${Dialog.displayName} /> component.`)\n    if (Error.captureStackTrace) Error.captureStackTrace(err, useDialogContext)\n    throw err\n  }\n  return context\n}\n\nfunction stateReducer(state: StateDefinition, action: Actions) {\n  return match(action.type, reducers, state, action)\n}\n\n// ---\n\nlet DEFAULT_DIALOG_TAG = 'div' as const\ninterface DialogRenderPropArg {\n  open: boolean\n}\ntype DialogPropsWeControl = 'id' | 'role' | 'aria-modal' | 'aria-describedby' | 'aria-labelledby'\n\nlet DialogRenderFeatures = Features.RenderStrategy | Features.Static\n\nlet DialogRoot = forwardRefWithAs(function Dialog<\n  TTag extends ElementType = typeof DEFAULT_DIALOG_TAG\n>(\n  props: Props<TTag, DialogRenderPropArg, DialogPropsWeControl> &\n    PropsForFeatures<typeof DialogRenderFeatures> & {\n      open: boolean\n      onClose(value: boolean): void\n      initialFocus?: MutableRefObject<HTMLElement | null>\n    },\n  ref: Ref<HTMLDivElement>\n) {\n  let { open, onClose, initialFocus, ...rest } = props\n\n  let containers = useRef<Set<HTMLElement>>(new Set())\n  let internalDialogRef = useRef<HTMLDivElement | null>(null)\n  let dialogRef = useSyncRefs(internalDialogRef, ref)\n\n  // Validations\n  let hasOpen = props.hasOwnProperty('open')\n  let hasOnClose = props.hasOwnProperty('onClose')\n  if (!hasOpen && !hasOnClose) {\n    throw new Error(\n      `You have to provide an \\`open\\` and an \\`onClose\\` prop to the \\`Dialog\\` component.`\n    )\n  }\n\n  if (!hasOpen) {\n    throw new Error(\n      `You provided an \\`onClose\\` prop to the \\`Dialog\\`, but forgot an \\`open\\` prop.`\n    )\n  }\n\n  if (!hasOnClose) {\n    throw new Error(\n      `You provided an \\`open\\` prop to the \\`Dialog\\`, but forgot an \\`onClose\\` prop.`\n    )\n  }\n\n  if (typeof open !== 'boolean') {\n    throw new Error(\n      `You provided an \\`open\\` prop to the \\`Dialog\\`, but the value is not a boolean. Received: ${open}`\n    )\n  }\n\n  if (typeof onClose !== 'function') {\n    throw new Error(\n      `You provided an \\`onClose\\` prop to the \\`Dialog\\`, but the value is not a function. Received: ${onClose}`\n    )\n  }\n\n  let dialogState = open ? DialogStates.Open : DialogStates.Closed\n\n  let [state, dispatch] = useReducer(stateReducer, {\n    titleId: null,\n    descriptionId: null,\n  } as StateDefinition)\n\n  let close = useCallback(() => onClose(false), [onClose])\n\n  let setTitleId = useCallback(\n    (id: string | null) => dispatch({ type: ActionTypes.SetTitleId, id }),\n    [dispatch]\n  )\n  let setDescriptionId = useCallback(\n    (id: string | null) => dispatch({ type: ActionTypes.SetDescriptionId, id }),\n    [dispatch]\n  )\n\n  // Handle outside click\n  useEffect(() => {\n    function handler(event: MouseEvent) {\n      let target = event.target as HTMLElement\n\n      if (dialogState !== DialogStates.Open) return\n      if (containers.current.size !== 1) return\n      if (contains(containers.current, target)) return\n\n      close()\n    }\n\n    window.addEventListener('mousedown', handler)\n    return () => window.removeEventListener('mousedown', handler)\n  }, [dialogState, containers, close])\n\n  // Handle `Escape` to close\n  useEffect(() => {\n    function handler(event: KeyboardEvent) {\n      if (event.key !== Keys.Escape) return\n      if (dialogState !== DialogStates.Open) return\n      if (containers.current.size > 1) return // 1 is myself, otherwise other elements in the Stack\n      close()\n    }\n\n    window.addEventListener('keydown', handler)\n    return () => window.removeEventListener('keydown', handler)\n  }, [close, dialogState])\n\n  // Scroll lock\n  useEffect(() => {\n    if (dialogState !== DialogStates.Open) return\n\n    let overflow = document.documentElement.style.overflow\n    let paddingRight = document.documentElement.style.paddingRight\n\n    let scrollbarWidth = window.innerWidth - document.documentElement.clientWidth\n\n    document.documentElement.style.overflow = 'hidden'\n    document.documentElement.style.paddingRight = `${scrollbarWidth}px`\n    return () => {\n      document.documentElement.style.overflow = overflow\n      document.documentElement.style.paddingRight = paddingRight\n    }\n  }, [dialogState])\n\n  // Trigger close when the FocusTrap gets hidden\n  useEffect(() => {\n    if (dialogState !== DialogStates.Open) return\n    if (!internalDialogRef.current) return\n\n    let observer = new IntersectionObserver(entries => {\n      for (let entry of entries) {\n        if (\n          entry.boundingClientRect.x === 0 &&\n          entry.boundingClientRect.y === 0 &&\n          entry.boundingClientRect.width === 0 &&\n          entry.boundingClientRect.height === 0\n        ) {\n          close()\n        }\n      }\n    })\n\n    observer.observe(internalDialogRef.current)\n\n    return () => observer.disconnect()\n  }, [dialogState, internalDialogRef, close])\n\n  let enabled = props.static ? true : dialogState === DialogStates.Open\n\n  useFocusTrap(containers, enabled, { initialFocus })\n  useInertOthers(internalDialogRef, enabled)\n\n  let id = `headlessui-dialog-${useId()}`\n\n  let contextBag = useMemo<ContextType<typeof DialogContext>>(\n    () => [{ dialogState, close, setTitleId, setDescriptionId }, state],\n    [dialogState, state, close, setTitleId, setDescriptionId]\n  )\n\n  let propsBag = useMemo<DialogRenderPropArg>(() => ({ open: dialogState === DialogStates.Open }), [\n    dialogState,\n  ])\n  let propsWeControl = {\n    ref: dialogRef,\n    id,\n    role: 'dialog',\n    'aria-modal': dialogState === DialogStates.Open ? true : undefined,\n    'aria-labelledby': state.titleId,\n    'aria-describedby': state.descriptionId,\n  }\n  let passthroughProps = rest\n\n  return (\n    <StackProvider\n      onUpdate={(message, element) => {\n        return match(message, {\n          [StackMessage.AddElement]() {\n            containers.current.add(element)\n          },\n          [StackMessage.RemoveElement]() {\n            containers.current.delete(element)\n          },\n        })\n      }}\n    >\n      <ForcePortalRoot force={true}>\n        <Portal>\n          <DialogContext.Provider value={contextBag}>\n            <Portal.Group target={internalDialogRef}>\n              <ForcePortalRoot force={false}>\n                {render(\n                  { ...passthroughProps, ...propsWeControl },\n                  propsBag,\n                  DEFAULT_DIALOG_TAG,\n                  DialogRenderFeatures,\n                  dialogState === DialogStates.Open\n                )}\n              </ForcePortalRoot>\n            </Portal.Group>\n          </DialogContext.Provider>\n        </Portal>\n      </ForcePortalRoot>\n    </StackProvider>\n  )\n})\n\n// ---\n\nlet DEFAULT_OVERLAY_TAG = 'div' as const\ninterface OverlayRenderPropArg {\n  open: boolean\n}\ntype OverlayPropsWeControl = 'id' | 'aria-hidden' | 'onClick'\n\nlet Overlay = forwardRefWithAs(function Overlay<\n  TTag extends ElementType = typeof DEFAULT_OVERLAY_TAG\n>(props: Props<TTag, OverlayRenderPropArg, OverlayPropsWeControl>, ref: Ref<HTMLDivElement>) {\n  let [{ dialogState, close }] = useDialogContext([Dialog.displayName, Overlay.name].join('.'))\n  let overlayRef = useSyncRefs(ref)\n\n  let id = `headlessui-dialog-overlay-${useId()}`\n\n  let handleClick = useCallback(\n    (event: ReactMouseEvent) => {\n      if (isDisabledReactIssue7711(event.currentTarget)) return event.preventDefault()\n      close()\n    },\n    [close]\n  )\n\n  let propsBag = useMemo<OverlayRenderPropArg>(\n    () => ({ open: dialogState === DialogStates.Open }),\n    [dialogState]\n  )\n  let propsWeControl = {\n    ref: overlayRef,\n    id,\n    'aria-hidden': true,\n    onClick: handleClick,\n  }\n  let passthroughProps = props\n\n  return render({ ...passthroughProps, ...propsWeControl }, propsBag, DEFAULT_OVERLAY_TAG)\n})\n\n// ---\n\nlet DEFAULT_TITLE_TAG = 'h2' as const\ninterface TitleRenderPropArg {\n  open: boolean\n}\ntype TitlePropsWeControl = 'id'\n\nfunction Title<TTag extends ElementType = typeof DEFAULT_TITLE_TAG>(\n  props: Props<TTag, TitleRenderPropArg, TitlePropsWeControl>\n) {\n  let [{ dialogState, setTitleId }] = useDialogContext([Dialog.displayName, Title.name].join('.'))\n\n  let id = `headlessui-dialog-title-${useId()}`\n\n  useEffect(() => {\n    setTitleId(id)\n    return () => setTitleId(null)\n  }, [id, setTitleId])\n\n  let propsBag = useMemo<TitleRenderPropArg>(() => ({ open: dialogState === DialogStates.Open }), [\n    dialogState,\n  ])\n  let propsWeControl = { id }\n  let passthroughProps = props\n\n  return render({ ...passthroughProps, ...propsWeControl }, propsBag, DEFAULT_TITLE_TAG)\n}\n\n// ---\n\nlet DEFAULT_DESCRIPTION_TAG = 'p' as const\ninterface DescriptionRenderPropArg {\n  open: boolean\n}\ntype DescriptionPropsWeControl = 'id' | 'ref'\n\nfunction Description<TTag extends ElementType = typeof DEFAULT_DESCRIPTION_TAG>(\n  props: Props<TTag, DescriptionRenderPropArg, DescriptionPropsWeControl>\n) {\n  let [{ dialogState, setDescriptionId }] = useDialogContext(\n    [Dialog.displayName, Description.name].join('.')\n  )\n\n  let id = `headlessui-dialog-description-${useId()}`\n\n  useEffect(() => {\n    setDescriptionId(id)\n    return () => setDescriptionId(null)\n  }, [id, setDescriptionId])\n\n  let propsBag = useMemo<DescriptionRenderPropArg>(\n    () => ({ open: dialogState === DialogStates.Open }),\n    [dialogState]\n  )\n  let propsWeControl = { id }\n  let passthroughProps = props\n\n  return render({ ...passthroughProps, ...propsWeControl }, propsBag, DEFAULT_DESCRIPTION_TAG)\n}\n\n// ---\n\nexport let Dialog = Object.assign(DialogRoot, { Overlay, Title, Description })\n","// WAI-ARIA: https://www.w3.org/TR/wai-aria-practices-1.2/#disclosure\nimport React, {\n  Fragment,\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useReducer,\n\n  // Types\n  Dispatch,\n  ElementType,\n  KeyboardEvent as ReactKeyboardEvent,\n  MouseEvent as ReactMouseEvent,\n  Ref,\n} from 'react'\n\nimport { Props } from '../../types'\nimport { match } from '../../utils/match'\nimport { forwardRefWithAs, render, Features, PropsForFeatures } from '../../utils/render'\nimport { useSyncRefs } from '../../hooks/use-sync-refs'\nimport { useId } from '../../hooks/use-id'\nimport { Keys } from '../keyboard'\nimport { isDisabledReactIssue7711 } from '../../utils/bugs'\n\nenum DisclosureStates {\n  Open,\n  Closed,\n}\n\ninterface StateDefinition {\n  disclosureState: DisclosureStates\n\n  linkedPanel: boolean\n\n  buttonId: string\n  panelId: string\n}\n\nenum ActionTypes {\n  ToggleDisclosure,\n\n  SetButtonId,\n  SetPanelId,\n\n  LinkPanel,\n  UnlinkPanel,\n}\n\ntype Actions =\n  | { type: ActionTypes.ToggleDisclosure }\n  | { type: ActionTypes.SetButtonId; buttonId: string }\n  | { type: ActionTypes.SetPanelId; panelId: string }\n  | { type: ActionTypes.LinkPanel }\n  | { type: ActionTypes.UnlinkPanel }\n\nlet reducers: {\n  [P in ActionTypes]: (\n    state: StateDefinition,\n    action: Extract<Actions, { type: P }>\n  ) => StateDefinition\n} = {\n  [ActionTypes.ToggleDisclosure]: state => ({\n    ...state,\n    disclosureState: match(state.disclosureState, {\n      [DisclosureStates.Open]: DisclosureStates.Closed,\n      [DisclosureStates.Closed]: DisclosureStates.Open,\n    }),\n  }),\n  [ActionTypes.LinkPanel](state) {\n    if (state.linkedPanel === true) return state\n    return { ...state, linkedPanel: true }\n  },\n  [ActionTypes.UnlinkPanel](state) {\n    if (state.linkedPanel === false) return state\n    return { ...state, linkedPanel: false }\n  },\n  [ActionTypes.SetButtonId](state, action) {\n    if (state.buttonId === action.buttonId) return state\n    return { ...state, buttonId: action.buttonId }\n  },\n  [ActionTypes.SetPanelId](state, action) {\n    if (state.panelId === action.panelId) return state\n    return { ...state, panelId: action.panelId }\n  },\n}\n\nlet DisclosureContext = createContext<[StateDefinition, Dispatch<Actions>] | null>(null)\nDisclosureContext.displayName = 'DisclosureContext'\n\nfunction useDisclosureContext(component: string) {\n  let context = useContext(DisclosureContext)\n  if (context === null) {\n    let err = new Error(`<${component} /> is missing a parent <${Disclosure.name} /> component.`)\n    if (Error.captureStackTrace) Error.captureStackTrace(err, useDisclosureContext)\n    throw err\n  }\n  return context\n}\n\nfunction stateReducer(state: StateDefinition, action: Actions) {\n  return match(action.type, reducers, state, action)\n}\n\n// ---\n\nlet DEFAULT_DISCLOSURE_TAG = Fragment\ninterface DisclosureRenderPropArg {\n  open: boolean\n}\n\nexport function Disclosure<TTag extends ElementType = typeof DEFAULT_DISCLOSURE_TAG>(\n  props: Props<TTag, DisclosureRenderPropArg>\n) {\n  let buttonId = `headlessui-disclosure-button-${useId()}`\n  let panelId = `headlessui-disclosure-panel-${useId()}`\n\n  let reducerBag = useReducer(stateReducer, {\n    disclosureState: DisclosureStates.Closed,\n    linkedPanel: false,\n    buttonId,\n    panelId,\n  } as StateDefinition)\n  let [{ disclosureState }, dispatch] = reducerBag\n\n  useEffect(() => dispatch({ type: ActionTypes.SetButtonId, buttonId }), [buttonId, dispatch])\n  useEffect(() => dispatch({ type: ActionTypes.SetPanelId, panelId }), [panelId, dispatch])\n\n  let propsBag = useMemo<DisclosureRenderPropArg>(\n    () => ({ open: disclosureState === DisclosureStates.Open }),\n    [disclosureState]\n  )\n\n  return (\n    <DisclosureContext.Provider value={reducerBag}>\n      {render(props, propsBag, DEFAULT_DISCLOSURE_TAG)}\n    </DisclosureContext.Provider>\n  )\n}\n\n// ---\n\nlet DEFAULT_BUTTON_TAG = 'button' as const\ninterface ButtonRenderPropArg {\n  open: boolean\n}\ntype ButtonPropsWeControl =\n  | 'id'\n  | 'type'\n  | 'aria-expanded'\n  | 'aria-controls'\n  | 'onKeyDown'\n  | 'onClick'\n\nlet Button = forwardRefWithAs(function Button<TTag extends ElementType = typeof DEFAULT_BUTTON_TAG>(\n  props: Props<TTag, ButtonRenderPropArg, ButtonPropsWeControl>,\n  ref: Ref<HTMLButtonElement>\n) {\n  let [state, dispatch] = useDisclosureContext([Disclosure.name, Button.name].join('.'))\n  let buttonRef = useSyncRefs(ref)\n\n  let handleKeyDown = useCallback(\n    (event: ReactKeyboardEvent<HTMLButtonElement>) => {\n      switch (event.key) {\n        case Keys.Space:\n        case Keys.Enter:\n          event.preventDefault()\n          dispatch({ type: ActionTypes.ToggleDisclosure })\n          break\n      }\n    },\n    [dispatch]\n  )\n\n  let handleClick = useCallback(\n    (event: ReactMouseEvent) => {\n      if (isDisabledReactIssue7711(event.currentTarget)) return\n      if (props.disabled) return\n      dispatch({ type: ActionTypes.ToggleDisclosure })\n    },\n    [dispatch, props.disabled]\n  )\n\n  let propsBag = useMemo<ButtonRenderPropArg>(\n    () => ({ open: state.disclosureState === DisclosureStates.Open }),\n    [state]\n  )\n\n  let passthroughProps = props\n  let propsWeControl = {\n    ref: buttonRef,\n    id: state.buttonId,\n    type: 'button',\n    'aria-expanded': state.disclosureState === DisclosureStates.Open ? true : undefined,\n    'aria-controls': state.linkedPanel ? state.panelId : undefined,\n    onKeyDown: handleKeyDown,\n    onClick: handleClick,\n  }\n\n  return render({ ...passthroughProps, ...propsWeControl }, propsBag, DEFAULT_BUTTON_TAG)\n})\n\n// ---\n\nlet DEFAULT_PANEL_TAG = 'div' as const\ninterface PanelRenderPropArg {\n  open: boolean\n}\ntype PanelPropsWeControl = 'id'\n\nlet PanelRenderFeatures = Features.RenderStrategy | Features.Static\n\nlet Panel = forwardRefWithAs(function Panel<TTag extends ElementType = typeof DEFAULT_PANEL_TAG>(\n  props: Props<TTag, PanelRenderPropArg, PanelPropsWeControl> &\n    PropsForFeatures<typeof PanelRenderFeatures>,\n  ref: Ref<HTMLDivElement>\n) {\n  let [state, dispatch] = useDisclosureContext([Disclosure.name, Panel.name].join('.'))\n  let panelRef = useSyncRefs(ref, () => {\n    if (state.linkedPanel) return\n    dispatch({ type: ActionTypes.LinkPanel })\n  })\n\n  // Unlink on \"unmount\" myself\n  useEffect(() => () => dispatch({ type: ActionTypes.UnlinkPanel }), [dispatch])\n\n  // Unlink on \"unmount\" children\n  useEffect(() => {\n    if (state.disclosureState === DisclosureStates.Closed && (props.unmount ?? true)) {\n      dispatch({ type: ActionTypes.UnlinkPanel })\n    }\n  }, [state.disclosureState, props.unmount, dispatch])\n\n  let propsBag = useMemo<PanelRenderPropArg>(\n    () => ({ open: state.disclosureState === DisclosureStates.Open }),\n    [state]\n  )\n  let propsWeControl = {\n    ref: panelRef,\n    id: state.panelId,\n  }\n  let passthroughProps = props\n\n  return render(\n    { ...passthroughProps, ...propsWeControl },\n    propsBag,\n    DEFAULT_PANEL_TAG,\n    PanelRenderFeatures,\n    state.disclosureState === DisclosureStates.Open\n  )\n})\n\n// ---\n\nDisclosure.Button = Button\nDisclosure.Panel = Panel\n","function assertNever(x: never): never {\n  throw new Error('Unexpected object: ' + x)\n}\n\nexport enum Focus {\n  /** Focus the first non-disabled item. */\n  First,\n\n  /** Focus the previous non-disabled item. */\n  Previous,\n\n  /** Focus the next non-disabled item. */\n  Next,\n\n  /** Focus the last non-disabled item. */\n  Last,\n\n  /** Focus a specific item based on the `id` of the item. */\n  Specific,\n\n  /** Focus no items at all. */\n  Nothing,\n}\n\nexport function calculateActiveIndex<TItem>(\n  action: { focus: Focus.Specific; id: string } | { focus: Exclude<Focus, Focus.Specific> },\n  resolvers: {\n    resolveItems(): TItem[]\n    resolveActiveIndex(): number | null\n    resolveId(item: TItem): string\n    resolveDisabled(item: TItem): boolean\n  }\n) {\n  let items = resolvers.resolveItems()\n  if (items.length <= 0) return null\n\n  let currentActiveIndex = resolvers.resolveActiveIndex()\n  let activeIndex = currentActiveIndex ?? -1\n\n  let nextActiveIndex = (() => {\n    switch (action.focus) {\n      case Focus.First:\n        return items.findIndex(item => !resolvers.resolveDisabled(item))\n\n      case Focus.Previous: {\n        let idx = items\n          .slice()\n          .reverse()\n          .findIndex((item, idx, all) => {\n            if (activeIndex !== -1 && all.length - idx - 1 >= activeIndex) return false\n            return !resolvers.resolveDisabled(item)\n          })\n        if (idx === -1) return idx\n        return items.length - 1 - idx\n      }\n\n      case Focus.Next:\n        return items.findIndex((item, idx) => {\n          if (idx <= activeIndex) return false\n          return !resolvers.resolveDisabled(item)\n        })\n\n      case Focus.Last: {\n        let idx = items\n          .slice()\n          .reverse()\n          .findIndex(item => !resolvers.resolveDisabled(item))\n        if (idx === -1) return idx\n        return items.length - 1 - idx\n      }\n\n      case Focus.Specific:\n        return items.findIndex(item => resolvers.resolveId(item) === action.id)\n\n      case Focus.Nothing:\n        return null\n\n      default:\n        assertNever(action)\n    }\n  })()\n\n  return nextActiveIndex === -1 ? currentActiveIndex : nextActiveIndex\n}\n","import React, {\n  Fragment,\n  createContext,\n  createRef,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useReducer,\n  useRef,\n\n  // Types\n  Dispatch,\n  ElementType,\n  KeyboardEvent as ReactKeyboardEvent,\n  MouseEvent as ReactMouseEvent,\n  MutableRefObject,\n  Ref,\n} from 'react'\n\nimport { useDisposables } from '../../hooks/use-disposables'\nimport { useId } from '../../hooks/use-id'\nimport { useIsoMorphicEffect } from '../../hooks/use-iso-morphic-effect'\nimport { useComputed } from '../../hooks/use-computed'\nimport { useSyncRefs } from '../../hooks/use-sync-refs'\nimport { Props } from '../../types'\nimport { Features, forwardRefWithAs, PropsForFeatures, render } from '../../utils/render'\nimport { match } from '../../utils/match'\nimport { disposables } from '../../utils/disposables'\nimport { Keys } from '../keyboard'\nimport { Focus, calculateActiveIndex } from '../../utils/calculate-active-index'\nimport { isDisabledReactIssue7711 } from '../../utils/bugs'\nimport { isFocusableElement, FocusableMode } from '../../utils/focus-management'\n\nenum ListboxStates {\n  Open,\n  Closed,\n}\n\ntype ListboxOptionDataRef = MutableRefObject<{\n  textValue?: string\n  disabled: boolean\n  value: unknown\n}>\n\ninterface StateDefinition {\n  listboxState: ListboxStates\n  propsRef: MutableRefObject<{ value: unknown; onChange(value: unknown): void }>\n  labelRef: MutableRefObject<HTMLLabelElement | null>\n  buttonRef: MutableRefObject<HTMLButtonElement | null>\n  optionsRef: MutableRefObject<HTMLUListElement | null>\n  disabled: boolean\n  options: { id: string; dataRef: ListboxOptionDataRef }[]\n  searchQuery: string\n  activeOptionIndex: number | null\n}\n\nenum ActionTypes {\n  OpenListbox,\n  CloseListbox,\n\n  SetDisabled,\n\n  GoToOption,\n  Search,\n  ClearSearch,\n\n  RegisterOption,\n  UnregisterOption,\n}\n\ntype Actions =\n  | { type: ActionTypes.CloseListbox }\n  | { type: ActionTypes.OpenListbox }\n  | { type: ActionTypes.SetDisabled; disabled: boolean }\n  | { type: ActionTypes.GoToOption; focus: Focus.Specific; id: string }\n  | { type: ActionTypes.GoToOption; focus: Exclude<Focus, Focus.Specific> }\n  | { type: ActionTypes.Search; value: string }\n  | { type: ActionTypes.ClearSearch }\n  | { type: ActionTypes.RegisterOption; id: string; dataRef: ListboxOptionDataRef }\n  | { type: ActionTypes.UnregisterOption; id: string }\n\nlet reducers: {\n  [P in ActionTypes]: (\n    state: StateDefinition,\n    action: Extract<Actions, { type: P }>\n  ) => StateDefinition\n} = {\n  [ActionTypes.CloseListbox](state) {\n    if (state.disabled) return state\n    if (state.listboxState === ListboxStates.Closed) return state\n    return { ...state, activeOptionIndex: null, listboxState: ListboxStates.Closed }\n  },\n  [ActionTypes.OpenListbox](state) {\n    if (state.disabled) return state\n    if (state.listboxState === ListboxStates.Open) return state\n    return { ...state, listboxState: ListboxStates.Open }\n  },\n  [ActionTypes.SetDisabled](state, action) {\n    if (state.disabled === action.disabled) return state\n    return { ...state, disabled: action.disabled }\n  },\n  [ActionTypes.GoToOption](state, action) {\n    if (state.disabled) return state\n    if (state.listboxState === ListboxStates.Closed) return state\n\n    let activeOptionIndex = calculateActiveIndex(action, {\n      resolveItems: () => state.options,\n      resolveActiveIndex: () => state.activeOptionIndex,\n      resolveId: item => item.id,\n      resolveDisabled: item => item.dataRef.current.disabled,\n    })\n\n    if (state.searchQuery === '' && state.activeOptionIndex === activeOptionIndex) return state\n    return { ...state, searchQuery: '', activeOptionIndex }\n  },\n  [ActionTypes.Search]: (state, action) => {\n    if (state.disabled) return state\n    if (state.listboxState === ListboxStates.Closed) return state\n\n    let searchQuery = state.searchQuery + action.value\n    let match = state.options.findIndex(\n      option =>\n        !option.dataRef.current.disabled &&\n        option.dataRef.current.textValue?.startsWith(searchQuery)\n    )\n\n    if (match === -1 || match === state.activeOptionIndex) return { ...state, searchQuery }\n    return { ...state, searchQuery, activeOptionIndex: match }\n  },\n  [ActionTypes.ClearSearch](state) {\n    if (state.disabled) return state\n    if (state.listboxState === ListboxStates.Closed) return state\n    if (state.searchQuery === '') return state\n    return { ...state, searchQuery: '' }\n  },\n  [ActionTypes.RegisterOption]: (state, action) => ({\n    ...state,\n    options: [...state.options, { id: action.id, dataRef: action.dataRef }],\n  }),\n  [ActionTypes.UnregisterOption]: (state, action) => {\n    let nextOptions = state.options.slice()\n    let currentActiveOption =\n      state.activeOptionIndex !== null ? nextOptions[state.activeOptionIndex] : null\n\n    let idx = nextOptions.findIndex(a => a.id === action.id)\n\n    if (idx !== -1) nextOptions.splice(idx, 1)\n\n    return {\n      ...state,\n      options: nextOptions,\n      activeOptionIndex: (() => {\n        if (idx === state.activeOptionIndex) return null\n        if (currentActiveOption === null) return null\n\n        // If we removed the option before the actual active index, then it would be out of sync. To\n        // fix this, we will find the correct (new) index position.\n        return nextOptions.indexOf(currentActiveOption)\n      })(),\n    }\n  },\n}\n\nlet ListboxContext = createContext<[StateDefinition, Dispatch<Actions>] | null>(null)\nListboxContext.displayName = 'ListboxContext'\n\nfunction useListboxContext(component: string) {\n  let context = useContext(ListboxContext)\n  if (context === null) {\n    let err = new Error(`<${component} /> is missing a parent <${Listbox.name} /> component.`)\n    if (Error.captureStackTrace) Error.captureStackTrace(err, useListboxContext)\n    throw err\n  }\n  return context\n}\n\nfunction stateReducer(state: StateDefinition, action: Actions) {\n  return match(action.type, reducers, state, action)\n}\n\n// ---\n\nlet DEFAULT_LISTBOX_TAG = Fragment\ninterface ListboxRenderPropArg {\n  open: boolean\n  disabled: boolean\n}\n\nexport function Listbox<TTag extends ElementType = typeof DEFAULT_LISTBOX_TAG, TType = string>(\n  props: Props<TTag, ListboxRenderPropArg, 'value' | 'onChange'> & {\n    value: TType\n    onChange(value: TType): void\n    disabled?: boolean\n  }\n) {\n  let { value, onChange, disabled = false, ...passThroughProps } = props\n  let reducerBag = useReducer(stateReducer, {\n    listboxState: ListboxStates.Closed,\n    propsRef: { current: { value, onChange } },\n    labelRef: createRef(),\n    buttonRef: createRef(),\n    optionsRef: createRef(),\n    disabled,\n    options: [],\n    searchQuery: '',\n    activeOptionIndex: null,\n  } as StateDefinition)\n  let [{ listboxState, propsRef, optionsRef, buttonRef }, dispatch] = reducerBag\n\n  useIsoMorphicEffect(() => {\n    propsRef.current.value = value\n  }, [value, propsRef])\n  useIsoMorphicEffect(() => {\n    propsRef.current.onChange = onChange\n  }, [onChange, propsRef])\n  useIsoMorphicEffect(() => dispatch({ type: ActionTypes.SetDisabled, disabled }), [disabled])\n\n  // Handle outside click\n  useEffect(() => {\n    function handler(event: MouseEvent) {\n      let target = event.target as HTMLElement\n\n      if (listboxState !== ListboxStates.Open) return\n\n      if (buttonRef.current?.contains(target)) return\n      if (optionsRef.current?.contains(target)) return\n\n      dispatch({ type: ActionTypes.CloseListbox })\n\n      if (!isFocusableElement(target, FocusableMode.Loose)) {\n        event.preventDefault()\n        buttonRef.current?.focus()\n      }\n    }\n\n    window.addEventListener('mousedown', handler)\n    return () => window.removeEventListener('mousedown', handler)\n  }, [listboxState, buttonRef, optionsRef, dispatch])\n\n  let propsBag = useMemo<ListboxRenderPropArg>(\n    () => ({ open: listboxState === ListboxStates.Open, disabled }),\n    [listboxState, disabled]\n  )\n\n  return (\n    <ListboxContext.Provider value={reducerBag}>\n      {render(passThroughProps, propsBag, DEFAULT_LISTBOX_TAG)}\n    </ListboxContext.Provider>\n  )\n}\n\n// ---\n\nlet DEFAULT_BUTTON_TAG = 'button' as const\ninterface ButtonRenderPropArg {\n  open: boolean\n  disabled: boolean\n}\ntype ButtonPropsWeControl =\n  | 'id'\n  | 'type'\n  | 'aria-haspopup'\n  | 'aria-controls'\n  | 'aria-expanded'\n  | 'aria-labelledby'\n  | 'disabled'\n  | 'onKeyDown'\n  | 'onClick'\n\nlet Button = forwardRefWithAs(function Button<TTag extends ElementType = typeof DEFAULT_BUTTON_TAG>(\n  props: Props<TTag, ButtonRenderPropArg, ButtonPropsWeControl>,\n  ref: Ref<HTMLButtonElement>\n) {\n  let [state, dispatch] = useListboxContext([Listbox.name, Button.name].join('.'))\n  let buttonRef = useSyncRefs(state.buttonRef, ref)\n\n  let id = `headlessui-listbox-button-${useId()}`\n  let d = useDisposables()\n\n  let handleKeyDown = useCallback(\n    (event: ReactKeyboardEvent<HTMLButtonElement>) => {\n      switch (event.key) {\n        // Ref: https://www.w3.org/TR/wai-aria-practices-1.2/#keyboard-interaction-13\n\n        case Keys.Space:\n        case Keys.Enter:\n        case Keys.ArrowDown:\n          event.preventDefault()\n          dispatch({ type: ActionTypes.OpenListbox })\n          d.nextFrame(() => {\n            if (!state.propsRef.current.value)\n              dispatch({ type: ActionTypes.GoToOption, focus: Focus.First })\n          })\n          break\n\n        case Keys.ArrowUp:\n          event.preventDefault()\n          dispatch({ type: ActionTypes.OpenListbox })\n          d.nextFrame(() => {\n            if (!state.propsRef.current.value)\n              dispatch({ type: ActionTypes.GoToOption, focus: Focus.Last })\n          })\n          break\n      }\n    },\n    [dispatch, state, d]\n  )\n\n  let handleClick = useCallback(\n    (event: ReactMouseEvent) => {\n      if (isDisabledReactIssue7711(event.currentTarget)) return event.preventDefault()\n      if (state.listboxState === ListboxStates.Open) {\n        dispatch({ type: ActionTypes.CloseListbox })\n        d.nextFrame(() => state.buttonRef.current?.focus({ preventScroll: true }))\n      } else {\n        event.preventDefault()\n        dispatch({ type: ActionTypes.OpenListbox })\n      }\n    },\n    [dispatch, d, state]\n  )\n\n  let labelledby = useComputed(() => {\n    if (!state.labelRef.current) return undefined\n    return [state.labelRef.current.id, id].join(' ')\n  }, [state.labelRef.current, id])\n\n  let propsBag = useMemo<ButtonRenderPropArg>(\n    () => ({ open: state.listboxState === ListboxStates.Open, disabled: state.disabled }),\n    [state]\n  )\n  let passthroughProps = props\n  let propsWeControl = {\n    ref: buttonRef,\n    id,\n    type: 'button',\n    'aria-haspopup': true,\n    'aria-controls': state.optionsRef.current?.id,\n    'aria-expanded': state.listboxState === ListboxStates.Open ? true : undefined,\n    'aria-labelledby': labelledby,\n    disabled: state.disabled,\n    onKeyDown: handleKeyDown,\n    onClick: handleClick,\n  }\n\n  return render({ ...passthroughProps, ...propsWeControl }, propsBag, DEFAULT_BUTTON_TAG)\n})\n\n// ---\n\nlet DEFAULT_LABEL_TAG = 'label' as const\ninterface LabelRenderPropArg {\n  open: boolean\n  disabled: boolean\n}\ntype LabelPropsWeControl = 'id' | 'ref' | 'onClick'\n\nfunction Label<TTag extends ElementType = typeof DEFAULT_LABEL_TAG>(\n  props: Props<TTag, LabelRenderPropArg, LabelPropsWeControl>\n) {\n  let [state] = useListboxContext([Listbox.name, Label.name].join('.'))\n  let id = `headlessui-listbox-label-${useId()}`\n\n  let handleClick = useCallback(() => state.buttonRef.current?.focus({ preventScroll: true }), [\n    state.buttonRef,\n  ])\n\n  let propsBag = useMemo<LabelRenderPropArg>(\n    () => ({ open: state.listboxState === ListboxStates.Open, disabled: state.disabled }),\n    [state]\n  )\n  let propsWeControl = { ref: state.labelRef, id, onClick: handleClick }\n  return render({ ...props, ...propsWeControl }, propsBag, DEFAULT_LABEL_TAG)\n}\n\n// ---\n\nlet DEFAULT_OPTIONS_TAG = 'ul' as const\ninterface OptionsRenderPropArg {\n  open: boolean\n}\ntype OptionsPropsWeControl =\n  | 'aria-activedescendant'\n  | 'aria-labelledby'\n  | 'id'\n  | 'onKeyDown'\n  | 'role'\n  | 'tabIndex'\n\nlet OptionsRenderFeatures = Features.RenderStrategy | Features.Static\n\nlet Options = forwardRefWithAs(function Options<\n  TTag extends ElementType = typeof DEFAULT_OPTIONS_TAG\n>(\n  props: Props<TTag, OptionsRenderPropArg, OptionsPropsWeControl> &\n    PropsForFeatures<typeof OptionsRenderFeatures>,\n  ref: Ref<HTMLUListElement>\n) {\n  let [state, dispatch] = useListboxContext([Listbox.name, Options.name].join('.'))\n  let optionsRef = useSyncRefs(state.optionsRef, ref)\n\n  let id = `headlessui-listbox-options-${useId()}`\n  let d = useDisposables()\n  let searchDisposables = useDisposables()\n\n  useIsoMorphicEffect(() => {\n    let container = state.optionsRef.current\n    if (!container) return\n    if (state.listboxState !== ListboxStates.Open) return\n    if (container === document.activeElement) return\n\n    container.focus({ preventScroll: true })\n  }, [state.listboxState, state.optionsRef])\n\n  let handleKeyDown = useCallback(\n    (event: ReactKeyboardEvent<HTMLUListElement>) => {\n      searchDisposables.dispose()\n\n      switch (event.key) {\n        // Ref: https://www.w3.org/TR/wai-aria-practices-1.2/#keyboard-interaction-12\n\n        // @ts-expect-error Fallthrough is expected here\n        case Keys.Space:\n          if (state.searchQuery !== '') {\n            event.preventDefault()\n            event.stopPropagation()\n            return dispatch({ type: ActionTypes.Search, value: event.key })\n          }\n        // When in type ahead mode, fallthrough\n        case Keys.Enter:\n          event.preventDefault()\n          event.stopPropagation()\n          dispatch({ type: ActionTypes.CloseListbox })\n          if (state.activeOptionIndex !== null) {\n            let { dataRef } = state.options[state.activeOptionIndex]\n            state.propsRef.current.onChange(dataRef.current.value)\n          }\n          disposables().nextFrame(() => state.buttonRef.current?.focus({ preventScroll: true }))\n          break\n\n        case Keys.ArrowDown:\n          event.preventDefault()\n          event.stopPropagation()\n          return dispatch({ type: ActionTypes.GoToOption, focus: Focus.Next })\n\n        case Keys.ArrowUp:\n          event.preventDefault()\n          event.stopPropagation()\n          return dispatch({ type: ActionTypes.GoToOption, focus: Focus.Previous })\n\n        case Keys.Home:\n        case Keys.PageUp:\n          event.preventDefault()\n          event.stopPropagation()\n          return dispatch({ type: ActionTypes.GoToOption, focus: Focus.First })\n\n        case Keys.End:\n        case Keys.PageDown:\n          event.preventDefault()\n          event.stopPropagation()\n          return dispatch({ type: ActionTypes.GoToOption, focus: Focus.Last })\n\n        case Keys.Escape:\n          event.preventDefault()\n          event.stopPropagation()\n          dispatch({ type: ActionTypes.CloseListbox })\n          return d.nextFrame(() => state.buttonRef.current?.focus({ preventScroll: true }))\n\n        case Keys.Tab:\n          event.preventDefault()\n          event.stopPropagation()\n          break\n\n        default:\n          if (event.key.length === 1) {\n            dispatch({ type: ActionTypes.Search, value: event.key })\n            searchDisposables.setTimeout(() => dispatch({ type: ActionTypes.ClearSearch }), 350)\n          }\n          break\n      }\n    },\n    [d, dispatch, searchDisposables, state]\n  )\n\n  let labelledby = useComputed(() => state.labelRef.current?.id ?? state.buttonRef.current?.id, [\n    state.labelRef.current,\n    state.buttonRef.current,\n  ])\n\n  let propsBag = useMemo<OptionsRenderPropArg>(\n    () => ({ open: state.listboxState === ListboxStates.Open }),\n    [state]\n  )\n  let propsWeControl = {\n    'aria-activedescendant':\n      state.activeOptionIndex === null ? undefined : state.options[state.activeOptionIndex]?.id,\n    'aria-labelledby': labelledby,\n    id,\n    onKeyDown: handleKeyDown,\n    role: 'listbox',\n    tabIndex: 0,\n    ref: optionsRef,\n  }\n  let passthroughProps = props\n\n  return render(\n    { ...passthroughProps, ...propsWeControl },\n    propsBag,\n    DEFAULT_OPTIONS_TAG,\n    OptionsRenderFeatures,\n    state.listboxState === ListboxStates.Open\n  )\n})\n\n// ---\n\nlet DEFAULT_OPTION_TAG = 'li' as const\ninterface OptionRenderPropArg {\n  active: boolean\n  selected: boolean\n  disabled: boolean\n}\ntype ListboxOptionPropsWeControl =\n  | 'id'\n  | 'role'\n  | 'tabIndex'\n  | 'aria-disabled'\n  | 'aria-selected'\n  | 'onPointerLeave'\n  | 'onMouseLeave'\n  | 'onPointerMove'\n  | 'onMouseMove'\n  | 'onFocus'\n\nfunction Option<\n  TTag extends ElementType = typeof DEFAULT_OPTION_TAG,\n  // TODO: One day we will be able to infer this type from the generic in Listbox itself.\n  // But today is not that day..\n  TType = Parameters<typeof Listbox>[0]['value']\n>(\n  props: Props<TTag, OptionRenderPropArg, ListboxOptionPropsWeControl | 'value'> & {\n    disabled?: boolean\n    value: TType\n  }\n) {\n  let { disabled = false, value, ...passthroughProps } = props\n  let [state, dispatch] = useListboxContext([Listbox.name, Option.name].join('.'))\n  let id = `headlessui-listbox-option-${useId()}`\n  let active =\n    state.activeOptionIndex !== null ? state.options[state.activeOptionIndex].id === id : false\n  let selected = state.propsRef.current.value === value\n\n  let bag = useRef<ListboxOptionDataRef['current']>({ disabled, value })\n\n  useIsoMorphicEffect(() => {\n    bag.current.disabled = disabled\n  }, [bag, disabled])\n  useIsoMorphicEffect(() => {\n    bag.current.value = value\n  }, [bag, value])\n  useIsoMorphicEffect(() => {\n    bag.current.textValue = document.getElementById(id)?.textContent?.toLowerCase()\n  }, [bag, id])\n\n  let select = useCallback(() => state.propsRef.current.onChange(value), [state.propsRef, value])\n\n  useIsoMorphicEffect(() => {\n    dispatch({ type: ActionTypes.RegisterOption, id, dataRef: bag })\n    return () => dispatch({ type: ActionTypes.UnregisterOption, id })\n  }, [bag, id])\n\n  useIsoMorphicEffect(() => {\n    if (state.listboxState !== ListboxStates.Open) return\n    if (!selected) return\n    dispatch({ type: ActionTypes.GoToOption, focus: Focus.Specific, id })\n    document.getElementById(id)?.focus?.()\n  }, [state.listboxState])\n\n  useIsoMorphicEffect(() => {\n    if (state.listboxState !== ListboxStates.Open) return\n    if (!active) return\n    let d = disposables()\n    d.nextFrame(() => document.getElementById(id)?.scrollIntoView?.({ block: 'nearest' }))\n    return d.dispose\n  }, [id, active, state.listboxState])\n\n  let handleClick = useCallback(\n    (event: { preventDefault: Function }) => {\n      if (disabled) return event.preventDefault()\n      select()\n      dispatch({ type: ActionTypes.CloseListbox })\n      disposables().nextFrame(() => state.buttonRef.current?.focus({ preventScroll: true }))\n    },\n    [dispatch, state.buttonRef, disabled, select]\n  )\n\n  let handleFocus = useCallback(() => {\n    if (disabled) return dispatch({ type: ActionTypes.GoToOption, focus: Focus.Nothing })\n    dispatch({ type: ActionTypes.GoToOption, focus: Focus.Specific, id })\n  }, [disabled, id, dispatch])\n\n  let handleMove = useCallback(() => {\n    if (disabled) return\n    if (active) return\n    dispatch({ type: ActionTypes.GoToOption, focus: Focus.Specific, id })\n  }, [disabled, active, id, dispatch])\n\n  let handleLeave = useCallback(() => {\n    if (disabled) return\n    if (!active) return\n    dispatch({ type: ActionTypes.GoToOption, focus: Focus.Nothing })\n  }, [disabled, active, dispatch])\n\n  let propsBag = useMemo<OptionRenderPropArg>(() => ({ active, selected, disabled }), [\n    active,\n    selected,\n    disabled,\n  ])\n  let propsWeControl = {\n    id,\n    role: 'option',\n    tabIndex: -1,\n    'aria-disabled': disabled === true ? true : undefined,\n    'aria-selected': selected === true ? true : undefined,\n    onClick: handleClick,\n    onFocus: handleFocus,\n    onPointerMove: handleMove,\n    onMouseMove: handleMove,\n    onPointerLeave: handleLeave,\n    onMouseLeave: handleLeave,\n  }\n\n  return render({ ...passthroughProps, ...propsWeControl }, propsBag, DEFAULT_OPTION_TAG)\n}\n\n// ---\n\nListbox.Button = Button\nListbox.Label = Label\nListbox.Options = Options\nListbox.Option = Option\n","export function disposables() {\n  let disposables: Function[] = []\n\n  let api = {\n    requestAnimationFrame(...args: Parameters<typeof requestAnimationFrame>) {\n      let raf = requestAnimationFrame(...args)\n      api.add(() => cancelAnimationFrame(raf))\n    },\n\n    nextFrame(...args: Parameters<typeof requestAnimationFrame>) {\n      api.requestAnimationFrame(() => {\n        api.requestAnimationFrame(...args)\n      })\n    },\n\n    setTimeout(...args: Parameters<typeof setTimeout>) {\n      let timer = setTimeout(...args)\n      api.add(() => clearTimeout(timer))\n    },\n\n    add(cb: () => void) {\n      disposables.push(cb)\n    },\n\n    dispose() {\n      for (let dispose of disposables.splice(0)) {\n        dispose()\n      }\n    },\n  }\n\n  return api\n}\n","import { useState, useEffect } from 'react'\n\nimport { disposables } from '../utils/disposables'\n\nexport function useDisposables() {\n  // Using useState instead of useRef so that we can use the initializer function.\n  let [d] = useState(disposables)\n  useEffect(() => () => d.dispose(), [d])\n  return d\n}\n","import { useState, useRef } from 'react'\nimport { useIsoMorphicEffect } from './use-iso-morphic-effect'\n\nexport function useComputed<T>(cb: () => T, dependencies: React.DependencyList) {\n  let [value, setValue] = useState(cb)\n  let cbRef = useRef(cb)\n  useIsoMorphicEffect(() => {\n    cbRef.current = cb\n  }, [cb])\n  useIsoMorphicEffect(() => setValue(cbRef.current), [cbRef, setValue, ...dependencies])\n  return value\n}\n","// WAI-ARIA: https://www.w3.org/TR/wai-aria-practices-1.2/#menubutton\nimport React, {\n  Fragment,\n  createContext,\n  createRef,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useReducer,\n  useRef,\n\n  // Types\n  Dispatch,\n  ElementType,\n  KeyboardEvent as ReactKeyboardEvent,\n  MouseEvent as ReactMouseEvent,\n  MutableRefObject,\n  Ref,\n} from 'react'\n\nimport { Props } from '../../types'\nimport { match } from '../../utils/match'\nimport { forwardRefWithAs, render, Features, PropsForFeatures } from '../../utils/render'\nimport { disposables } from '../../utils/disposables'\nimport { useDisposables } from '../../hooks/use-disposables'\nimport { useIsoMorphicEffect } from '../../hooks/use-iso-morphic-effect'\nimport { useSyncRefs } from '../../hooks/use-sync-refs'\nimport { useId } from '../../hooks/use-id'\nimport { Keys } from '../keyboard'\nimport { Focus, calculateActiveIndex } from '../../utils/calculate-active-index'\nimport { isDisabledReactIssue7711 } from '../../utils/bugs'\nimport { isFocusableElement, FocusableMode } from '../../utils/focus-management'\n\nenum MenuStates {\n  Open,\n  Closed,\n}\n\ntype MenuItemDataRef = MutableRefObject<{ textValue?: string; disabled: boolean }>\n\ninterface StateDefinition {\n  menuState: MenuStates\n  buttonRef: MutableRefObject<HTMLButtonElement | null>\n  itemsRef: MutableRefObject<HTMLDivElement | null>\n  items: { id: string; dataRef: MenuItemDataRef }[]\n  searchQuery: string\n  activeItemIndex: number | null\n}\n\nenum ActionTypes {\n  OpenMenu,\n  CloseMenu,\n\n  GoToItem,\n  Search,\n  ClearSearch,\n  RegisterItem,\n  UnregisterItem,\n}\n\ntype Actions =\n  | { type: ActionTypes.CloseMenu }\n  | { type: ActionTypes.OpenMenu }\n  | { type: ActionTypes.GoToItem; focus: Focus.Specific; id: string }\n  | { type: ActionTypes.GoToItem; focus: Exclude<Focus, Focus.Specific> }\n  | { type: ActionTypes.Search; value: string }\n  | { type: ActionTypes.ClearSearch }\n  | { type: ActionTypes.RegisterItem; id: string; dataRef: MenuItemDataRef }\n  | { type: ActionTypes.UnregisterItem; id: string }\n\nlet reducers: {\n  [P in ActionTypes]: (\n    state: StateDefinition,\n    action: Extract<Actions, { type: P }>\n  ) => StateDefinition\n} = {\n  [ActionTypes.CloseMenu](state) {\n    if (state.menuState === MenuStates.Closed) return state\n    return { ...state, activeItemIndex: null, menuState: MenuStates.Closed }\n  },\n  [ActionTypes.OpenMenu](state) {\n    if (state.menuState === MenuStates.Open) return state\n    return { ...state, menuState: MenuStates.Open }\n  },\n  [ActionTypes.GoToItem]: (state, action) => {\n    let activeItemIndex = calculateActiveIndex(action, {\n      resolveItems: () => state.items,\n      resolveActiveIndex: () => state.activeItemIndex,\n      resolveId: item => item.id,\n      resolveDisabled: item => item.dataRef.current.disabled,\n    })\n\n    if (state.searchQuery === '' && state.activeItemIndex === activeItemIndex) return state\n    return { ...state, searchQuery: '', activeItemIndex }\n  },\n  [ActionTypes.Search]: (state, action) => {\n    let searchQuery = state.searchQuery + action.value\n    let match = state.items.findIndex(\n      item =>\n        item.dataRef.current.textValue?.startsWith(searchQuery) && !item.dataRef.current.disabled\n    )\n\n    if (match === -1 || match === state.activeItemIndex) return { ...state, searchQuery }\n    return { ...state, searchQuery, activeItemIndex: match }\n  },\n  [ActionTypes.ClearSearch](state) {\n    if (state.searchQuery === '') return state\n    return { ...state, searchQuery: '' }\n  },\n  [ActionTypes.RegisterItem]: (state, action) => ({\n    ...state,\n    items: [...state.items, { id: action.id, dataRef: action.dataRef }],\n  }),\n  [ActionTypes.UnregisterItem]: (state, action) => {\n    let nextItems = state.items.slice()\n    let currentActiveItem = state.activeItemIndex !== null ? nextItems[state.activeItemIndex] : null\n\n    let idx = nextItems.findIndex(a => a.id === action.id)\n\n    if (idx !== -1) nextItems.splice(idx, 1)\n\n    return {\n      ...state,\n      items: nextItems,\n      activeItemIndex: (() => {\n        if (idx === state.activeItemIndex) return null\n        if (currentActiveItem === null) return null\n\n        // If we removed the item before the actual active index, then it would be out of sync. To\n        // fix this, we will find the correct (new) index position.\n        return nextItems.indexOf(currentActiveItem)\n      })(),\n    }\n  },\n}\n\nlet MenuContext = createContext<[StateDefinition, Dispatch<Actions>] | null>(null)\nMenuContext.displayName = 'MenuContext'\n\nfunction useMenuContext(component: string) {\n  let context = useContext(MenuContext)\n  if (context === null) {\n    let err = new Error(`<${component} /> is missing a parent <${Menu.name} /> component.`)\n    if (Error.captureStackTrace) Error.captureStackTrace(err, useMenuContext)\n    throw err\n  }\n  return context\n}\n\nfunction stateReducer(state: StateDefinition, action: Actions) {\n  return match(action.type, reducers, state, action)\n}\n\n// ---\n\nlet DEFAULT_MENU_TAG = Fragment\ninterface MenuRenderPropArg {\n  open: boolean\n}\n\nexport function Menu<TTag extends ElementType = typeof DEFAULT_MENU_TAG>(\n  props: Props<TTag, MenuRenderPropArg>\n) {\n  let reducerBag = useReducer(stateReducer, {\n    menuState: MenuStates.Closed,\n    buttonRef: createRef(),\n    itemsRef: createRef(),\n    items: [],\n    searchQuery: '',\n    activeItemIndex: null,\n  } as StateDefinition)\n  let [{ menuState, itemsRef, buttonRef }, dispatch] = reducerBag\n\n  // Handle outside click\n  useEffect(() => {\n    function handler(event: MouseEvent) {\n      let target = event.target as HTMLElement\n\n      if (menuState !== MenuStates.Open) return\n\n      if (buttonRef.current?.contains(target)) return\n      if (itemsRef.current?.contains(target)) return\n\n      dispatch({ type: ActionTypes.CloseMenu })\n\n      if (!isFocusableElement(target, FocusableMode.Loose)) {\n        event.preventDefault()\n        buttonRef.current?.focus()\n      }\n    }\n\n    window.addEventListener('mousedown', handler)\n    return () => window.removeEventListener('mousedown', handler)\n  }, [menuState, buttonRef, itemsRef, dispatch])\n\n  let propsBag = useMemo<MenuRenderPropArg>(() => ({ open: menuState === MenuStates.Open }), [\n    menuState,\n  ])\n\n  return (\n    <MenuContext.Provider value={reducerBag}>\n      {render(props, propsBag, DEFAULT_MENU_TAG)}\n    </MenuContext.Provider>\n  )\n}\n\n// ---\n\nlet DEFAULT_BUTTON_TAG = 'button' as const\ninterface ButtonRenderPropArg {\n  open: boolean\n}\ntype ButtonPropsWeControl =\n  | 'id'\n  | 'type'\n  | 'aria-haspopup'\n  | 'aria-controls'\n  | 'aria-expanded'\n  | 'onKeyDown'\n  | 'onClick'\n\nlet Button = forwardRefWithAs(function Button<TTag extends ElementType = typeof DEFAULT_BUTTON_TAG>(\n  props: Props<TTag, ButtonRenderPropArg, ButtonPropsWeControl>,\n  ref: Ref<HTMLButtonElement>\n) {\n  let [state, dispatch] = useMenuContext([Menu.name, Button.name].join('.'))\n  let buttonRef = useSyncRefs(state.buttonRef, ref)\n\n  let id = `headlessui-menu-button-${useId()}`\n  let d = useDisposables()\n\n  let handleKeyDown = useCallback(\n    (event: ReactKeyboardEvent<HTMLButtonElement>) => {\n      switch (event.key) {\n        // Ref: https://www.w3.org/TR/wai-aria-practices-1.2/#keyboard-interaction-13\n\n        case Keys.Space:\n        case Keys.Enter:\n        case Keys.ArrowDown:\n          event.preventDefault()\n          event.stopPropagation()\n          dispatch({ type: ActionTypes.OpenMenu })\n          d.nextFrame(() => dispatch({ type: ActionTypes.GoToItem, focus: Focus.First }))\n          break\n\n        case Keys.ArrowUp:\n          event.preventDefault()\n          event.stopPropagation()\n          dispatch({ type: ActionTypes.OpenMenu })\n          d.nextFrame(() => dispatch({ type: ActionTypes.GoToItem, focus: Focus.Last }))\n          break\n      }\n    },\n    [dispatch, d]\n  )\n\n  let handleClick = useCallback(\n    (event: ReactMouseEvent) => {\n      if (isDisabledReactIssue7711(event.currentTarget)) return event.preventDefault()\n      if (props.disabled) return\n      if (state.menuState === MenuStates.Open) {\n        dispatch({ type: ActionTypes.CloseMenu })\n        d.nextFrame(() => state.buttonRef.current?.focus({ preventScroll: true }))\n      } else {\n        event.preventDefault()\n        event.stopPropagation()\n        dispatch({ type: ActionTypes.OpenMenu })\n      }\n    },\n    [dispatch, d, state, props.disabled]\n  )\n\n  let propsBag = useMemo<ButtonRenderPropArg>(\n    () => ({ open: state.menuState === MenuStates.Open }),\n    [state]\n  )\n  let passthroughProps = props\n  let propsWeControl = {\n    ref: buttonRef,\n    id,\n    type: 'button',\n    'aria-haspopup': true,\n    'aria-controls': state.itemsRef.current?.id,\n    'aria-expanded': state.menuState === MenuStates.Open ? true : undefined,\n    onKeyDown: handleKeyDown,\n    onClick: handleClick,\n  }\n\n  return render({ ...passthroughProps, ...propsWeControl }, propsBag, DEFAULT_BUTTON_TAG)\n})\n\n// ---\n\nlet DEFAULT_ITEMS_TAG = 'div' as const\ninterface ItemsRenderPropArg {\n  open: boolean\n}\ntype ItemsPropsWeControl =\n  | 'aria-activedescendant'\n  | 'aria-labelledby'\n  | 'id'\n  | 'onKeyDown'\n  | 'role'\n  | 'tabIndex'\n\nlet ItemsRenderFeatures = Features.RenderStrategy | Features.Static\n\nlet Items = forwardRefWithAs(function Items<TTag extends ElementType = typeof DEFAULT_ITEMS_TAG>(\n  props: Props<TTag, ItemsRenderPropArg, ItemsPropsWeControl> &\n    PropsForFeatures<typeof ItemsRenderFeatures>,\n  ref: Ref<HTMLDivElement>\n) {\n  let [state, dispatch] = useMenuContext([Menu.name, Items.name].join('.'))\n  let itemsRef = useSyncRefs(state.itemsRef, ref)\n\n  let id = `headlessui-menu-items-${useId()}`\n  let searchDisposables = useDisposables()\n\n  useEffect(() => {\n    let container = state.itemsRef.current\n    if (!container) return\n    if (state.menuState !== MenuStates.Open) return\n    if (container === document.activeElement) return\n\n    container.focus({ preventScroll: true })\n  }, [state.menuState, state.itemsRef])\n\n  useIsoMorphicEffect(() => {\n    let container = state.itemsRef.current\n    if (!container) return\n    if (state.menuState !== MenuStates.Open) return\n\n    let walker = document.createTreeWalker(container, NodeFilter.SHOW_ELEMENT, {\n      acceptNode(node: HTMLElement) {\n        if (node.getAttribute('role') === 'menuitem') return NodeFilter.FILTER_REJECT\n        if (node.hasAttribute('role')) return NodeFilter.FILTER_SKIP\n        return NodeFilter.FILTER_ACCEPT\n      },\n    })\n\n    while (walker.nextNode()) {\n      ;(walker.currentNode as HTMLElement).setAttribute('role', 'none')\n    }\n  }, [state.menuState, state.itemsRef])\n\n  let handleKeyDown = useCallback(\n    (event: ReactKeyboardEvent<HTMLDivElement>) => {\n      searchDisposables.dispose()\n\n      switch (event.key) {\n        // Ref: https://www.w3.org/TR/wai-aria-practices-1.2/#keyboard-interaction-12\n\n        // @ts-expect-error Fallthrough is expected here\n        case Keys.Space:\n          if (state.searchQuery !== '') {\n            event.preventDefault()\n            event.stopPropagation()\n            return dispatch({ type: ActionTypes.Search, value: event.key })\n          }\n        // When in type ahead mode, fallthrough\n        case Keys.Enter:\n          event.preventDefault()\n          event.stopPropagation()\n          dispatch({ type: ActionTypes.CloseMenu })\n          if (state.activeItemIndex !== null) {\n            let { id } = state.items[state.activeItemIndex]\n            document.getElementById(id)?.click()\n          }\n          disposables().nextFrame(() => state.buttonRef.current?.focus({ preventScroll: true }))\n          break\n\n        case Keys.ArrowDown:\n          event.preventDefault()\n          event.stopPropagation()\n          return dispatch({ type: ActionTypes.GoToItem, focus: Focus.Next })\n\n        case Keys.ArrowUp:\n          event.preventDefault()\n          event.stopPropagation()\n          return dispatch({ type: ActionTypes.GoToItem, focus: Focus.Previous })\n\n        case Keys.Home:\n        case Keys.PageUp:\n          event.preventDefault()\n          event.stopPropagation()\n          return dispatch({ type: ActionTypes.GoToItem, focus: Focus.First })\n\n        case Keys.End:\n        case Keys.PageDown:\n          event.preventDefault()\n          event.stopPropagation()\n          return dispatch({ type: ActionTypes.GoToItem, focus: Focus.Last })\n\n        case Keys.Escape:\n          event.preventDefault()\n          event.stopPropagation()\n          dispatch({ type: ActionTypes.CloseMenu })\n          disposables().nextFrame(() => state.buttonRef.current?.focus({ preventScroll: true }))\n          break\n\n        case Keys.Tab:\n          event.preventDefault()\n          event.stopPropagation()\n          break\n\n        default:\n          if (event.key.length === 1) {\n            dispatch({ type: ActionTypes.Search, value: event.key })\n            searchDisposables.setTimeout(() => dispatch({ type: ActionTypes.ClearSearch }), 350)\n          }\n          break\n      }\n    },\n    [dispatch, searchDisposables, state]\n  )\n\n  let propsBag = useMemo<ItemsRenderPropArg>(\n    () => ({ open: state.menuState === MenuStates.Open }),\n    [state]\n  )\n  let propsWeControl = {\n    'aria-activedescendant':\n      state.activeItemIndex === null ? undefined : state.items[state.activeItemIndex]?.id,\n    'aria-labelledby': state.buttonRef.current?.id,\n    id,\n    onKeyDown: handleKeyDown,\n    role: 'menu',\n    tabIndex: 0,\n    ref: itemsRef,\n  }\n  let passthroughProps = props\n\n  return render(\n    { ...passthroughProps, ...propsWeControl },\n    propsBag,\n    DEFAULT_ITEMS_TAG,\n    ItemsRenderFeatures,\n    state.menuState === MenuStates.Open\n  )\n})\n\n// ---\n\nlet DEFAULT_ITEM_TAG = Fragment\ninterface ItemRenderPropArg {\n  active: boolean\n  disabled: boolean\n}\ntype MenuItemPropsWeControl =\n  | 'id'\n  | 'role'\n  | 'tabIndex'\n  | 'aria-disabled'\n  | 'onPointerLeave'\n  | 'onPointerMove'\n  | 'onMouseLeave'\n  | 'onMouseMove'\n  | 'onFocus'\n\nfunction Item<TTag extends ElementType = typeof DEFAULT_ITEM_TAG>(\n  props: Props<TTag, ItemRenderPropArg, MenuItemPropsWeControl> & {\n    disabled?: boolean\n    onClick?: (event: { preventDefault: Function }) => void\n  }\n) {\n  let { disabled = false, onClick, ...passthroughProps } = props\n  let [state, dispatch] = useMenuContext([Menu.name, Item.name].join('.'))\n  let id = `headlessui-menu-item-${useId()}`\n  let active = state.activeItemIndex !== null ? state.items[state.activeItemIndex].id === id : false\n\n  useIsoMorphicEffect(() => {\n    if (state.menuState !== MenuStates.Open) return\n    if (!active) return\n    let d = disposables()\n    d.nextFrame(() => document.getElementById(id)?.scrollIntoView?.({ block: 'nearest' }))\n    return d.dispose\n  }, [id, active, state.menuState])\n\n  let bag = useRef<MenuItemDataRef['current']>({ disabled })\n\n  useIsoMorphicEffect(() => {\n    bag.current.disabled = disabled\n  }, [bag, disabled])\n\n  useIsoMorphicEffect(() => {\n    bag.current.textValue = document.getElementById(id)?.textContent?.toLowerCase()\n  }, [bag, id])\n\n  useIsoMorphicEffect(() => {\n    dispatch({ type: ActionTypes.RegisterItem, id, dataRef: bag })\n    return () => dispatch({ type: ActionTypes.UnregisterItem, id })\n  }, [bag, id])\n\n  let handleClick = useCallback(\n    (event: MouseEvent) => {\n      if (disabled) return event.preventDefault()\n      dispatch({ type: ActionTypes.CloseMenu })\n      disposables().nextFrame(() => state.buttonRef.current?.focus({ preventScroll: true }))\n      if (onClick) return onClick(event)\n    },\n    [dispatch, state.buttonRef, disabled, onClick]\n  )\n\n  let handleFocus = useCallback(() => {\n    if (disabled) return dispatch({ type: ActionTypes.GoToItem, focus: Focus.Nothing })\n    dispatch({ type: ActionTypes.GoToItem, focus: Focus.Specific, id })\n  }, [disabled, id, dispatch])\n\n  let handleMove = useCallback(() => {\n    if (disabled) return\n    if (active) return\n    dispatch({ type: ActionTypes.GoToItem, focus: Focus.Specific, id })\n  }, [disabled, active, id, dispatch])\n\n  let handleLeave = useCallback(() => {\n    if (disabled) return\n    if (!active) return\n    dispatch({ type: ActionTypes.GoToItem, focus: Focus.Nothing })\n  }, [disabled, active, dispatch])\n\n  let propsBag = useMemo<ItemRenderPropArg>(() => ({ active, disabled }), [active, disabled])\n  let propsWeControl = {\n    id,\n    role: 'menuitem',\n    tabIndex: -1,\n    'aria-disabled': disabled === true ? true : undefined,\n    onClick: handleClick,\n    onFocus: handleFocus,\n    onPointerMove: handleMove,\n    onMouseMove: handleMove,\n    onPointerLeave: handleLeave,\n    onMouseLeave: handleLeave,\n  }\n\n  return render({ ...passthroughProps, ...propsWeControl }, propsBag, DEFAULT_ITEM_TAG)\n}\n\n// ---\n\nMenu.Button = Button\nMenu.Items = Items\nMenu.Item = Item\n","import React, {\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useReducer,\n  useRef,\n  useState,\n\n  // Types\n  ContextType,\n  Dispatch,\n  ElementType,\n  KeyboardEvent as ReactKeyboardEvent,\n  MouseEvent as ReactMouseEvent,\n  Ref,\n} from 'react'\n\nimport { Props } from '../../types'\nimport { match } from '../../utils/match'\nimport { forwardRefWithAs, render, Features, PropsForFeatures } from '../../utils/render'\nimport { useSyncRefs } from '../../hooks/use-sync-refs'\nimport { useId } from '../../hooks/use-id'\nimport { Keys } from '../keyboard'\nimport { isDisabledReactIssue7711 } from '../../utils/bugs'\nimport {\n  getFocusableElements,\n  Focus,\n  focusIn,\n  FocusResult,\n  isFocusableElement,\n  FocusableMode,\n} from '../../utils/focus-management'\n\nenum PopoverStates {\n  Open,\n  Closed,\n}\n\ninterface StateDefinition {\n  popoverState: PopoverStates\n\n  button: HTMLElement | null\n  buttonId: string\n  panel: HTMLElement | null\n  panelId: string\n}\n\nenum ActionTypes {\n  TogglePopover,\n  ClosePopover,\n\n  SetButton,\n  SetButtonId,\n  SetPanel,\n  SetPanelId,\n}\n\ntype Actions =\n  | { type: ActionTypes.TogglePopover }\n  | { type: ActionTypes.ClosePopover }\n  | { type: ActionTypes.SetButton; button: HTMLElement | null }\n  | { type: ActionTypes.SetButtonId; buttonId: string }\n  | { type: ActionTypes.SetPanel; panel: HTMLElement | null }\n  | { type: ActionTypes.SetPanelId; panelId: string }\n\nlet reducers: {\n  [P in ActionTypes]: (\n    state: StateDefinition,\n    action: Extract<Actions, { type: P }>\n  ) => StateDefinition\n} = {\n  [ActionTypes.TogglePopover]: state => ({\n    ...state,\n    popoverState: match(state.popoverState, {\n      [PopoverStates.Open]: PopoverStates.Closed,\n      [PopoverStates.Closed]: PopoverStates.Open,\n    }),\n  }),\n  [ActionTypes.ClosePopover](state) {\n    if (state.popoverState === PopoverStates.Closed) return state\n    return { ...state, popoverState: PopoverStates.Closed }\n  },\n  [ActionTypes.SetButton](state, action) {\n    if (state.button === action.button) return state\n    return { ...state, button: action.button }\n  },\n  [ActionTypes.SetButtonId](state, action) {\n    if (state.buttonId === action.buttonId) return state\n    return { ...state, buttonId: action.buttonId }\n  },\n  [ActionTypes.SetPanel](state, action) {\n    if (state.panel === action.panel) return state\n    return { ...state, panel: action.panel }\n  },\n  [ActionTypes.SetPanelId](state, action) {\n    if (state.panelId === action.panelId) return state\n    return { ...state, panelId: action.panelId }\n  },\n}\n\nlet PopoverContext = createContext<[StateDefinition, Dispatch<Actions>] | null>(null)\nPopoverContext.displayName = 'PopoverContext'\n\nfunction usePopoverContext(component: string) {\n  let context = useContext(PopoverContext)\n  if (context === null) {\n    let err = new Error(`<${component} /> is missing a parent <${Popover.name} /> component.`)\n    if (Error.captureStackTrace) Error.captureStackTrace(err, usePopoverContext)\n    throw err\n  }\n  return context\n}\n\nlet PopoverGroupContext = createContext<{\n  registerPopover(registerbag: PopoverRegisterBag): void\n  unregisterPopover(registerbag: PopoverRegisterBag): void\n  isFocusWithinPopoverGroup(): boolean\n  closeOthers(buttonId: string): void\n} | null>(null)\nPopoverGroupContext.displayName = 'PopoverGroupContext'\n\nfunction usePopoverGroupContext() {\n  return useContext(PopoverGroupContext)\n}\n\nlet PopoverPanelContext = createContext<string | null>(null)\nPopoverPanelContext.displayName = 'PopoverPanelContext'\n\nfunction usePopoverPanelContext() {\n  return useContext(PopoverPanelContext)\n}\n\ninterface PopoverRegisterBag {\n  buttonId: string\n  panelId: string\n  close(): void\n}\nfunction stateReducer(state: StateDefinition, action: Actions) {\n  return match(action.type, reducers, state, action)\n}\n\n// ---\n\nlet DEFAULT_POPOVER_TAG = 'div' as const\ninterface PopoverRenderPropArg {\n  open: boolean\n}\n\nexport function Popover<TTag extends ElementType = typeof DEFAULT_POPOVER_TAG>(\n  props: Props<TTag, PopoverRenderPropArg>\n) {\n  let buttonId = `headlessui-popover-button-${useId()}`\n  let panelId = `headlessui-popover-panel-${useId()}`\n\n  let reducerBag = useReducer(stateReducer, {\n    popoverState: PopoverStates.Closed,\n    linkedPanel: false,\n    button: null,\n    buttonId,\n    panel: null,\n    panelId,\n  } as StateDefinition)\n  let [{ popoverState, button, panel }, dispatch] = reducerBag\n\n  useEffect(() => dispatch({ type: ActionTypes.SetButtonId, buttonId }), [buttonId, dispatch])\n  useEffect(() => dispatch({ type: ActionTypes.SetPanelId, panelId }), [panelId, dispatch])\n\n  let registerBag = useMemo(\n    () => ({ buttonId, panelId, close: () => dispatch({ type: ActionTypes.ClosePopover }) }),\n    [buttonId, panelId, dispatch]\n  )\n\n  let groupContext = usePopoverGroupContext()\n  let registerPopover = groupContext?.registerPopover\n  let isFocusWithinPopoverGroup = useCallback(() => {\n    return (\n      groupContext?.isFocusWithinPopoverGroup() ??\n      (button?.contains(document.activeElement) || panel?.contains(document.activeElement))\n    )\n  }, [groupContext, button, panel])\n\n  useEffect(() => registerPopover?.(registerBag), [registerPopover, registerBag])\n\n  // Handle focus out\n  useEffect(() => {\n    if (popoverState !== PopoverStates.Open) return\n\n    function handler() {\n      if (isFocusWithinPopoverGroup()) return\n      if (!button) return\n      if (!panel) return\n\n      dispatch({ type: ActionTypes.ClosePopover })\n    }\n\n    window.addEventListener('focus', handler, true)\n    return () => window.removeEventListener('focus', handler, true)\n  }, [popoverState, isFocusWithinPopoverGroup, groupContext, button, panel, dispatch])\n\n  // Handle outside click\n  useEffect(() => {\n    function handler(event: MouseEvent) {\n      let target = event.target as HTMLElement\n\n      if (popoverState !== PopoverStates.Open) return\n\n      if (button?.contains(target)) return\n      if (panel?.contains(target)) return\n\n      dispatch({ type: ActionTypes.ClosePopover })\n\n      if (!isFocusableElement(target, FocusableMode.Loose)) {\n        event.preventDefault()\n        button?.focus()\n      }\n    }\n\n    window.addEventListener('mousedown', handler)\n    return () => window.removeEventListener('mousedown', handler)\n  }, [popoverState, button, panel, dispatch])\n\n  let propsBag = useMemo<PopoverRenderPropArg>(\n    () => ({ open: popoverState === PopoverStates.Open }),\n    [popoverState]\n  )\n\n  return (\n    <PopoverContext.Provider value={reducerBag}>\n      {render(props, propsBag, DEFAULT_POPOVER_TAG)}\n    </PopoverContext.Provider>\n  )\n}\n\n// ---\n\nlet DEFAULT_BUTTON_TAG = 'button' as const\ninterface ButtonRenderPropArg {\n  open: boolean\n}\ntype ButtonPropsWeControl =\n  | 'id'\n  | 'type'\n  | 'aria-expanded'\n  | 'aria-controls'\n  | 'onKeyDown'\n  | 'onClick'\n\nlet Button = forwardRefWithAs(function Button<TTag extends ElementType = typeof DEFAULT_BUTTON_TAG>(\n  props: Props<TTag, ButtonRenderPropArg, ButtonPropsWeControl>,\n  ref: Ref<HTMLButtonElement>\n) {\n  let [state, dispatch] = usePopoverContext([Popover.name, Button.name].join('.'))\n  let internalButtonRef = useRef<HTMLButtonElement | null>(null)\n\n  let groupContext = usePopoverGroupContext()\n  let closeOthers = groupContext?.closeOthers\n\n  let panelContext = usePopoverPanelContext()\n  let isWithinPanel = panelContext === null ? false : panelContext === state.panelId\n\n  let buttonRef = useSyncRefs(\n    internalButtonRef,\n    ref,\n    isWithinPanel ? null : button => dispatch({ type: ActionTypes.SetButton, button })\n  )\n\n  // TODO: Revisit when handling Tab/Shift+Tab when using Portal's\n  let activeElementRef = useRef<Element | null>(null)\n  let previousActiveElementRef = useRef<Element | null>(\n    typeof window === 'undefined' ? null : document.activeElement\n  )\n  useEffect(() => {\n    function handler() {\n      previousActiveElementRef.current = activeElementRef.current\n      activeElementRef.current = document.activeElement\n    }\n\n    window.addEventListener('focus', handler, true)\n    return () => window.removeEventListener('focus', handler, true)\n  }, [previousActiveElementRef, activeElementRef])\n\n  let handleKeyDown = useCallback(\n    (event: ReactKeyboardEvent<HTMLButtonElement>) => {\n      if (isWithinPanel) {\n        if (state.popoverState === PopoverStates.Closed) return\n        switch (event.key) {\n          case Keys.Space:\n          case Keys.Enter:\n            event.preventDefault() // Prevent triggering a *click* event\n            event.stopPropagation()\n            dispatch({ type: ActionTypes.ClosePopover })\n            state.button?.focus() // Re-focus the original opening Button\n            break\n        }\n      } else {\n        switch (event.key) {\n          case Keys.Space:\n          case Keys.Enter:\n            event.preventDefault() // Prevent triggering a *click* event\n            event.stopPropagation()\n            if (state.popoverState === PopoverStates.Closed) closeOthers?.(state.buttonId)\n            dispatch({ type: ActionTypes.TogglePopover })\n            break\n\n          case Keys.Escape:\n            if (state.popoverState !== PopoverStates.Open) return closeOthers?.(state.buttonId)\n            if (!internalButtonRef.current) return\n            if (!internalButtonRef.current.contains(document.activeElement)) return\n            dispatch({ type: ActionTypes.ClosePopover })\n            break\n\n          case Keys.Tab:\n            if (state.popoverState !== PopoverStates.Open) return\n            if (!state.panel) return\n            if (!state.button) return\n\n            // TODO: Revisit when handling Tab/Shift+Tab when using Portal's\n            if (event.shiftKey) {\n              // Check if the last focused element exists, and check that it is not inside button or panel itself\n              if (!previousActiveElementRef.current) return\n              if (state.button?.contains(previousActiveElementRef.current)) return\n              if (state.panel.contains(previousActiveElementRef.current)) return\n\n              // Check if the last focused element is *after* the button in the DOM\n              let focusableElements = getFocusableElements()\n              let previousIdx = focusableElements.indexOf(\n                previousActiveElementRef.current as HTMLElement\n              )\n              let buttonIdx = focusableElements.indexOf(state.button)\n              if (buttonIdx > previousIdx) return\n\n              event.preventDefault()\n              event.stopPropagation()\n\n              focusIn(state.panel, Focus.Last)\n            } else {\n              event.preventDefault()\n              event.stopPropagation()\n\n              focusIn(state.panel, Focus.First)\n            }\n\n            break\n        }\n      }\n    },\n    [\n      dispatch,\n      state.popoverState,\n      state.buttonId,\n      state.button,\n      state.panel,\n      internalButtonRef,\n      closeOthers,\n      isWithinPanel,\n    ]\n  )\n\n  let handleKeyUp = useCallback(\n    (event: ReactKeyboardEvent<HTMLButtonElement>) => {\n      if (isWithinPanel) return\n      if (state.popoverState !== PopoverStates.Open) return\n      if (!state.panel) return\n      if (!state.button) return\n\n      // TODO: Revisit when handling Tab/Shift+Tab when using Portal's\n      switch (event.key) {\n        case Keys.Tab:\n          // Check if the last focused element exists, and check that it is not inside button or panel itself\n          if (!previousActiveElementRef.current) return\n          if (state.button?.contains(previousActiveElementRef.current)) return\n          if (state.panel.contains(previousActiveElementRef.current)) return\n\n          // Check if the last focused element is *after* the button in the DOM\n          let focusableElements = getFocusableElements()\n          let previousIdx = focusableElements.indexOf(\n            previousActiveElementRef.current as HTMLElement\n          )\n          let buttonIdx = focusableElements.indexOf(state.button)\n          if (buttonIdx > previousIdx) return\n\n          event.preventDefault()\n          event.stopPropagation()\n          focusIn(state.panel, Focus.Last)\n          break\n      }\n    },\n    [state.popoverState, state.panel, state.button, isWithinPanel]\n  )\n\n  let handleClick = useCallback(\n    (event: ReactMouseEvent) => {\n      if (isDisabledReactIssue7711(event.currentTarget)) return\n      if (props.disabled) return\n      if (isWithinPanel) {\n        dispatch({ type: ActionTypes.ClosePopover })\n        state.button?.focus() // Re-focus the original opening Button\n      } else {\n        if (state.popoverState === PopoverStates.Closed) closeOthers?.(state.buttonId)\n        dispatch({ type: ActionTypes.TogglePopover })\n      }\n    },\n    [\n      dispatch,\n      state.button,\n      state.popoverState,\n      state.buttonId,\n      props.disabled,\n      closeOthers,\n      isWithinPanel,\n    ]\n  )\n\n  let propsBag = useMemo<ButtonRenderPropArg>(\n    () => ({ open: state.popoverState === PopoverStates.Open }),\n    [state]\n  )\n\n  let passthroughProps = props\n  let propsWeControl = isWithinPanel\n    ? {\n        type: 'button',\n        onKeyDown: handleKeyDown,\n        onClick: handleClick,\n      }\n    : {\n        ref: buttonRef,\n        id: state.buttonId,\n        type: 'button',\n        'aria-expanded': state.popoverState === PopoverStates.Open ? true : undefined,\n        'aria-controls': state.panel ? state.panelId : undefined,\n        onKeyDown: handleKeyDown,\n        onKeyUp: handleKeyUp,\n        onClick: handleClick,\n      }\n\n  return render({ ...passthroughProps, ...propsWeControl }, propsBag, DEFAULT_BUTTON_TAG)\n})\n\n// ---\n\nlet DEFAULT_OVERLAY_TAG = 'div' as const\ninterface OverlayRenderPropArg {\n  open: boolean\n}\ntype OverlayPropsWeControl = 'id' | 'aria-hidden' | 'onClick'\n\nlet Overlay = forwardRefWithAs(function Overlay<\n  TTag extends ElementType = typeof DEFAULT_OVERLAY_TAG\n>(props: Props<TTag, OverlayRenderPropArg, OverlayPropsWeControl>, ref: Ref<HTMLDivElement>) {\n  let [{ popoverState }, dispatch] = usePopoverContext([Popover.name, Overlay.name].join('.'))\n  let overlayRef = useSyncRefs(ref)\n\n  let id = `headlessui-popover-overlay-${useId()}`\n\n  let handleClick = useCallback(\n    (event: ReactMouseEvent) => {\n      if (isDisabledReactIssue7711(event.currentTarget)) return event.preventDefault()\n      dispatch({ type: ActionTypes.ClosePopover })\n    },\n    [dispatch]\n  )\n\n  let propsBag = useMemo<OverlayRenderPropArg>(\n    () => ({ open: popoverState === PopoverStates.Open }),\n    [popoverState]\n  )\n  let propsWeControl = {\n    ref: overlayRef,\n    id,\n    'aria-hidden': true,\n    onClick: handleClick,\n  }\n  let passthroughProps = props\n\n  return render({ ...passthroughProps, ...propsWeControl }, propsBag, DEFAULT_OVERLAY_TAG)\n})\n\n// ---\n\nlet DEFAULT_PANEL_TAG = 'div' as const\ninterface PanelRenderPropArg {\n  open: boolean\n}\ntype PanelPropsWeControl = 'id' | 'onKeyDown'\n\nlet PanelRenderFeatures = Features.RenderStrategy | Features.Static\n\nlet Panel = forwardRefWithAs(function Panel<TTag extends ElementType = typeof DEFAULT_PANEL_TAG>(\n  props: Props<TTag, PanelRenderPropArg, PanelPropsWeControl> &\n    PropsForFeatures<typeof PanelRenderFeatures> & { focus?: boolean },\n  ref: Ref<HTMLDivElement>\n) {\n  let { focus = false, ...passthroughProps } = props\n\n  let [state, dispatch] = usePopoverContext([Popover.name, Panel.name].join('.'))\n  let internalPanelRef = useRef<HTMLDivElement | null>(null)\n  let panelRef = useSyncRefs(internalPanelRef, ref, panel => {\n    dispatch({ type: ActionTypes.SetPanel, panel })\n  })\n\n  let handleKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      switch (event.key) {\n        case Keys.Escape:\n          if (state.popoverState !== PopoverStates.Open) return\n          if (!internalPanelRef.current) return\n          if (!internalPanelRef.current.contains(document.activeElement)) return\n          event.preventDefault()\n          dispatch({ type: ActionTypes.ClosePopover })\n          state.button?.focus()\n          break\n      }\n    },\n    [state, internalPanelRef, dispatch]\n  )\n\n  // Unlink on \"unmount\" myself\n  useEffect(() => () => dispatch({ type: ActionTypes.SetPanel, panel: null }), [dispatch])\n\n  // Unlink on \"unmount\" children\n  useEffect(() => {\n    if (state.popoverState === PopoverStates.Closed && (props.unmount ?? true)) {\n      dispatch({ type: ActionTypes.SetPanel, panel: null })\n    }\n  }, [state.popoverState, props.unmount, dispatch])\n\n  // Move focus within panel\n  useEffect(() => {\n    if (!focus) return\n    if (state.popoverState !== PopoverStates.Open) return\n    if (!internalPanelRef.current) return\n\n    let activeElement = document.activeElement as HTMLElement\n    if (internalPanelRef.current.contains(activeElement)) return // Already focused within Dialog\n\n    focusIn(internalPanelRef.current, Focus.First)\n  }, [focus, internalPanelRef, state.popoverState])\n\n  // Handle Tab / Shift+Tab focus positioning\n  useEffect(() => {\n    if (state.popoverState !== PopoverStates.Open) return\n    if (!internalPanelRef.current) return\n\n    function handler(event: KeyboardEvent) {\n      if (event.key !== Keys.Tab) return\n      if (!document.activeElement) return\n      if (!internalPanelRef.current) return\n      if (!internalPanelRef.current.contains(document.activeElement)) return\n\n      // We will take-over the default tab behaviour so that we have a bit\n      // control over what is focused next. It will behave exactly the same,\n      // but it will also \"fix\" some issues based on wether you are using a\n      // Portal or not.\n      event.preventDefault()\n\n      let result = focusIn(internalPanelRef.current, event.shiftKey ? Focus.Previous : Focus.Next)\n\n      if (result === FocusResult.Underflow) {\n        return state.button?.focus()\n      } else if (result === FocusResult.Overflow) {\n        if (!state.button) return\n\n        let elements = getFocusableElements()\n        let buttonIdx = elements.indexOf(state.button)\n\n        let nextElements = elements\n          .splice(buttonIdx + 1) // Elements after button\n          .filter(element => !internalPanelRef.current?.contains(element)) // Ignore items in panel\n\n        // Try to focus the next element, however it could fail if we are in a\n        // Portal that happens to be the very last one in the DOM. In that\n        // case we would Error (because nothing after the button is\n        // focusable). Therefore we will try and focus the very first item in\n        // the document.body.\n        if (focusIn(nextElements, Focus.First) === FocusResult.Error) {\n          focusIn(document.body, Focus.First)\n        }\n      }\n    }\n\n    window.addEventListener('keydown', handler)\n    return () => window.removeEventListener('keydown', handler)\n  }, [focus, internalPanelRef, state.popoverState, state.button])\n\n  // Handle focus out when we are in special \"focus\" mode\n  useEffect(() => {\n    if (!focus) return\n    if (state.popoverState !== PopoverStates.Open) return\n    if (!internalPanelRef.current) return\n\n    function handler() {\n      if (internalPanelRef.current?.contains(document.activeElement as HTMLElement)) return\n      dispatch({ type: ActionTypes.ClosePopover })\n    }\n\n    window.addEventListener('focus', handler, true)\n    return () => window.removeEventListener('focus', handler, true)\n  }, [focus, state.popoverState, dispatch])\n\n  let propsBag = useMemo<PanelRenderPropArg>(\n    () => ({ open: state.popoverState === PopoverStates.Open }),\n    [state]\n  )\n  let propsWeControl = {\n    ref: panelRef,\n    id: state.panelId,\n    onKeyDown: handleKeyDown,\n  }\n\n  return (\n    <PopoverPanelContext.Provider value={state.panelId}>\n      {render(\n        { ...passthroughProps, ...propsWeControl },\n        propsBag,\n        DEFAULT_PANEL_TAG,\n        PanelRenderFeatures,\n        state.popoverState === PopoverStates.Open\n      )}\n    </PopoverPanelContext.Provider>\n  )\n})\n\n// ---\n\nlet DEFAULT_GROUP_TAG = 'div' as const\ninterface GroupRenderPropArg {}\ntype GroupPropsWeControl = 'id'\n\nfunction Group<TTag extends ElementType = typeof DEFAULT_PANEL_TAG>(\n  props: Props<TTag, GroupRenderPropArg, GroupPropsWeControl>\n) {\n  let groupRef = useRef<HTMLElement | null>(null)\n  let [popovers, setPopovers] = useState<PopoverRegisterBag[]>([])\n\n  let unregisterPopover = useCallback(\n    (registerbag: PopoverRegisterBag) => {\n      setPopovers(existing => {\n        let idx = existing.indexOf(registerbag)\n        if (idx !== -1) {\n          let clone = existing.slice()\n          clone.splice(idx, 1)\n          return clone\n        }\n        return existing\n      })\n    },\n    [setPopovers]\n  )\n\n  let registerPopover = useCallback(\n    (registerbag: PopoverRegisterBag) => {\n      setPopovers(existing => [...existing, registerbag])\n      return () => unregisterPopover(registerbag)\n    },\n    [setPopovers, unregisterPopover]\n  )\n\n  let isFocusWithinPopoverGroup = useCallback(() => {\n    let element = document.activeElement as HTMLElement\n\n    if (groupRef.current?.contains(element)) return true\n\n    // Check if the focus is in one of the button or panel elements. This is important in case you are rendering inside a Portal.\n    return popovers.some(bag => {\n      return (\n        document.getElementById(bag.buttonId)?.contains(element) ||\n        document.getElementById(bag.panelId)?.contains(element)\n      )\n    })\n  }, [groupRef, popovers])\n\n  let closeOthers = useCallback(\n    (buttonId: string) => {\n      for (let popover of popovers) {\n        if (popover.buttonId !== buttonId) popover.close()\n      }\n    },\n    [popovers]\n  )\n\n  let contextBag = useMemo<ContextType<typeof PopoverGroupContext>>(\n    () => ({\n      registerPopover: registerPopover,\n      unregisterPopover: unregisterPopover,\n      isFocusWithinPopoverGroup,\n      closeOthers,\n    }),\n    [registerPopover, unregisterPopover, isFocusWithinPopoverGroup, closeOthers]\n  )\n\n  let propsBag = useMemo<GroupRenderPropArg>(() => ({}), [])\n  let propsWeControl = { ref: groupRef }\n  let passthroughProps = props\n\n  return (\n    <PopoverGroupContext.Provider value={contextBag}>\n      {render({ ...passthroughProps, ...propsWeControl }, propsBag, DEFAULT_GROUP_TAG)}\n    </PopoverGroupContext.Provider>\n  )\n}\n\n// ---\n\nPopover.Button = Button\nPopover.Overlay = Overlay\nPopover.Panel = Panel\nPopover.Group = Group\n","import React, {\n  createContext,\n  useCallback,\n  useContext,\n  useMemo,\n  useState,\n\n  // Types\n  ElementType,\n  ReactNode,\n} from 'react'\n\nimport { Props } from '../../types'\nimport { useId } from '../../hooks/use-id'\nimport { render } from '../../utils/render'\nimport { useIsoMorphicEffect } from '../../hooks/use-iso-morphic-effect'\n\n// ---\n\nlet LabelContext = createContext<{ register(value: string): () => void }>({\n  register() {\n    return () => {}\n  },\n})\n\nfunction useLabelContext() {\n  return useContext(LabelContext)\n}\n\nexport function useLabels(\n  id?: string\n): [string | undefined, (props: { children: ReactNode }) => JSX.Element] {\n  let [labelIds, setLabelIds] = useState<string[]>([])\n\n  return [\n    // The actual id's as string or undefined. If there are labels defined and\n    // we got an id passed in, let's add it as well!\n    labelIds.length > 0 ? (id ? [id, ...labelIds].join(' ') : labelIds.join(' ')) : undefined,\n\n    // The provider component\n    useMemo(() => {\n      return function LabelProvider(props: { children: ReactNode }) {\n        let register = useCallback((value: string) => {\n          setLabelIds(existing => [...existing, value])\n\n          return () =>\n            setLabelIds(existing => {\n              let clone = existing.slice()\n              let idx = clone.indexOf(value)\n              if (idx !== -1) clone.splice(idx, 1)\n              return clone\n            })\n        }, [])\n\n        let contextBag = useMemo(() => ({ register }), [register])\n\n        return <LabelContext.Provider value={contextBag}>{props.children}</LabelContext.Provider>\n      }\n    }, [setLabelIds]),\n  ]\n}\n\n// ---\n\nlet DEFAULT_LABEL_TAG = 'label' as const\ninterface LabelRenderPropArg {}\ntype LabelPropsWeControl = 'id'\n\nexport function Label<TTag extends ElementType = typeof DEFAULT_LABEL_TAG>(\n  props: Props<TTag, LabelRenderPropArg, LabelPropsWeControl>\n) {\n  let { register } = useLabelContext()\n  let id = `headlessui-label-${useId()}`\n\n  useIsoMorphicEffect(() => register(id), [id, register])\n\n  let passThroughProps = props\n  let propsWeControl = { id }\n  let bag = useMemo<LabelRenderPropArg>(() => ({}), [])\n\n  return render({ ...passThroughProps, ...propsWeControl }, bag, DEFAULT_LABEL_TAG)\n}\n","import React, {\n  createContext,\n  useCallback,\n  useContext,\n  useMemo,\n  useState,\n\n  // Types\n  ElementType,\n  ReactNode,\n} from 'react'\n\nimport { Props } from '../../types'\nimport { useId } from '../../hooks/use-id'\nimport { render } from '../../utils/render'\nimport { useIsoMorphicEffect } from '../../hooks/use-iso-morphic-effect'\n\n// ---\n\nlet DescriptionContext = createContext<{ register(value: string): () => void }>({\n  register() {\n    return () => {}\n  },\n})\n\nfunction useDescriptionContext() {\n  return useContext(DescriptionContext)\n}\n\nexport function useDescriptions(): [\n  string | undefined,\n  (props: { children: ReactNode }) => JSX.Element\n] {\n  let [descriptionIds, setDescriptionIds] = useState<string[]>([])\n\n  return [\n    // The actual id's as string or undefined\n    descriptionIds.length > 0 ? descriptionIds.join(' ') : undefined,\n\n    // The provider component\n    useMemo(() => {\n      return function DescriptionProvider(props: { children: ReactNode }) {\n        let register = useCallback((value: string) => {\n          setDescriptionIds(existing => [...existing, value])\n\n          return () =>\n            setDescriptionIds(existing => {\n              let clone = existing.slice()\n              let idx = clone.indexOf(value)\n              if (idx !== -1) clone.splice(idx, 1)\n              return clone\n            })\n        }, [])\n\n        let contextBag = useMemo(() => ({ register }), [register])\n\n        return (\n          <DescriptionContext.Provider value={contextBag}>\n            {props.children}\n          </DescriptionContext.Provider>\n        )\n      }\n    }, [setDescriptionIds]),\n  ]\n}\n\n// ---\n\nlet DEFAULT_DESCRIPTION_TAG = 'p' as const\ninterface DescriptionRenderPropArg {}\ntype DescriptionPropsWeControl = 'id'\n\nexport function Description<TTag extends ElementType = typeof DEFAULT_DESCRIPTION_TAG>(\n  props: Props<TTag, DescriptionRenderPropArg, DescriptionPropsWeControl>\n) {\n  let { register } = useDescriptionContext()\n  let id = `headlessui-description-${useId()}`\n\n  useIsoMorphicEffect(() => register(id), [id, register])\n\n  let passThroughProps = props\n  let propsWeControl = { id }\n  let bag = useMemo<DescriptionRenderPropArg>(() => ({}), [])\n\n  return render({ ...passThroughProps, ...propsWeControl }, bag, DEFAULT_DESCRIPTION_TAG)\n}\n","import React, {\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useReducer,\n  useRef,\n\n  // Types\n  Dispatch,\n  ElementType,\n  MutableRefObject,\n} from 'react'\n\nimport { Props, Expand } from '../../types'\nimport { render } from '../../utils/render'\nimport { useId } from '../../hooks/use-id'\nimport { match } from '../../utils/match'\nimport { useIsoMorphicEffect } from '../../hooks/use-iso-morphic-effect'\nimport { Keys } from '../../components/keyboard'\nimport { focusIn, Focus, FocusResult } from '../../utils/focus-management'\nimport { useFlags } from '../../hooks/use-flags'\nimport { Label, useLabels } from '../../components/label/label'\nimport { Description, useDescriptions } from '../../components/description/description'\n\ninterface Option {\n  id: string\n  element: MutableRefObject<HTMLElement | null>\n  propsRef: MutableRefObject<{ value: unknown }>\n}\n\ninterface StateDefinition {\n  propsRef: MutableRefObject<{ value: unknown; onChange(value: unknown): void }>\n  options: Option[]\n}\n\nenum ActionTypes {\n  RegisterOption,\n  UnregisterOption,\n}\n\ntype Actions =\n  | Expand<{ type: ActionTypes.RegisterOption } & Option>\n  | { type: ActionTypes.UnregisterOption; id: Option['id'] }\n\nlet reducers: {\n  [P in ActionTypes]: (\n    state: StateDefinition,\n    action: Extract<Actions, { type: P }>\n  ) => StateDefinition\n} = {\n  [ActionTypes.RegisterOption](state, action) {\n    return {\n      ...state,\n      options: [\n        ...state.options,\n        { id: action.id, element: action.element, propsRef: action.propsRef },\n      ],\n    }\n  },\n  [ActionTypes.UnregisterOption](state, action) {\n    let options = state.options.slice()\n    let idx = state.options.findIndex(radio => radio.id === action.id)\n    if (idx === -1) return state\n    options.splice(idx, 1)\n    return { ...state, options }\n  },\n}\n\nlet RadioGroupContext = createContext<[StateDefinition, Dispatch<Actions>] | null>(null)\nRadioGroupContext.displayName = 'RadioGroupContext'\n\nfunction useRadioGroupContext(component: string) {\n  let context = useContext(RadioGroupContext)\n  if (context === null) {\n    let err = new Error(`<${component} /> is missing a parent <${RadioGroup.name} /> component.`)\n    if (Error.captureStackTrace) Error.captureStackTrace(err, useRadioGroupContext)\n    throw err\n  }\n  return context\n}\n\nfunction stateReducer(state: StateDefinition, action: Actions) {\n  return match(action.type, reducers, state, action)\n}\n\n// ---\n\nlet DEFAULT_RADIO_GROUP_TAG = 'div' as const\ninterface RadioGroupRenderPropArg {}\ntype RadioGroupPropsWeControl = 'role' | 'aria-labelledby' | 'aria-describedby' | 'id'\n\nexport function RadioGroup<\n  TTag extends ElementType = typeof DEFAULT_RADIO_GROUP_TAG,\n  TType = string\n>(\n  props: Props<\n    TTag,\n    RadioGroupRenderPropArg,\n    RadioGroupPropsWeControl | 'value' | 'onChange' | 'disabled'\n  > & {\n    value: TType\n    onChange(value: TType): void\n    disabled?: boolean\n  }\n) {\n  let { value, onChange, ...passThroughProps } = props\n  let reducerBag = useReducer(stateReducer, {\n    propsRef: { current: { value, onChange } },\n    options: [],\n  } as StateDefinition)\n  let [{ propsRef, options }] = reducerBag\n  let [labelledby, LabelProvider] = useLabels()\n  let [describedby, DescriptionProvider] = useDescriptions()\n  let id = `headlessui-radiogroup-${useId()}`\n  let radioGroupRef = useRef<HTMLElement | null>(null)\n\n  useIsoMorphicEffect(() => {\n    propsRef.current.value = value\n  }, [value, propsRef])\n  useIsoMorphicEffect(() => {\n    propsRef.current.onChange = onChange\n  }, [onChange, propsRef])\n\n  let triggerChange = useCallback(\n    nextValue => {\n      if (nextValue === value) return\n      return onChange(nextValue)\n    },\n    [onChange, value]\n  )\n\n  useIsoMorphicEffect(() => {\n    let container = radioGroupRef.current\n    if (!container) return\n\n    let walker = document.createTreeWalker(container, NodeFilter.SHOW_ELEMENT, {\n      acceptNode(node: HTMLElement) {\n        if (node.getAttribute('role') === 'radio') return NodeFilter.FILTER_REJECT\n        if (node.hasAttribute('role')) return NodeFilter.FILTER_SKIP\n        return NodeFilter.FILTER_ACCEPT\n      },\n    })\n\n    while (walker.nextNode()) {\n      ;(walker.currentNode as HTMLElement).setAttribute('role', 'none')\n    }\n  }, [radioGroupRef])\n\n  useEffect(() => {\n    let container = radioGroupRef.current\n    if (!container) return\n\n    function handler(event: KeyboardEvent) {\n      switch (event.key) {\n        case Keys.ArrowLeft:\n        case Keys.ArrowUp:\n          {\n            event.preventDefault()\n            event.stopPropagation()\n\n            let result = focusIn(\n              options.map(radio => radio.element.current) as HTMLElement[],\n              Focus.Previous | Focus.WrapAround\n            )\n\n            if (result === FocusResult.Success) {\n              let activeOption = options.find(\n                option => option.element.current === document.activeElement\n              )\n              if (activeOption) triggerChange(activeOption.propsRef.current.value)\n            }\n          }\n          break\n\n        case Keys.ArrowRight:\n        case Keys.ArrowDown:\n          {\n            event.preventDefault()\n            event.stopPropagation()\n\n            let result = focusIn(\n              options.map(option => option.element.current) as HTMLElement[],\n              Focus.Next | Focus.WrapAround\n            )\n\n            if (result === FocusResult.Success) {\n              let activeOption = options.find(\n                option => option.element.current === document.activeElement\n              )\n              if (activeOption) triggerChange(activeOption.propsRef.current.value)\n            }\n          }\n          break\n\n        case Keys.Space:\n          {\n            event.preventDefault()\n            event.stopPropagation()\n\n            let activeOption = options.find(\n              option => option.element.current === document.activeElement\n            )\n            if (activeOption) triggerChange(activeOption.propsRef.current.value)\n          }\n          break\n      }\n    }\n\n    container.addEventListener('keydown', handler)\n    return () => container!.removeEventListener('keydown', handler)\n  }, [radioGroupRef, options, triggerChange])\n\n  let propsWeControl = {\n    ref: radioGroupRef,\n    id,\n    role: 'radiogroup',\n    'aria-labelledby': labelledby,\n    'aria-describedby': describedby,\n  }\n  let bag = useMemo<RadioGroupRenderPropArg>(() => ({}), [])\n\n  return (\n    <DescriptionProvider>\n      <LabelProvider>\n        <RadioGroupContext.Provider value={reducerBag}>\n          {render({ ...passThroughProps, ...propsWeControl }, bag, DEFAULT_RADIO_GROUP_TAG)}\n        </RadioGroupContext.Provider>\n      </LabelProvider>\n    </DescriptionProvider>\n  )\n}\n\n// ---\n\nenum OptionState {\n  Empty = 1 << 0,\n  Active = 1 << 1,\n}\n\nlet DEFAULT_OPTION_TAG = 'div' as const\ninterface OptionRenderPropArg {\n  checked: boolean\n  active: boolean\n}\ntype RadioPropsWeControl =\n  | 'aria-checked'\n  | 'id'\n  | 'onBlur'\n  | 'onClick'\n  | 'onFocus'\n  | 'ref'\n  | 'role'\n  | 'tabIndex'\n\nfunction Option<\n  TTag extends ElementType = typeof DEFAULT_OPTION_TAG,\n  // TODO: One day we will be able to infer this type from the generic in RadioGroup itself.\n  // But today is not that day..\n  TType = Parameters<typeof RadioGroup>[0]['value']\n>(\n  props: Props<TTag, OptionRenderPropArg, RadioPropsWeControl | 'value'> & {\n    value: TType\n  }\n) {\n  let optionRef = useRef<HTMLElement | null>(null)\n  let id = `headlessui-radiogroup-option-${useId()}`\n\n  let [labelledby, LabelProvider] = useLabels(id)\n  let [describedby, DescriptionProvider] = useDescriptions()\n  let { addFlag, removeFlag, hasFlag } = useFlags(OptionState.Empty)\n\n  let { value, ...passThroughProps } = props\n  let propsRef = useRef({ value })\n\n  useIsoMorphicEffect(() => {\n    propsRef.current.value = value\n  }, [value, propsRef])\n\n  let [{ propsRef: radioGroupPropsRef, options }, dispatch] = useRadioGroupContext(\n    [RadioGroup.name, Option.name].join('.')\n  )\n\n  useIsoMorphicEffect(() => {\n    dispatch({ type: ActionTypes.RegisterOption, id, element: optionRef, propsRef })\n    return () => dispatch({ type: ActionTypes.UnregisterOption, id })\n  }, [id, dispatch, optionRef, props])\n\n  let handleClick = useCallback(() => {\n    if (radioGroupPropsRef.current.value === value) return\n\n    addFlag(OptionState.Active)\n    radioGroupPropsRef.current.onChange(value)\n    optionRef.current?.focus()\n  }, [addFlag, radioGroupPropsRef, value])\n\n  let handleFocus = useCallback(() => addFlag(OptionState.Active), [addFlag])\n  let handleBlur = useCallback(() => removeFlag(OptionState.Active), [removeFlag])\n\n  let firstRadio = options?.[0]?.id === id\n  let checked = radioGroupPropsRef.current.value === value\n  let propsWeControl = {\n    ref: optionRef,\n    id,\n    role: 'radio',\n    'aria-checked': checked ? 'true' : 'false',\n    'aria-labelledby': labelledby,\n    'aria-describedby': describedby,\n    tabIndex: checked ? 0 : radioGroupPropsRef.current.value === undefined && firstRadio ? 0 : -1,\n    onClick: handleClick,\n    onFocus: handleFocus,\n    onBlur: handleBlur,\n  }\n  let bag = useMemo<OptionRenderPropArg>(() => ({ checked, active: hasFlag(OptionState.Active) }), [\n    checked,\n    hasFlag,\n  ])\n\n  return (\n    <DescriptionProvider>\n      <LabelProvider>\n        {render({ ...passThroughProps, ...propsWeControl }, bag, DEFAULT_OPTION_TAG)}\n      </LabelProvider>\n    </DescriptionProvider>\n  )\n}\n\n// ---\n\nRadioGroup.Option = Option\nRadioGroup.Label = Label\nRadioGroup.Description = Description\n","import { useState, useCallback } from 'react'\n\nexport function useFlags(initialFlags = 0) {\n  let [flags, setFlags] = useState(initialFlags)\n\n  let addFlag = useCallback((flag: number) => setFlags(flags => flags | flag), [setFlags])\n  let hasFlag = useCallback((flag: number) => Boolean(flags & flag), [flags])\n  let removeFlag = useCallback((flag: number) => setFlags(flags => flags & ~flag), [setFlags])\n  let toggleFlag = useCallback((flag: number) => setFlags(flags => flags ^ flag), [setFlags])\n\n  return { addFlag, hasFlag, removeFlag, toggleFlag }\n}\n","import React, {\n  Fragment,\n  createContext,\n  useCallback,\n  useContext,\n  useMemo,\n  useState,\n\n  // Types\n  ElementType,\n  KeyboardEvent as ReactKeyboardEvent,\n  MouseEvent as ReactMouseEvent,\n} from 'react'\n\nimport { Props } from '../../types'\nimport { render } from '../../utils/render'\nimport { useId } from '../../hooks/use-id'\nimport { Keys } from '../keyboard'\nimport { isDisabledReactIssue7711 } from '../../utils/bugs'\n\ninterface StateDefinition {\n  switch: HTMLButtonElement | null\n  label: HTMLLabelElement | null\n  description: HTMLParagraphElement | null\n\n  setSwitch(element: HTMLButtonElement): void\n  setLabel(element: HTMLLabelElement): void\n  setDescription(element: HTMLParagraphElement): void\n}\n\nlet GroupContext = createContext<StateDefinition | null>(null)\nGroupContext.displayName = 'GroupContext'\n\nfunction useGroupContext(component: string) {\n  let context = useContext(GroupContext)\n  if (context === null) {\n    let err = new Error(`<${component} /> is missing a parent <Switch.Group /> component.`)\n    if (Error.captureStackTrace) Error.captureStackTrace(err, useGroupContext)\n    throw err\n  }\n  return context\n}\n\n// ---\n\nlet DEFAULT_GROUP_TAG = Fragment\n\nfunction Group<TTag extends ElementType = typeof DEFAULT_GROUP_TAG>(props: Props<TTag>) {\n  let [switchElement, setSwitchElement] = useState<HTMLButtonElement | null>(null)\n  let [labelElement, setLabelElement] = useState<HTMLLabelElement | null>(null)\n  let [descriptionElement, setDescriptionElement] = useState<HTMLParagraphElement | null>(null)\n\n  let context = useMemo<StateDefinition>(\n    () => ({\n      switch: switchElement,\n      setSwitch: setSwitchElement,\n      label: labelElement,\n      setLabel: setLabelElement,\n      description: descriptionElement,\n      setDescription: setDescriptionElement,\n    }),\n    [\n      switchElement,\n      setSwitchElement,\n      labelElement,\n      setLabelElement,\n      descriptionElement,\n      setDescriptionElement,\n    ]\n  )\n\n  return (\n    <GroupContext.Provider value={context}>\n      {render(props, {}, DEFAULT_GROUP_TAG)}\n    </GroupContext.Provider>\n  )\n}\n\n// ---\n\nlet DEFAULT_SWITCH_TAG = 'button' as const\ninterface SwitchRenderPropArg {\n  checked: boolean\n}\ntype SwitchPropsWeControl =\n  | 'id'\n  | 'role'\n  | 'tabIndex'\n  | 'aria-checked'\n  | 'aria-labelledby'\n  | 'aria-describedby'\n  | 'onClick'\n  | 'onKeyUp'\n  | 'onKeyPress'\n\nexport function Switch<TTag extends ElementType = typeof DEFAULT_SWITCH_TAG>(\n  props: Props<TTag, SwitchRenderPropArg, SwitchPropsWeControl | 'checked' | 'onChange'> & {\n    checked: boolean\n    onChange(checked: boolean): void\n  }\n) {\n  let { checked, onChange, ...passThroughProps } = props\n  let id = `headlessui-switch-${useId()}`\n  let groupContext = useContext(GroupContext)\n\n  let toggle = useCallback(() => onChange(!checked), [onChange, checked])\n  let handleClick = useCallback(\n    (event: ReactMouseEvent) => {\n      if (isDisabledReactIssue7711(event.currentTarget)) return event.preventDefault()\n      event.preventDefault()\n      toggle()\n    },\n    [toggle]\n  )\n  let handleKeyUp = useCallback(\n    (event: ReactKeyboardEvent<HTMLElement>) => {\n      if (event.key !== Keys.Tab) event.preventDefault()\n      if (event.key === Keys.Space) toggle()\n    },\n    [toggle]\n  )\n\n  // This is needed so that we can \"cancel\" the click event when we use the `Enter` key on a button.\n  let handleKeyPress = useCallback(\n    (event: ReactKeyboardEvent<HTMLElement>) => event.preventDefault(),\n    []\n  )\n\n  let propsBag = useMemo<SwitchRenderPropArg>(() => ({ checked }), [checked])\n  let propsWeControl = {\n    id,\n    ref: groupContext === null ? undefined : groupContext.setSwitch,\n    role: 'switch',\n    tabIndex: 0,\n    'aria-checked': checked,\n    'aria-labelledby': groupContext?.label?.id,\n    'aria-describedby': groupContext?.description?.id,\n    onClick: handleClick,\n    onKeyUp: handleKeyUp,\n    onKeyPress: handleKeyPress,\n  }\n\n  if (passThroughProps.as === 'button') {\n    Object.assign(propsWeControl, { type: 'button' })\n  }\n\n  return render({ ...passThroughProps, ...propsWeControl }, propsBag, DEFAULT_SWITCH_TAG)\n}\n\n// ---\n\nlet DEFAULT_LABEL_TAG = 'label' as const\ninterface LabelRenderPropArg {}\ntype LabelPropsWeControl = 'id' | 'ref' | 'onClick'\n\nfunction Label<TTag extends ElementType = typeof DEFAULT_LABEL_TAG>(\n  props: Props<TTag, LabelRenderPropArg, LabelPropsWeControl>\n) {\n  let state = useGroupContext([Switch.name, Label.name].join('.'))\n  let id = `headlessui-switch-label-${useId()}`\n\n  let handleClick = useCallback(() => {\n    if (!state.switch) return\n    state.switch.click()\n    state.switch.focus({ preventScroll: true })\n  }, [state.switch])\n\n  let propsWeControl = { ref: state.setLabel, id, onClick: handleClick }\n  return render({ ...props, ...propsWeControl }, {}, DEFAULT_LABEL_TAG)\n}\n\n// ---\n\nlet DEFAULT_DESCRIPTIONL_TAG = 'p' as const\ninterface DescriptionRenderPropArg {}\ntype DescriptionPropsWeControl = 'id' | 'ref'\n\nfunction Description<TTag extends ElementType = typeof DEFAULT_LABEL_TAG>(\n  props: Props<TTag, DescriptionRenderPropArg, DescriptionPropsWeControl>\n) {\n  let state = useGroupContext([Switch.name, Description.name].join('.'))\n  let id = `headlessui-switch-description-${useId()}`\n\n  let propsWeControl = { ref: state.setDescription, id }\n  return render({ ...props, ...propsWeControl }, {}, DEFAULT_DESCRIPTIONL_TAG)\n}\n\n// ---\n\nSwitch.Group = Group\nSwitch.Label = Label\nSwitch.Description = Description\n","import { once } from '../../../utils/once'\nimport { disposables } from '../../../utils/disposables'\n\nfunction addClasses(node: HTMLElement, ...classes: string[]) {\n  node && classes.length > 0 && node.classList.add(...classes)\n}\n\nfunction removeClasses(node: HTMLElement, ...classes: string[]) {\n  node && classes.length > 0 && node.classList.remove(...classes)\n}\n\nexport enum Reason {\n  Finished = 'finished',\n  Cancelled = 'cancelled',\n}\n\nfunction waitForTransition(node: HTMLElement, done: (reason: Reason) => void) {\n  let d = disposables()\n\n  if (!node) return d.dispose\n\n  // Safari returns a comma separated list of values, so let's sort them and take the highest value.\n  let { transitionDuration, transitionDelay } = getComputedStyle(node)\n\n  let [durationMs, delaysMs] = [transitionDuration, transitionDelay].map(value => {\n    let [resolvedValue = 0] = value\n      .split(',')\n      // Remove falseys we can't work with\n      .filter(Boolean)\n      // Values are returned as `0.3s` or `75ms`\n      .map(v => (v.includes('ms') ? parseFloat(v) : parseFloat(v) * 1000))\n      .sort((a, z) => z - a)\n\n    return resolvedValue\n  })\n\n  // Waiting for the transition to end. We could use the `transitionend` event, however when no\n  // actual transition/duration is defined then the `transitionend` event is not fired.\n  //\n  // TODO: Downside is, when you slow down transitions via devtools this timeout is still using the\n  // full 100% speed instead of the 25% or 10%.\n  if (durationMs !== 0) {\n    d.setTimeout(() => {\n      done(Reason.Finished)\n    }, durationMs + delaysMs)\n  } else {\n    // No transition is happening, so we should cleanup already. Otherwise we have to wait until we\n    // get disposed.\n    done(Reason.Finished)\n  }\n\n  // If we get disposed before the timeout runs we should cleanup anyway\n  d.add(() => done(Reason.Cancelled))\n\n  return d.dispose\n}\n\nexport function transition(\n  node: HTMLElement,\n  base: string[],\n  from: string[],\n  to: string[],\n  done?: (reason: Reason) => void\n) {\n  let d = disposables()\n  let _done = done !== undefined ? once(done) : () => {}\n\n  addClasses(node, ...base, ...from)\n\n  d.nextFrame(() => {\n    removeClasses(node, ...from)\n    addClasses(node, ...to)\n\n    d.add(\n      waitForTransition(node, reason => {\n        removeClasses(node, ...to, ...base)\n        return _done(reason)\n      })\n    )\n  })\n\n  // Once we get disposed, we should ensure that we cleanup after ourselves. In case of an unmount,\n  // the node itself will be nullified and will be a no-op. In case of a full transition the classes\n  // are already removed which is also a no-op. However if you go from enter -> leave mid-transition\n  // then we have some leftovers that should be cleaned.\n  d.add(() => removeClasses(node, ...base, ...from, ...to))\n\n  // When we get disposed early, than we should also call the done method but switch the reason.\n  d.add(() => _done(Reason.Cancelled))\n\n  return d.dispose\n}\n","import { useRef, useEffect } from 'react'\n\nexport function useIsInitialRender() {\n  let initial = useRef(true)\n\n  useEffect(() => {\n    initial.current = false\n  }, [])\n\n  return initial.current\n}\n","export function once<T>(cb: (...args: T[]) => void) {\n  let state = { called: false }\n\n  return (...args: T[]) => {\n    if (state.called) return\n    state.called = true\n    return cb(...args)\n  }\n}\n","import React, {\n  Fragment,\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n\n  // Types\n  ElementType,\n  MutableRefObject,\n} from 'react'\nimport { Props } from '../../types'\n\nimport { useId } from '../../hooks/use-id'\nimport { useIsInitialRender } from '../../hooks/use-is-initial-render'\nimport { match } from '../../utils/match'\nimport { useIsMounted } from '../../hooks/use-is-mounted'\nimport { useIsoMorphicEffect } from '../../hooks/use-iso-morphic-effect'\n\nimport { Features, PropsForFeatures, render, RenderStrategy } from '../../utils/render'\nimport { Reason, transition } from './utils/transition'\n\ntype ID = ReturnType<typeof useId>\n\nfunction useSplitClasses(classes: string = '') {\n  return useMemo(() => classes.split(' ').filter(className => className.trim().length > 1), [\n    classes,\n  ])\n}\n\ninterface TransitionContextValues {\n  show: boolean\n  appear: boolean\n}\nlet TransitionContext = createContext<TransitionContextValues | null>(null)\nTransitionContext.displayName = 'TransitionContext'\n\nenum TreeStates {\n  Visible = 'visible',\n  Hidden = 'hidden',\n}\n\nexport interface TransitionClasses {\n  enter?: string\n  enterFrom?: string\n  enterTo?: string\n  leave?: string\n  leaveFrom?: string\n  leaveTo?: string\n}\n\nexport interface TransitionEvents {\n  beforeEnter?: () => void\n  afterEnter?: () => void\n  beforeLeave?: () => void\n  afterLeave?: () => void\n}\n\ntype TransitionChildProps<TTag> = Props<TTag, TransitionChildRenderPropArg> &\n  PropsForFeatures<typeof TransitionChildRenderFeatures> &\n  TransitionClasses &\n  TransitionEvents & { appear?: boolean }\n\nfunction useTransitionContext() {\n  let context = useContext(TransitionContext)\n\n  if (context === null) {\n    throw new Error('A <Transition.Child /> is used but it is missing a parent <Transition />.')\n  }\n\n  return context\n}\n\nfunction useParentNesting() {\n  let context = useContext(NestingContext)\n\n  if (context === null) {\n    throw new Error('A <Transition.Child /> is used but it is missing a parent <Transition />.')\n  }\n\n  return context\n}\n\ninterface NestingContextValues {\n  children: MutableRefObject<{ id: ID; state: TreeStates }[]>\n  register: (id: ID) => () => void\n  unregister: (id: ID, strategy?: RenderStrategy) => void\n}\n\nlet NestingContext = createContext<NestingContextValues | null>(null)\nNestingContext.displayName = 'NestingContext'\n\nfunction hasChildren(\n  bag: NestingContextValues['children'] | { children: NestingContextValues['children'] }\n): boolean {\n  if ('children' in bag) return hasChildren(bag.children)\n  return bag.current.filter(({ state }) => state === TreeStates.Visible).length > 0\n}\n\nfunction useNesting(done?: () => void) {\n  let doneRef = useRef(done)\n  let transitionableChildren = useRef<NestingContextValues['children']['current']>([])\n  let mounted = useIsMounted()\n\n  useEffect(() => {\n    doneRef.current = done\n  }, [done])\n\n  let unregister = useCallback(\n    (childId: ID, strategy = RenderStrategy.Hidden) => {\n      let idx = transitionableChildren.current.findIndex(({ id }) => id === childId)\n      if (idx === -1) return\n\n      match(strategy, {\n        [RenderStrategy.Unmount]() {\n          transitionableChildren.current.splice(idx, 1)\n        },\n        [RenderStrategy.Hidden]() {\n          transitionableChildren.current[idx].state = TreeStates.Hidden\n        },\n      })\n\n      if (!hasChildren(transitionableChildren) && mounted.current) {\n        doneRef.current?.()\n      }\n    },\n    [doneRef, mounted, transitionableChildren]\n  )\n\n  let register = useCallback(\n    (childId: ID) => {\n      let child = transitionableChildren.current.find(({ id }) => id === childId)\n      if (!child) {\n        transitionableChildren.current.push({ id: childId, state: TreeStates.Visible })\n      } else if (child.state !== TreeStates.Visible) {\n        child.state = TreeStates.Visible\n      }\n\n      return () => unregister(childId, RenderStrategy.Unmount)\n    },\n    [transitionableChildren, unregister]\n  )\n\n  return useMemo(\n    () => ({\n      children: transitionableChildren,\n      register,\n      unregister,\n    }),\n    [register, unregister, transitionableChildren]\n  )\n}\n\nfunction noop() {}\nlet eventNames = ['beforeEnter', 'afterEnter', 'beforeLeave', 'afterLeave'] as const\nfunction ensureEventHooksExist(events: TransitionEvents) {\n  let result = {} as Record<keyof typeof events, () => void>\n  for (let name of eventNames) {\n    result[name] = events[name] ?? noop\n  }\n  return result\n}\n\nfunction useEvents(events: TransitionEvents) {\n  let eventsRef = useRef(ensureEventHooksExist(events))\n\n  useEffect(() => {\n    eventsRef.current = ensureEventHooksExist(events)\n  }, [events])\n\n  return eventsRef\n}\n\n// ---\n\nlet DEFAULT_TRANSITION_CHILD_TAG = 'div' as const\ntype TransitionChildRenderPropArg = MutableRefObject<HTMLDivElement>\nlet TransitionChildRenderFeatures = Features.RenderStrategy\n\nfunction TransitionChild<TTag extends ElementType = typeof DEFAULT_TRANSITION_CHILD_TAG>(\n  props: TransitionChildProps<TTag>\n) {\n  let {\n    // Event \"handlers\"\n    beforeEnter,\n    afterEnter,\n    beforeLeave,\n    afterLeave,\n\n    // Class names\n    enter,\n    enterFrom,\n    enterTo,\n    leave,\n    leaveFrom,\n    leaveTo,\n\n    // @ts-expect-error\n    ...rest\n  } = props as typeof props\n  let container = useRef<HTMLElement | null>(null)\n  let [state, setState] = useState(TreeStates.Visible)\n  let strategy = rest.unmount ? RenderStrategy.Unmount : RenderStrategy.Hidden\n\n  let { show, appear } = useTransitionContext()\n  let { register, unregister } = useParentNesting()\n\n  let initial = useIsInitialRender()\n  let id = useId()\n\n  let isTransitioning = useRef(false)\n\n  let nesting = useNesting(() => {\n    // When all children have been unmounted we can only hide ourselves if and only if we are not\n    // transitioning ourserlves. Otherwise we would unmount before the transitions are finished.\n    if (!isTransitioning.current) {\n      setState(TreeStates.Hidden)\n      unregister(id)\n      events.current.afterLeave()\n    }\n  })\n\n  useIsoMorphicEffect(() => {\n    if (!id) return\n    return register(id)\n  }, [register, id])\n\n  useIsoMorphicEffect(() => {\n    // If we are in another mode than the Hidden mode then ignore\n    if (strategy !== RenderStrategy.Hidden) return\n    if (!id) return\n\n    // Make sure that we are visible\n    if (show && state !== TreeStates.Visible) {\n      setState(TreeStates.Visible)\n      return\n    }\n\n    match(state, {\n      [TreeStates.Hidden]: () => unregister(id),\n      [TreeStates.Visible]: () => register(id),\n    })\n  }, [state, id, register, unregister, show, strategy])\n\n  let enterClasses = useSplitClasses(enter)\n  let enterFromClasses = useSplitClasses(enterFrom)\n  let enterToClasses = useSplitClasses(enterTo)\n\n  let leaveClasses = useSplitClasses(leave)\n  let leaveFromClasses = useSplitClasses(leaveFrom)\n  let leaveToClasses = useSplitClasses(leaveTo)\n\n  let events = useEvents({ beforeEnter, afterEnter, beforeLeave, afterLeave })\n\n  useEffect(() => {\n    if (state === TreeStates.Visible && container.current === null) {\n      throw new Error('Did you forget to passthrough the `ref` to the actual DOM node?')\n    }\n  }, [container, state])\n\n  // Skipping initial transition\n  let skip = initial && !appear\n\n  useIsoMorphicEffect(() => {\n    let node = container.current\n    if (!node) return\n    if (skip) return\n\n    isTransitioning.current = true\n\n    if (show) events.current.beforeEnter()\n    if (!show) events.current.beforeLeave()\n\n    return show\n      ? transition(node, enterClasses, enterFromClasses, enterToClasses, reason => {\n          isTransitioning.current = false\n          if (reason === Reason.Finished) events.current.afterEnter()\n        })\n      : transition(node, leaveClasses, leaveFromClasses, leaveToClasses, reason => {\n          isTransitioning.current = false\n\n          if (reason !== Reason.Finished) return\n\n          // When we don't have children anymore we can safely unregister from the parent and hide\n          // ourselves.\n          if (!hasChildren(nesting)) {\n            setState(TreeStates.Hidden)\n            unregister(id)\n            events.current.afterLeave()\n          }\n        })\n  }, [\n    events,\n    id,\n    isTransitioning,\n    unregister,\n    nesting,\n    container,\n    skip,\n    show,\n    enterClasses,\n    enterFromClasses,\n    enterToClasses,\n    leaveClasses,\n    leaveFromClasses,\n    leaveToClasses,\n  ])\n\n  let propsBag = {}\n  let propsWeControl = { ref: container }\n  let passthroughProps = rest\n\n  return (\n    <NestingContext.Provider value={nesting}>\n      {render(\n        { ...passthroughProps, ...propsWeControl },\n        propsBag,\n        DEFAULT_TRANSITION_CHILD_TAG,\n        TransitionChildRenderFeatures,\n        state === TreeStates.Visible\n      )}\n    </NestingContext.Provider>\n  )\n}\n\nexport function Transition<TTag extends ElementType = typeof DEFAULT_TRANSITION_CHILD_TAG>(\n  props: TransitionChildProps<TTag> & { show: boolean; appear?: boolean }\n) {\n  // @ts-expect-error\n  let { show, appear = false, unmount, ...passthroughProps } = props as typeof props\n\n  if (![true, false].includes(show)) {\n    throw new Error('A <Transition /> is used but it is missing a `show={true | false}` prop.')\n  }\n\n  let [state, setState] = useState(show ? TreeStates.Visible : TreeStates.Hidden)\n\n  let nestingBag = useNesting(() => {\n    setState(TreeStates.Hidden)\n  })\n\n  let initial = useIsInitialRender()\n  let transitionBag = useMemo<TransitionContextValues>(\n    () => ({ show, appear: appear || !initial }),\n    [show, appear, initial]\n  )\n\n  useEffect(() => {\n    if (show) {\n      setState(TreeStates.Visible)\n    } else if (!hasChildren(nestingBag)) {\n      setState(TreeStates.Hidden)\n    }\n  }, [show, nestingBag])\n\n  let sharedProps = { unmount }\n  let propsBag = {}\n\n  return (\n    <NestingContext.Provider value={nestingBag}>\n      <TransitionContext.Provider value={transitionBag}>\n        {render(\n          {\n            ...sharedProps,\n            as: Fragment,\n            children: <TransitionChild {...sharedProps} {...passthroughProps} />,\n          },\n          propsBag,\n          Fragment,\n          TransitionChildRenderFeatures,\n          state === TreeStates.Visible\n        )}\n      </TransitionContext.Provider>\n    </NestingContext.Provider>\n  )\n}\n\nTransition.Child = TransitionChild\n","import { useRef, useEffect } from 'react'\n\nexport function useIsMounted() {\n  let mounted = useRef(true)\n\n  useEffect(() => {\n    return () => {\n      mounted.current = false\n    }\n  }, [])\n\n  return mounted\n}\n","import {\n  useMemo,\n\n  // Types\n  ElementType,\n} from 'react'\n\nimport { Props } from '../../types'\nimport { render } from '../../utils/render'\nimport { match } from '../../utils/match'\n\ntype Importance =\n  /**\n   * Indicates that updates to the region should be presented at the next\n   * graceful opportunity, such as at the end of speaking the current sentence\n   * or when the user pauses typing.\n   */\n  | 'polite'\n\n  /**\n   * Indicates that updates to the region have the highest priority and should\n   * be presented the user immediately.\n   */\n  | 'assertive'\n\n// ---\n\nlet DEFAULT_ALERT_TAG = 'div' as const\ninterface AlertRenderPropArg {\n  importance: Importance\n}\ntype AlertPropsWeControl = 'role'\n\nexport function Alert<TTag extends ElementType = typeof DEFAULT_ALERT_TAG>(\n  props: Props<TTag, AlertRenderPropArg, AlertPropsWeControl> & {\n    importance?: Importance\n  }\n) {\n  let { importance = 'polite', ...passThroughProps } = props\n  let propsWeControl = match(importance, {\n    polite: () => ({ role: 'status' }),\n    assertive: () => ({ role: 'alert' }),\n  })\n\n  let bag = useMemo<AlertRenderPropArg>(() => ({ importance }), [importance])\n\n  return render({ ...passThroughProps, ...propsWeControl }, bag, DEFAULT_ALERT_TAG)\n}\n","import {\n  useRef,\n\n  // Types\n  ElementType,\n  MutableRefObject,\n} from 'react'\n\nimport { Props } from '../../types'\nimport { render } from '../../utils/render'\nimport { useFocusTrap } from '../../hooks/use-focus-trap'\n\nlet DEFAULT_FOCUS_TRAP_TAG = 'div' as const\n\nexport function FocusTrap<TTag extends ElementType = typeof DEFAULT_FOCUS_TRAP_TAG>(\n  props: Props<TTag> & { initialFocus?: MutableRefObject<HTMLElement | null> }\n) {\n  let containers = useRef<Set<HTMLElement>>(new Set())\n  let { initialFocus, ...passthroughProps } = props\n\n  useFocusTrap(containers, true, { initialFocus })\n\n  let propsWeControl = {\n    ref(element: HTMLElement | null) {\n      if (!element) return\n      containers.current.add(element)\n    },\n  }\n\n  return render({ ...passthroughProps, ...propsWeControl }, {}, DEFAULT_FOCUS_TRAP_TAG)\n}\n"],"names":["Features","RenderStrategy","Keys","match","value","lookup","returnValue","args","error","Error","Object","keys","map","key","join","captureStackTrace","render","props","propsBag","defaultTag","features","visible","_render","featureFlags","None","Static","isStatic","rest","unmount","Unmount","Hidden","hidden","style","display","bag","tag","omit","as","Component","children","refName","passThroughProps","refRelatedProps","undefined","ref","resolvedChildren","className","Fragment","length","Array","isArray","err","isValidElement","cloneElement","assign","existingProps","functionsToMerge","clone","func","event","defaultPrevented","mergeEventFunctions","object","compact","createElement","forwardRefWithAs","component","forwardRef","displayName","name","keysToOmit","useSyncRefs","refs","cache","useRef","useEffect","current","useCallback","isDisabledReactIssue7711","element","parent","parentElement","legend","HTMLFieldSetElement","HTMLLegendElement","isParentDisabled","getAttribute","previous","previousElementSibling","isFirstLegend","useIsoMorphicEffect","window","useLayoutEffect","state","serverHandoffComplete","id","generateId","useId","useState","setId","Focus","FocusResult","Direction","FocusableMode","focusableSelector","selector","getFocusableElements","container","document","body","from","querySelectorAll","isFocusableElement","mode","Strict","matches","Loose","next","focusElement","focus","preventScroll","focusIn","elements","active","activeElement","direction","First","Next","Previous","Last","startIndex","Math","max","indexOf","focusOptions","NoScroll","offset","total","nextIdx","WrapAround","Underflow","Overflow","Success","contains","containers","useFocusTrap","enabled","options","restoreElement","previousActiveElement","mounted","size","initialFocus","_options$initialFocus","_options$initialFocus3","couldFocus","addEventListener","handler","removeEventListener","Tab","preventDefault","shiftKey","toElement","target","HTMLElement","stopPropagation","interactables","Set","originals","Map","inert","setAttribute","restore","original","get","removeAttribute","StackMessage","StackContext","createContext","useStackContext","useContext","StackProvider","onUpdate","parentUpdate","notify","React","Provider","ForcePortalRootContext","ForcePortalRoot","force","DEFAULT_PORTAL_TAG","Portal","passthroughProps","forceInRoot","groupTarget","PortalGroupContext","existingRoot","getElementById","root","appendChild","setTarget","usePortalTarget","AddElement","RemoveElement","useElemenStack","removeChild","childNodes","createPortal","DialogStates","ActionTypes","DEFAULT_GROUP_TAG","Group","reducers","SetTitleId","action","titleId","SetDescriptionId","descriptionId","DialogContext","useDialogContext","context","Dialog","stateReducer","type","DisclosureStates","DialogRenderFeatures","open","onClose","internalDialogRef","dialogRef","hasOpen","hasOwnProperty","hasOnClose","dialogState","Open","Closed","useReducer","dispatch","close","setTitleId","setDescriptionId","Escape","overflow","documentElement","paddingRight","scrollbarWidth","innerWidth","clientWidth","observer","IntersectionObserver","entries","entry","boundingClientRect","x","y","width","height","observe","disconnect","add","forEach","child","set","has","useInertOthers","contextBag","useMemo","message","role","Overlay","overlayRef","handleClick","currentTarget","onClick","Title","Description","ToggleDisclosure","disclosureState","LinkPanel","linkedPanel","UnlinkPanel","SetButtonId","buttonId","SetPanelId","panelId","DisclosureContext","useDisclosureContext","Disclosure","DEFAULT_DISCLOSURE_TAG","reducerBag","ListboxStates","Button","buttonRef","handleKeyDown","Space","Enter","disabled","onKeyDown","PanelRenderFeatures","Panel","panelRef","disposables","api","requestAnimationFrame","raf","cancelAnimationFrame","nextFrame","setTimeout","timer","clearTimeout","cb","push","dispose","splice","useDisposables","d","useComputed","dependencies","setValue","cbRef","calculateActiveIndex","resolvers","items","resolveItems","currentActiveIndex","resolveActiveIndex","activeIndex","nextActiveIndex","findIndex","item","resolveDisabled","idx","slice","reverse","all","Specific","resolveId","Nothing","assertNever","CloseListbox","listboxState","activeOptionIndex","OpenListbox","SetDisabled","GoToOption","dataRef","searchQuery","Search","option","textValue","_option$dataRef$curre","startsWith","ClearSearch","RegisterOption","UnregisterOption","nextOptions","currentActiveOption","a","ListboxContext","useListboxContext","Listbox","DEFAULT_LISTBOX_TAG","onChange","propsRef","labelRef","createRef","optionsRef","_buttonRef$current","_optionsRef$current","MenuStates","ArrowDown","ArrowUp","_state$buttonRef$curr","labelledby","_state$optionsRef$cur","OptionsRenderFeatures","Options","searchDisposables","_state$buttonRef$curr3","Home","PageUp","End","PageDown","_state$buttonRef$curr4","_state$labelRef$curre2","_state$buttonRef$curr5","_state$options$state$","tabIndex","Label","_state$buttonRef$curr2","Option","selected","_document$getElementB","textContent","_document$getElementB2","toLowerCase","select","_document$getElementB4","scrollIntoView","block","_state$buttonRef$curr6","handleFocus","handleMove","handleLeave","onFocus","onPointerMove","onMouseMove","onPointerLeave","onMouseLeave","CloseMenu","menuState","activeItemIndex","OpenMenu","GoToItem","RegisterItem","UnregisterItem","nextItems","currentActiveItem","MenuContext","useMenuContext","Menu","DEFAULT_MENU_TAG","itemsRef","_itemsRef$current","PopoverStates","_state$itemsRef$curre","ItemsRenderFeatures","Items","walker","createTreeWalker","NodeFilter","SHOW_ELEMENT","acceptNode","node","FILTER_REJECT","hasAttribute","FILTER_SKIP","FILTER_ACCEPT","nextNode","currentNode","click","_state$items$state$ac","DEFAULT_ITEM_TAG","Item","_document$getElementB3","TogglePopover","popoverState","ClosePopover","SetButton","button","SetPanel","panel","PopoverContext","usePopoverContext","Popover","PopoverGroupContext","usePopoverGroupContext","PopoverPanelContext","registerBag","groupContext","registerPopover","isFocusWithinPopoverGroup","internalButtonRef","closeOthers","panelContext","isWithinPanel","activeElementRef","previousActiveElementRef","_state$button2","focusableElements","previousIdx","handleKeyUp","_state$button3","onKeyUp","internalPanelRef","result","_state$button6","buttonIdx","filter","_internalPanelRef$cur","_internalPanelRef$cur2","groupRef","popovers","setPopovers","unregisterPopover","registerbag","existing","_groupRef$current","some","popover","LabelContext","register","useLabels","labelIds","setLabelIds","DescriptionContext","useDescriptions","descriptionIds","setDescriptionIds","OptionState","radio","RadioGroupContext","useRadioGroupContext","RadioGroup","LabelProvider","describedby","DescriptionProvider","radioGroupRef","triggerChange","nextValue","ArrowLeft","activeOption","find","ArrowRight","propsWeControl","optionRef","initialFlags","flags","setFlags","addFlag","flag","hasFlag","Boolean","removeFlag","toggleFlag","useFlags","Empty","radioGroupPropsRef","Active","handleBlur","firstRadio","checked","onBlur","GroupContext","useGroupContext","Reason","Switch","toggle","handleKeyPress","setSwitch","label","_groupContext$label","description","_groupContext$descrip","onKeyPress","useIsInitialRender","initial","addClasses","classes","classList","removeClasses","remove","transition","base","to","done","_done","called","once","getComputedStyle","transitionDuration","transitionDelay","split","v","includes","parseFloat","sort","z","durationMs","Finished","Cancelled","waitForTransition","reason","useSplitClasses","trim","switchElement","setSwitchElement","labelElement","setLabelElement","descriptionElement","setDescriptionElement","setLabel","setDescription","TreeStates","TransitionContext","NestingContext","hasChildren","Visible","useNesting","doneRef","transitionableChildren","useIsMounted","unregister","childId","strategy","noop","eventNames","ensureEventHooksExist","events","TransitionChildRenderFeatures","TransitionChild","beforeEnter","afterEnter","beforeLeave","afterLeave","enter","enterFrom","enterTo","leave","leaveFrom","leaveTo","setState","useTransitionContext","show","appear","useParentNesting","isTransitioning","nesting","enterClasses","enterFromClasses","enterToClasses","leaveClasses","leaveFromClasses","leaveToClasses","eventsRef","useEvents","skip","Transition","nestingBag","transitionBag","sharedProps","Child","importance","polite","assertive"],"mappings":"0EAcYA,EAoBAC,EChCAC,8vCCFIC,EACdC,EACAC,MAGID,KAASC,EAAQ,SACfC,EAAcD,EAAOD,sBAHxBG,mCAAAA,0BAI6B,mBAAhBD,EAA6BA,eAAeC,GAAQD,MAGhEE,EAAQ,IAAIC,0BACML,mEAAsEM,OAAOC,KAC/FN,GAECO,KAAI,SAAAC,aAAWA,SACfC,KAAK,iBAENL,MAAMM,mBAAmBN,MAAMM,kBAAkBP,EAAOL,GACtDK,WF8BQQ,EACdC,EACAC,EACAC,EACAC,EACAC,eAAAA,IAAAA,GAAmB,GAGfA,EAAS,OAAOC,EAAQL,EAAOC,EAAUC,OAEzCI,QAAeH,EAAAA,EAAYpB,EAASwB,QAEpCD,EAAevB,EAASyB,OAAQ,OACUR,SAA9BS,gBAAqBC,IAASV,iBAGxCS,EAAU,OAAOJ,EAAQK,EAAMT,EAAUC,MAG3CI,EAAevB,EAASC,eAAgB,SACRgB,EAA5BW,QAAAA,gBAAmBD,IAASV,sBAG3Bd,EAFQyB,EAAU3B,EAAe4B,QAAU5B,EAAe6B,eAG9D7B,EAAe4B,2BACP,QAER5B,EAAe6B,0BACPR,OACAK,EAAS,CAAEI,QAAQ,EAAMC,MAAO,CAAEC,QAAS,UAChDf,EACAC,eAODG,EAAQL,EAAOC,EAAUC,GAGlC,SAASG,EACPL,EACAiB,EACAC,WAE8EC,EAAKnB,EAAO,CACxF,UACA,eAFIoB,GAAIC,aAAYH,IAAKI,IAAAA,aAAUC,QAAAA,aAAU,QAAUC,mCAMrDC,OAAgCC,IAAd1B,EAAM2B,YAAuBJ,GAAUvB,EAAM2B,OAAQ,GAEvEC,EAAwC,mBAAbN,EAA0BA,EAASL,GAAOK,KAKrEE,EAAiBK,WAAmD,mBAA/BL,EAAiBK,YACtDL,EAAyBK,UAAYL,EAAiBK,UAAUZ,IAGhEI,IAAcS,YACZrC,OAAOC,KAAK8B,GAAkBO,OAAS,EAAG,IACxCC,MAAMC,QAAQL,IAAqBA,EAAiBG,OAAS,EAAG,KAC9DG,EAAM,IAAI1C,MAAM,wCAChBA,MAAMM,mBAAmBN,MAAMM,kBAAkBoC,EAAK7B,GACpD6B,MAGHC,iBAAeP,GAAmB,KACjCM,EAAM,IAAI1C,0FAGVA,MAAMM,mBAAmBN,MAAMM,kBAAkBoC,EAAK7B,GACpD6B,SAGDE,eACLR,EACAnC,OAAO4C,OACL,GAgCV,SACEb,EACAc,EACAC,aAEIC,EAAQ/C,OAAO4C,OAAO,GAAIb,sBACrBiB,eACwBf,IAA3BF,EAAiBiB,SAA+Cf,IAAxBY,EAAcG,IACxDhD,OAAO4C,OAAOG,UACXC,YAAMC,GAEAA,EAAMC,kBAAkBnB,EAAiBiB,GAAMC,GAG/CA,EAAMC,kBAAkBL,EAAcG,GAAMC,aA5CqC,CACpF,sCAiDHF,EAlDCI,CAiEV,SAA6CC,OACvCL,EAAQ/C,OAAO4C,OAAO,GAAIQ,OACzB,IAAIjD,KAAO4C,OACKd,IAAfc,EAAM5C,WAA2B4C,EAAM5C,UAEtC4C,EAtEqBM,CAAQ3B,EAAKK,EAAkB,CAAC,SAAUI,EAAiB5B,OAG/EyB,WAMDsB,gBACL1B,EACA5B,OAAO4C,OAAO,GAAIlB,EAAKK,EAAkB,CAAC,QAASH,IAAcS,YAAYL,GAC7EG,YA6CYoB,EACdC,gBAEOxD,OAAO4C,OAAOa,aAAYD,GAAsC,CACrEE,qBAAaF,EAAUE,eAAeF,EAAUG,OAYpD,SAASjC,EAAiC0B,EAAWQ,YAAAA,IAAAA,EAAuB,cACtEb,EAAQ/C,OAAO4C,OAAO,GAAIQ,OACdQ,kBAAY,KAAnBzD,UACHA,KAAO4C,UAAcA,EAAM5C,UAE1B4C,WGhNOc,+BACXC,2BAAAA,sBAECC,EAAQC,SAAOF,UAEnBG,aAAU,WACRF,EAAMG,QAAUJ,IACf,CAACA,IAEGK,eACL,SAACzE,iBACiBqE,EAAMG,wBAAS,KAAtBhC,UACI,MAAPA,IACe,mBAARA,EAAoBA,EAAIxC,GAC9BwC,EAAIgC,QAAUxE,MAGvB,CAACqE,aChBWK,EAAyBC,eACnCC,EAASD,EAAQE,cACjBC,EAAS,KAENF,KAAYA,aAAkBG,sBAC/BH,aAAkBI,oBAAmBF,EAASF,GAClDA,EAASA,EAAOC,kBAGdI,WAAwD,eAArCL,YAAQM,aAAa,yBACxCD,IAKN,SAAuBN,OAChBA,EAAS,OAAO,UAEjBQ,EAAWR,EAAQS,uBAEH,OAAbD,GAAmB,IACpBA,aAAoBH,kBAAmB,OAAO,EAClDG,EAAWA,EAASC,8BAGf,EAfiBC,CAAcP,KAE/BG,GJDT,SAAYrF,GAEVA,mBASAA,uCAMAA,uBAjBF,CAAYA,IAAAA,OAoBZ,SAAYC,GACVA,yBACAA,uBAFF,CAAYA,IAAAA,OChCZ,SAAYC,GACVA,YACAA,gBACAA,kBACAA,wBAEAA,wBACAA,oBACAA,0BACAA,wBAEAA,cACAA,YAEAA,kBACAA,sBAEAA,YAjBF,CAAYA,IAAAA,WIACwF,EAAwC,oBAAXC,OAAyBC,kBAAkBjB,YCOjFkB,EAAQ,CAAEC,uBAAuB,GACjCC,EAAK,EACT,SAASC,YACED,EAGX,SAAgBE,UACIC,WAASL,EAAMC,sBAAwBE,EAAa,MAAjED,OAAII,cAETT,GAAoB,WACP,OAAPK,GAAaI,EAAMH,OACtB,CAACD,IAEJpB,aAAU,YAC4B,IAAhCkB,EAAMC,wBAAiCD,EAAMC,uBAAwB,KACxE,IAEU,MAANC,EAAa,GAAKA,OAAKpD,ECtBhC,IAqBYyD,EAoBAC,EAOPC,EAUOC,EA1DRC,EAAoB,CACtB,yBACA,aACA,UACA,aACA,yBACA,SACA,wBACA,yBACA,4BAEC5F,KAMK,SAAA6F,UAAeA,6BAEpB3F,KAAK,cAkCQ4F,EAAqBC,mBAAAA,IAAAA,EAAgCC,SAASC,MAC3D,MAAbF,EAA0B,GACvB1D,MAAM6D,KAAKH,EAAUI,iBAA8BP,aAW5CQ,EACdjC,EACAkC,yBAAAA,IAAAA,EAAsBV,EAAcW,QAEhCnC,IAAY6B,SAASC,MAElB1G,EAAM8G,UACVV,EAAcW,0BACNnC,EAAQoC,QAAQX,MAExBD,EAAca,0BACTC,EAA2BtC,EAEf,OAATsC,GAAe,IAChBA,EAAKF,QAAQX,GAAoB,OAAO,EAC5Ca,EAAOA,EAAKpC,qBAGP,gBAKGqC,EAAavC,SAC3BA,GAAAA,EAASwC,MAAM,CAAEC,eAAe,aAGlBC,EAAQd,EAAwCY,OAC1DG,EAAWzE,MAAMC,QAAQyD,GAAaA,EAAYD,EAAqBC,GACvEgB,EAASf,SAASgB,cAElBC,EAAa,cACXN,GAASnB,EAAM0B,MAAQ1B,EAAM2B,MAAO,OAAOzB,EAAUyB,QACrDR,GAASnB,EAAM4B,SAAW5B,EAAM6B,MAAO,OAAO3B,EAAU0B,eAEtD,IAAIvH,MAAM,iEAJD,GAObyH,EAAc,cACZX,EAAQnB,EAAM0B,MAAO,OAAO,KAC5BP,EAAQnB,EAAM4B,SAAU,OAAOG,KAAKC,IAAI,EAAGV,EAASW,QAAQV,IAAW,KACvEJ,EAAQnB,EAAM2B,KAAM,OAAOI,KAAKC,IAAI,EAAGV,EAASW,QAAQV,IAAW,KACnEJ,EAAQnB,EAAM6B,KAAM,OAAOP,EAAS1E,OAAS,QAE3C,IAAIvC,MAAM,iEANA,GASd6H,EAAef,EAAQnB,EAAMmC,SAAW,CAAEf,eAAe,GAAS,GAElEgB,EAAS,EACTC,EAAQf,EAAS1E,OACjBqE,OAAO1E,IACR,UAEG6F,GAAUC,GAASD,EAASC,GAAS,EAAG,OAAOpC,EAAY5F,UAE3DiI,EAAUR,EAAaM,KAEvBjB,EAAQnB,EAAMuC,WAChBD,GAAWA,EAAUD,GAASA,MACzB,IACDC,EAAU,EAAG,OAAOrC,EAAYuC,aAChCF,GAAWD,EAAO,OAAOpC,EAAYwC,kBAG3CxB,EAAOK,EAASgB,OAGVnB,MAAMe,GAGZE,GAAUX,QACHR,IAAST,SAASgB,sBAEpBvB,EAAYyC,iBChJLC,EAASC,EAA8BjE,iBAC/BiE,6BACND,SAAShE,GAAU,OAAO,SAGnC,WCMOkE,EACdD,EACAE,EACAC,YADAD,IAAAA,GAAmB,YACnBC,IAAAA,EAAmE,QAE/DC,EAAiB1E,SACD,oBAAXiB,OAA0BiB,SAASgB,cAAgC,MAExEyB,EAAwB3E,SAA2B,MACnD4E,EAAU5E,UAAO,GAGrBgB,GAAoB,sBACbwD,GAC2B,IAA5BF,EAAWpE,QAAQ2E,MAEvBD,EAAQ1E,SAAU,QAEdgD,EAAgBhB,SAASgB,0BAEzBuB,EAAQK,qBAARC,EAAsB7E,sBACpBuE,EAAQK,uBAAc5E,WAAYgD,cAGjC,GAAImB,EAASC,EAAWpE,QAASgD,aAIxCwB,EAAexE,QAAUgD,WAGrBuB,EAAQK,qBAARE,EAAsB9E,QACxB0C,EAAa6B,EAAQK,aAAa5E,aAC7B,WACD+E,GAAa,MACKX,EAAWpE,2BAClB6C,UAAmBrB,EAAM0B,SACvBzB,EAAYyC,QAAS,CAClCa,GAAa,YAKZA,EAAY,MAAM,IAAIlJ,MAAM,mEAGnC4I,EAAsBzE,QAAUgC,SAASgB,cAElC,WACL0B,EAAQ1E,SAAU,EAClB0C,EAAa8B,EAAexE,SAC5BwE,EAAexE,QAAU,KACzByE,EAAsBzE,QAAU,SAEjC,CAACsE,EAASF,EAAYM,EAASH,EAAQK,eAG1C9D,GAAoB,cACbwD,SAsBLvD,OAAOiE,iBAAiB,UAAWC,GAC5B,kBAAMlE,OAAOmE,oBAAoB,UAAWD,aArB1CA,EAAQlG,MACXA,EAAM9C,MAAQX,EAAK6J,KAClBnD,SAASgB,eACkB,IAA5BoB,EAAWpE,QAAQ2E,MAEvB5F,EAAMqG,+BAEchB,EAAWpE,2BAChB6C,WAEV9D,EAAMsG,SAAW7D,EAAM4B,SAAW5B,EAAM2B,MAAQ3B,EAAMuC,cAG1CtC,EAAYyC,QAAS,CAClCO,EAAsBzE,QAAUgC,SAASgB,yBAQ9C,CAACsB,EAASF,IAGbtD,GAAoB,cACbwD,GAC2B,IAA5BF,EAAWpE,QAAQ2E,YAuBvB5D,OAAOiE,iBAAiB,QAASC,GAAS,GACnC,kBAAMlE,OAAOmE,oBAAoB,QAASD,GAAS,aAtBjDA,EAAQlG,OACX4B,EAAW8D,EAAsBzE,WAChCW,GACA+D,EAAQ1E,aAETsF,EAAYvG,EAAMwG,OAElBD,GAAaA,aAAqBE,YAC/BrB,EAASC,EAAWpE,QAASsF,IAKhCb,EAAsBzE,QAAUsF,EAChC5C,EAAa4C,KALbvG,EAAMqG,iBACNrG,EAAM0G,kBACN/C,EAAa/B,IAMf+B,EAAa+B,EAAsBzE,aAMtC,CAACsE,EAASI,EAASN,KFlGxB,SAAY5C,GAEVA,qBAGAA,2BAGAA,mBAGAA,mBAGAA,gCAGAA,4BAjBF,CAAYA,IAAAA,OAoBZ,SAAYC,GACVA,qBACAA,2BACAA,yBACAA,6BAJF,CAAYA,IAAAA,OAOZ,SAAKC,GACHA,4BACAA,mBAFF,CAAKA,IAAAA,OAUL,SAAYC,GAEVA,uBAGAA,qBALF,CAAYA,IAAAA,OG3DZ,IAAI+D,EAAgB,IAAIC,IACpBC,EAAY,IAAIC,IAEpB,SAASC,EAAM3F,GACbA,EAAQ4F,aAAa,cAAe,QAEpC5F,EAAQ2F,OAAQ,EAGlB,SAASE,EAAQ7F,OACX8F,EAAWL,EAAUM,IAAI/F,GACxB8F,IAE2B,OAA5BA,EAAS,eAAyB9F,EAAQgG,gBAAgB,eACzDhG,EAAQ4F,aAAa,cAAeE,EAAS,gBAElD9F,EAAQ2F,MAAQG,EAASH,WCXfM,EAHRC,EAAeC,iBAAwB,eAQ3C,SAAgBC,WACPC,aAAWH,YAcJI,SACd9I,IAAAA,SACA+I,IAAAA,SAKIC,EAAeJ,IAEfK,EAAS3G,eACX,sCAAItE,2BAAAA,wBAEF+K,GAAAA,eAAc/K,GAGdgL,eAAgBhL,KAElB,CAACgL,EAAcD,WAGVG,gBAACR,EAAaS,UAAStL,MAAOoL,GAASjJ,GA1ChD0I,EAAa7G,YAAc,eAE3B,SAAY4G,GACVA,+BACAA,qCAFF,CAAYA,IAAAA,OCAZ,IAAIW,EAAyBT,iBAAc,YAW3BU,EAAgB3K,UAE5BwK,gBAACE,EAAuBD,UAAStL,MAAOa,EAAM4K,OAC3C5K,EAAMsB,UC0Bb,IAAIuJ,EAAqB/I,oBAGTgJ,EACd9K,OAEI+K,EAAmB/K,EACnBkJ,iBAlCA8B,EDVGb,aAAWO,GCWdO,EAAcd,aAAWe,KACHjG,YAAS,eAE5B+F,GAA+B,OAAhBC,EAAsB,OAAO,QAG3B,oBAAXvG,OAAwB,OAAO,SACtCyG,EAAexF,SAASyF,eAAe,6BACvCD,EAAc,OAAOA,MAErBE,EAAO1F,SAAS5C,cAAc,cAClCsI,EAAK3B,aAAa,KAAM,0BACjB/D,SAASC,KAAK0F,YAAYD,MAX9BnC,OAAQqC,cAcb7H,aAAU,WACJsH,GACgB,OAAhBC,GACJM,EAAUN,EAAYtH,WACrB,CAACsH,EAAaM,EAAWP,IAErB9B,EAYMsC,GACR1H,EAAWmB,YAAgC,iBAC5B,oBAAXP,OAAyB,KAAOiB,SAAS5C,cAAc,6BFxCnCe,OACzByG,EAASL,IAEbzF,GAAoB,cACbX,SAELyG,EAAOR,EAAa0B,WAAY3H,GACzB,kBAAMyG,EAAOR,EAAa2B,cAAe5H,MAC/C,CAACA,IEmCJ6H,CAAe7H,GAEfW,GAAoB,cACbyE,GACApF,SAELoF,EAAOoC,YAAYxH,GAEZ,iBACAoF,GACApF,IAELoF,EAAO0C,YAAY9H,GAEfoF,EAAO2C,WAAW9J,QAAU,aAC9BmH,EAAOlF,kBAAe4H,YAAY1C,QAGrC,CAACA,EAAQpF,IAGV0G,gBAACJ,OACGlB,GAAWpF,EAETgI,eAAa/L,EAAOgL,EAAkB,GAAIF,GAAqB/G,GAD/D,MAQV,MC3DKiI,EAUAC,EDiDDC,EAAoBnK,WAGpBoJ,EAAqBjB,gBAA2D,MAkBpFa,EAAOoB,MAhBP,SACElM,OAIMkJ,EAAgClJ,EAAhCkJ,OAAW6B,IAAqB/K,qBAGpCwK,gBAACU,EAAmBT,UAAStL,MAAO+J,GACjCnJ,EAAOgL,EAAkB,GAAIkB,KCzEpC,SAAKF,GACHA,mBACAA,uBAFF,CAAKA,IAAAA,OAUL,SAAKC,GACHA,+BACAA,2CAFF,CAAKA,IAAAA,OASL,IAAIG,UAMDH,EAAYI,qBAAYxH,EAAOyH,UAC1BzH,EAAM0H,UAAYD,EAAOvH,GAAWF,OAC5BA,GAAO0H,QAASD,EAAOvH,QAEpCkH,EAAYO,2BAAkB3H,EAAOyH,UAChCzH,EAAM4H,gBAAkBH,EAAOvH,GAAWF,OAClCA,GAAO4H,cAAeH,EAAOvH,SAIzC2H,EAAgBxC,gBAWlB,MAGF,SAASyC,EAAiBzJ,OACpB0J,EAAUxC,aAAWsC,MACT,OAAZE,EAAkB,KAChBzK,EAAM,IAAI1C,UAAUyD,8BAAqC2J,GAAOzJ,oCAChE3D,MAAMM,mBAAmBN,MAAMM,kBAAkBoC,EAAKwK,GACpDxK,SAEDyK,EAGT,SAASE,GAAajI,EAAwByH,UACrCnN,EAAMmN,EAAOS,KAAMX,EAAUvH,EAAOyH,GAb7CI,EAActJ,YAAc,gBAkB5B,OCvEK4J,GAcAf,GD+DDgB,GAAuBjO,EAASC,eAAiBD,EAASyB,OA4SnDoM,GAASnN,OAAO4C,OA1SVW,GAAiB,SAGhChD,EAMA2B,OAEMsL,EAAyCjN,EAAzCiN,KAAMC,EAAmClN,EAAnCkN,QAAS3E,EAA0BvI,EAA1BuI,aAAiB7H,IAASV,qCAE3C+H,EAAatE,SAAyB,IAAI6F,KAC1C6D,EAAoB1J,SAA8B,MAClD2J,EAAY9J,EAAY6J,EAAmBxL,GAG3C0L,EAAUrN,EAAMsN,eAAe,QAC/BC,EAAavN,EAAMsN,eAAe,eACjCD,IAAYE,QACT,IAAI/N,4FAKP6N,QACG,IAAI7N,wFAKP+N,QACG,IAAI/N,uFAKQ,kBAATyN,QACH,IAAIzN,gGACsFyN,MAI3E,mBAAZC,QACH,IAAI1N,oGAC0F0N,OAIlGM,EAAcP,EAAOlB,EAAa0B,KAAO1B,EAAa2B,SAElCC,aAAWd,GAAc,CAC/CP,QAAS,KACTE,cAAe,OAFZ5H,OAAOgJ,OAKRC,EAAQjK,eAAY,kBAAMsJ,GAAQ,KAAQ,CAACA,IAE3CY,EAAalK,eACf,SAACkB,UAAsB8I,EAAS,CAAEd,KAAMd,EAAYI,WAAYtH,GAAAA,MAChE,CAAC8I,IAECG,EAAmBnK,eACrB,SAACkB,UAAsB8I,EAAS,CAAEd,KAAMd,EAAYO,iBAAkBzH,GAAAA,MACtE,CAAC8I,IAIHlK,aAAU,oBACCkF,EAAQlG,GAGX8K,IAAgBzB,EAAa0B,MACD,IAA5B1F,EAAWpE,QAAQ2E,OACnBR,EAASC,EAAWpE,QAJXjB,EAAMwG,SAMnB2E,YAGFnJ,OAAOiE,iBAAiB,YAAaC,GAC9B,kBAAMlE,OAAOmE,oBAAoB,YAAaD,MACpD,CAAC4E,EAAazF,EAAY8F,IAG7BnK,aAAU,oBACCkF,EAAQlG,GACXA,EAAM9C,MAAQX,EAAK+O,QACnBR,IAAgBzB,EAAa0B,OAC7B1F,EAAWpE,QAAQ2E,KAAO,GAC9BuF,YAGFnJ,OAAOiE,iBAAiB,UAAWC,GAC5B,kBAAMlE,OAAOmE,oBAAoB,UAAWD,MAClD,CAACiF,EAAOL,IAGX9J,aAAU,cACJ8J,IAAgBzB,EAAa0B,UAE7BQ,EAAWtI,SAASuI,gBAAgBnN,MAAMkN,SAC1CE,EAAexI,SAASuI,gBAAgBnN,MAAMoN,aAE9CC,EAAiB1J,OAAO2J,WAAa1I,SAASuI,gBAAgBI,mBAElE3I,SAASuI,gBAAgBnN,MAAMkN,SAAW,SAC1CtI,SAASuI,gBAAgBnN,MAAMoN,aAAkBC,OAC1C,WACLzI,SAASuI,gBAAgBnN,MAAMkN,SAAWA,EAC1CtI,SAASuI,gBAAgBnN,MAAMoN,aAAeA,MAE/C,CAACX,IAGJ9J,aAAU,cACJ8J,IAAgBzB,EAAa0B,MAC5BN,EAAkBxJ,aAEnB4K,EAAW,IAAIC,sBAAqB,SAAAC,iBACpBA,kBAAS,KAAlBC,UAE0B,IAA/BA,EAAMC,mBAAmBC,GACM,IAA/BF,EAAMC,mBAAmBE,GACU,IAAnCH,EAAMC,mBAAmBG,OACW,IAApCJ,EAAMC,mBAAmBI,QAEzBlB,eAKNU,EAASS,QAAQ7B,EAAkBxJ,SAE5B,kBAAM4K,EAASU,iBACrB,CAACzB,EAAaL,EAAmBU,QAEhC5F,IAAUjI,UAAsBwN,IAAgBzB,EAAa0B,KAEjEzF,EAAaD,EAAYE,EAAS,CAAEM,aAAAA,aJ7NpC7C,EACAuC,YAAAA,IAAAA,GAAmB,GAEnBxD,GAAoB,cACbwD,GACAvC,EAAU/B,aAEXG,EAAU4B,EAAU/B,QAGxB0F,EAAc6F,IAAIpL,iBAGGyF,EAAU7J,uBAAQ,KAA9BkK,UACHA,EAAS9B,SAAShE,KACpB6F,EAAQC,GACRL,SAAiBK,WAKrBjE,SAASG,iBAAiB,YAAYqJ,SAAQ,SAAAC,MACtCA,aAAiBjG,2BAGEE,qBACnB+F,EAAMtH,kBAAwB,OAIT,IAAvBuB,EAAcf,OAChBiB,EAAU8F,IAAID,EAAO,eACJA,EAAM/K,aAAa,eAElCoF,MAAO2F,EAAM3F,QAIfA,EAAM2F,QAIH,cAEL/F,SAAqBvF,GAIjBuF,EAAcf,KAAO,EAEvB3C,SAASG,iBAAiB,YAAYqJ,SAAQ,SAAAC,MACtCA,aAAiBjG,cAGnBI,EAAU+F,IAAIF,kBAGO/F,qBACnB+F,EAAMtH,kBAAwB,OAGpCyB,EAAU8F,IAAID,EAAO,eACJA,EAAM/K,aAAa,eAElCoF,MAAO2F,EAAM3F,QAIfA,EAAM2F,0BAGY7F,EAAU7J,uBAAQ,KAA7BoE,UAEP6F,EAAQ7F,GAGRyF,SAAiBzF,QAItB,CAACmE,II8IJsH,CAAepC,EAAmBlF,OAE9BnD,uBAA0BE,IAE1BwK,EAAaC,WACf,iBAAM,CAAC,CAAEjC,YAAAA,EAAaK,MAAAA,EAAOC,WAAAA,EAAYC,iBAAAA,GAAoBnJ,KAC7D,CAAC4I,EAAa5I,EAAOiJ,EAAOC,EAAYC,IAGtC9N,EAAWwP,WAA6B,iBAAO,CAAExC,KAAMO,IAAgBzB,EAAa0B,QAAS,CAC/FD,WAaAhD,gBAACJ,GACCC,SAAU,SAACqF,EAAS5L,gBACX5E,EAAMwQ,UACV3F,EAAa0B,uBACZ1D,EAAWpE,QAAQuL,IAAIpL,MAExBiG,EAAa2B,0BACZ3D,EAAWpE,eAAeG,UAKhC0G,gBAACG,GAAgBC,OAAO,GACtBJ,gBAACM,OACCN,gBAACiC,EAAchC,UAAStL,MAAOqQ,GAC7BhF,gBAACM,EAAOoB,OAAMhD,OAAQiE,GACpB3C,gBAACG,GAAgBC,OAAO,GACrB7K,OApBQW,EARF,CACnBiB,IAAKyL,EACLtI,GAAAA,EACA6K,KAAM,sBACQnC,IAAgBzB,EAAa0B,WAAc/L,oBACtCkD,EAAM0H,2BACL1H,EAAM4H,gBAwBZvM,EA9LO,MAgMP+M,GACAQ,IAAgBzB,EAAa0B,eAiHD,CAAEmC,QA9FlC5M,GAAiB,SAAS4M,EAEtC5P,EAAiE2B,SAClC+K,EAAiB,CAACE,GAAOzJ,YAAayM,EAAQxM,MAAMvD,KAAK,SAAjF2N,IAAAA,YAAaK,IAAAA,MAChBgC,EAAavM,EAAY3B,GAEzBmD,+BAAkCE,IAElC8K,EAAclM,eAChB,SAAClB,MACKmB,EAAyBnB,EAAMqN,eAAgB,OAAOrN,EAAMqG,iBAChE8E,MAEF,CAACA,IAGC5N,EAAWwP,WACb,iBAAO,CAAExC,KAAMO,IAAgBzB,EAAa0B,QAC5C,CAACD,WAUIzN,OAFgBC,EANF,CACnB2B,IAAKkO,EACL/K,GAAAA,iBACe,EACfkL,QAASF,IAI+C7P,EAlClC,UAoG+BgQ,MAvDzD,SAASA,EACPjQ,SAEoC0M,EAAiB,CAACE,GAAOzJ,YAAa8M,EAAM7M,MAAMvD,KAAK,SAApF2N,IAAAA,YAAaM,IAAAA,WAEhBhJ,6BAAgCE,IAEpCtB,aAAU,kBACRoK,EAAWhJ,GACJ,kBAAMgJ,EAAW,SACvB,CAAChJ,EAAIgJ,QAEJ7N,EAAWwP,WAA4B,iBAAO,CAAExC,KAAMO,IAAgBzB,EAAa0B,QAAS,CAC9FD,WAKKzN,OAFgBC,EADF,CAAE8E,GAAAA,IAGmC7E,EAxBpC,OA6DwCiQ,YA1BhE,SAASA,EACPlQ,SAE0C0M,EACxC,CAACE,GAAOzJ,YAAa+M,EAAY9M,MAAMvD,KAAK,SADvC2N,IAAAA,YAAaO,IAAAA,iBAIhBjJ,mCAAsCE,IAE1CtB,aAAU,kBACRqK,EAAiBjJ,GACV,kBAAMiJ,EAAiB,SAC7B,CAACjJ,EAAIiJ,QAEJ9N,EAAWwP,WACb,iBAAO,CAAExC,KAAMO,IAAgBzB,EAAa0B,QAC5C,CAACD,WAKIzN,OAFgBC,EADF,CAAE8E,GAAAA,IAGmC7E,EA3B9B,SCzV9B,SAAK8M,GACHA,mBACAA,uBAFF,CAAKA,KAAAA,QAcL,SAAKf,GACHA,2CAEAA,iCACAA,+BAEAA,6BACAA,iCAPF,CAAKA,KAAAA,QAiBL,IAAIG,YAMDH,GAAYmE,kBAAmB,SAAAvL,qBAC3BA,GACHwL,gBAAiBlR,EAAM0F,EAAMwL,wBAC1BrD,GAAiBU,MAAOV,GAAiBW,SACzCX,GAAiBW,QAASX,GAAiBU,eAG/CzB,GAAYqE,oBAAWzL,UACI,IAAtBA,EAAM0L,YAA6B1L,OAC3BA,GAAO0L,aAAa,QAEjCtE,GAAYuE,sBAAa3L,UACE,IAAtBA,EAAM0L,YAA8B1L,OAC5BA,GAAO0L,aAAa,QAEjCtE,GAAYwE,sBAAa5L,EAAOyH,UAC3BzH,EAAM6L,WAAapE,EAAOoE,SAAiB7L,OACnCA,GAAO6L,SAAUpE,EAAOoE,eAErCzE,GAAY0E,qBAAY9L,EAAOyH,UAC1BzH,EAAM+L,UAAYtE,EAAOsE,QAAgB/L,OACjCA,GAAO+L,QAAStE,EAAOsE,eAInCC,GAAoB3G,gBAA2D,MAGnF,SAAS4G,GAAqB5N,OACxB0J,EAAUxC,aAAWyG,OACT,OAAZjE,EAAkB,KAChBzK,EAAM,IAAI1C,UAAUyD,8BAAqC6N,GAAW1N,6BACpE5D,MAAMM,mBAAmBN,MAAMM,kBAAkBoC,EAAK2O,IACpD3O,SAEDyK,EAGT,SAASE,GAAajI,EAAwByH,UACrCnN,EAAMmN,EAAOS,KAAMX,GAAUvH,EAAOyH,GAb7CuE,GAAkBzN,YAAc,oBAkBhC,IAAI4N,GAAyBjP,oBAKbgP,GACd9Q,OAEIyQ,kCAA2CzL,IAC3C2L,iCAAyC3L,IAEzCgM,EAAarD,aAAWd,GAAc,CACxCuD,gBAAiBrD,GAAiBW,OAClC4C,aAAa,EACbG,SAAAA,EACAE,QAAAA,IAEKP,EAA+BY,KAA/BZ,gBAAmBxC,EAAYoD,KAEtCtN,aAAU,kBAAMkK,EAAS,CAAEd,KAAMd,GAAYwE,YAAaC,SAAAA,MAAa,CAACA,EAAU7C,IAClFlK,aAAU,kBAAMkK,EAAS,CAAEd,KAAMd,GAAY0E,WAAYC,QAAAA,MAAY,CAACA,EAAS/C,QAE3E3N,EAAWwP,WACb,iBAAO,CAAExC,KAAMmD,IAAoBrD,GAAiBU,QACpD,CAAC2C,WAID5F,gBAACoG,GAAkBnG,UAAStL,MAAO6R,GAChCjR,EAAOC,EAAOC,EAAU8Q,KAO/B,IC3IY5L,MC8BP8L,GAuBAjF,GFkGDkF,GAASlO,GAAiB,SAASkO,EACrClR,EACA2B,SAEwBkP,GAAqB,CAACC,GAAW1N,KAAM8N,EAAO9N,MAAMvD,KAAK,MAA5E+E,OAAOgJ,OACRuD,EAAY7N,EAAY3B,GAExByP,EAAgBxN,eAClB,SAAClB,UACSA,EAAM9C,UACPX,EAAKoS,WACLpS,EAAKqS,MACR5O,EAAMqG,iBACN6E,EAAS,CAAEd,KAAMd,GAAYmE,sBAInC,CAACvC,IAGCkC,EAAclM,eAChB,SAAClB,GACKmB,EAAyBnB,EAAMqN,gBAC/B/P,EAAMuR,UACV3D,EAAS,CAAEd,KAAMd,GAAYmE,qBAE/B,CAACvC,EAAU5N,EAAMuR,WAGftR,EAAWwP,WACb,iBAAO,CAAExC,KAAMrI,EAAMwL,kBAAoBrD,GAAiBU,QAC1D,CAAC7I,WAcI7E,OAXgBC,EACF,CACnB2B,IAAKwP,EACLrM,GAAIF,EAAM6L,SACV3D,KAAM,yBACWlI,EAAMwL,kBAAoBrD,GAAiBU,WAAc/L,kBACzDkD,EAAM0L,YAAc1L,EAAM+L,aAAUjP,EACrD8P,UAAWJ,EACXpB,QAASF,IAG+C7P,EAzDnC,aAoErBwR,GAAsB1S,EAASC,eAAiBD,EAASyB,OAEzDkR,GAAQ1O,GAAiB,SAAS0O,EACpC1R,EAEA2B,SAEwBkP,GAAqB,CAACC,GAAW1N,KAAMsO,EAAMtO,MAAMvD,KAAK,MAA3E+E,OAAOgJ,OACR+D,EAAWrO,EAAY3B,GAAK,WAC1BiD,EAAM0L,aACV1C,EAAS,CAAEd,KAAMd,GAAYqE,eAI/B3M,aAAU,kBAAM,kBAAMkK,EAAS,CAAEd,KAAMd,GAAYuE,iBAAgB,CAAC3C,IAGpElK,aAAU,iBACJkB,EAAMwL,kBAAoBrD,GAAiBW,iBAAW1N,EAAMW,cAC9DiN,EAAS,CAAEd,KAAMd,GAAYuE,gBAE9B,CAAC3L,EAAMwL,gBAAiBpQ,EAAMW,QAASiN,QAEtC3N,EAAWwP,WACb,iBAAO,CAAExC,KAAMrI,EAAMwL,kBAAoBrD,GAAiBU,QAC1D,CAAC7I,WAQI7E,OAFgBC,EAJF,CACnB2B,IAAKgQ,EACL7M,GAAIF,EAAM+L,UAMV1Q,EAzCoB,MA2CpBwR,GACA7M,EAAMwL,kBAAoBrD,GAAiBU,kBGzP/BmE,SACVA,EAA0B,GAE1BC,EAAM,CACRC,mJACMC,EAAMD,8CACVD,EAAI3C,KAAI,kBAAM8C,qBAAqBD,SAGrCE,gDAAa3S,2BAAAA,kBACXuS,EAAIC,uBAAsB,WACxBD,EAAIC,4BAAJD,EAA6BvS,OAIjC4S,wIACMC,EAAQD,mCACZL,EAAI3C,KAAI,kBAAMkD,aAAaD,SAG7BjD,aAAImD,GACFT,EAAYU,KAAKD,IAGnBE,iCACsBX,EAAYY,OAAO,oBACrCD,sBAKCV,WC3BOY,SAETC,EAAKzN,WAAS2M,cACnBlO,aAAU,kBAAM,kBAAMgP,EAAEH,aAAW,CAACG,IAC7BA,WCLOC,GAAeN,EAAaO,SAClB3N,WAASoN,GAA5BlT,OAAO0T,OACRC,EAAQrP,SAAO4O,UACnB5N,GAAoB,WAClBqO,EAAMnP,QAAU0O,IACf,CAACA,IACJ5N,GAAoB,kBAAMoO,EAASC,EAAMnP,YAAWmP,EAAOD,UAAaD,IACjEzT,WJcO4T,GACd1G,EACA2G,OAOIC,EAAQD,EAAUE,kBAClBD,EAAMlR,QAAU,EAAG,OAAO,SAE1BoR,EAAqBH,EAAUI,qBAC/BC,QAAcF,EAAAA,GAAuB,EAErCG,EAAmB,kBACbjH,EAAO/F,YACRnB,GAAM0B,aACFoM,EAAMM,WAAU,SAAAC,UAASR,EAAUS,gBAAgBD,WAEvDrO,GAAM4B,aACL2M,EAAMT,EACPU,QACAC,UACAL,WAAU,SAACC,EAAME,EAAKG,YACA,IAAjBR,GAAsBQ,EAAI9R,OAAS2R,EAAM,GAAKL,GAC1CL,EAAUS,gBAAgBD,cAEzB,IAATE,EAAmBA,EAChBT,EAAMlR,OAAS,EAAI2R,OAGvBvO,GAAM2B,YACFmM,EAAMM,WAAU,SAACC,EAAME,WACxBA,GAAOL,GACHL,EAAUS,gBAAgBD,YAGjCrO,GAAM6B,SACL0M,EAAMT,EACPU,QACAC,UACAL,WAAU,SAAAC,UAASR,EAAUS,gBAAgBD,aACnC,IAATE,EAAmBA,EAChBT,EAAMlR,OAAS,EAAI2R,OAGvBvO,GAAM2O,gBACFb,EAAMM,WAAU,SAAAC,UAAQR,EAAUe,UAAUP,KAAUnH,EAAOvH,WAEjEK,GAAM6O,eACF,cA3Ef,SAAqBpF,SACb,IAAIpP,MAAM,sBAAwBoP,GA6ElCqF,CAAY5H,IAvCK,UA2CK,IAArBiH,EAAyBH,EAAqBG,ED6KvDxC,GAAWI,OAASA,GACpBJ,GAAWY,MAAQA,GC5PnB,SAAYvM,GAEVA,qBAGAA,2BAGAA,mBAGAA,mBAGAA,2BAGAA,yBAjBF,CAAYA,KAAAA,QC8BZ,SAAK8L,GACHA,mBACAA,uBAFF,CAAKA,KAAAA,QAuBL,SAAKjF,GACHA,iCACAA,mCAEAA,iCAEAA,+BACAA,uBACAA,iCAEAA,uCACAA,2CAXF,CAAKA,KAAAA,QAyBL,IAAIG,YAMDH,GAAYkI,uBAActP,UACrBA,EAAM2M,UACN3M,EAAMuP,eAAiBlD,GAAcvD,OADd9I,OAEfA,GAAOwP,kBAAmB,KAAMD,aAAclD,GAAcvD,aAEzE1B,GAAYqI,sBAAazP,UACpBA,EAAM2M,UACN3M,EAAMuP,eAAiBlD,GAAcxD,KADd7I,OAEfA,GAAOuP,aAAclD,GAAcxD,WAEhDzB,GAAYsI,sBAAa1P,EAAOyH,UAC3BzH,EAAM2M,WAAalF,EAAOkF,SAAiB3M,OACnCA,GAAO2M,SAAUlF,EAAOkF,eAErCvF,GAAYuI,qBAAY3P,EAAOyH,MAC1BzH,EAAM2M,SAAU,OAAO3M,KACvBA,EAAMuP,eAAiBlD,GAAcvD,OAAQ,OAAO9I,MAEpDwP,EAAoBrB,GAAqB1G,EAAQ,CACnD6G,aAAc,kBAAMtO,EAAMsD,SAC1BkL,mBAAoB,kBAAMxO,EAAMwP,mBAChCL,UAAW,SAAAP,UAAQA,EAAK1O,IACxB2O,gBAAiB,SAAAD,UAAQA,EAAKgB,QAAQ7Q,QAAQ4N,kBAGtB,KAAtB3M,EAAM6P,aAAsB7P,EAAMwP,oBAAsBA,EAA0BxP,OAC1EA,GAAO6P,YAAa,GAAIL,kBAAAA,QAErCpI,GAAY0I,QAAS,SAAC9P,EAAOyH,MACxBzH,EAAM2M,SAAU,OAAO3M,KACvBA,EAAMuP,eAAiBlD,GAAcvD,OAAQ,OAAO9I,MAEpD6P,EAAc7P,EAAM6P,YAAcpI,EAAOlN,MACzCD,EAAQ0F,EAAMsD,QAAQqL,WACxB,SAAAoB,gBACGA,EAAOH,QAAQ7Q,QAAQ4N,oBACxBoD,EAAOH,QAAQ7Q,QAAQiR,kBAAvBC,EAAkCC,WAAWL,mBAGkB7P,GAApD,IAAX1F,GAAgBA,IAAU0F,EAAMwP,mBAAsCK,YAAAA,IACvDA,YAAAA,EAAaL,kBAAmBlV,QAEpD8M,GAAY+I,sBAAanQ,UACpBA,EAAM2M,UACN3M,EAAMuP,eAAiBlD,GAAcvD,QACf,KAAtB9I,EAAM6P,YAFiB7P,OAGfA,GAAO6P,YAAa,SAEjCzI,GAAYgJ,gBAAiB,SAACpQ,EAAOyH,eACjCzH,GACHsD,kBAAatD,EAAMsD,SAAS,CAAEpD,GAAIuH,EAAOvH,GAAI0P,QAASnI,EAAOmI,iBAE9DxI,GAAYiJ,kBAAmB,SAACrQ,EAAOyH,OAClC6I,EAActQ,EAAMsD,QAAQyL,QAC5BwB,EAC0B,OAA5BvQ,EAAMwP,kBAA6Bc,EAAYtQ,EAAMwP,mBAAqB,KAExEV,EAAMwB,EAAY3B,WAAU,SAAA6B,UAAKA,EAAEtQ,KAAOuH,EAAOvH,aAExC,IAAT4O,GAAYwB,EAAY1C,OAAOkB,EAAK,QAGnC9O,GACHsD,QAASgN,EACTd,kBACMV,IAAQ9O,EAAMwP,mBACU,OAAxBe,EADwC,KAKrCD,EAAY9N,QAAQ+N,UAM/BE,GAAiBpL,gBAA2D,MAGhF,SAASqL,GAAkBrS,OACrB0J,EAAUxC,aAAWkL,OACT,OAAZ1I,EAAkB,KAChBzK,EAAM,IAAI1C,UAAUyD,8BAAqCsS,GAAQnS,6BACjE5D,MAAMM,mBAAmBN,MAAMM,kBAAkBoC,EAAKoT,IACpDpT,SAEDyK,EAGT,SAASE,GAAajI,EAAwByH,UACrCnN,EAAMmN,EAAOS,KAAMX,GAAUvH,EAAOyH,GAb7CgJ,GAAelS,YAAc,iBAkB7B,IAAIqS,GAAsB1T,oBAMVyT,GACdvV,OAMMb,EAA2Da,EAA3Db,MAAOsW,EAAoDzV,EAApDyV,WAAoDzV,EAA1CuR,SAAAA,gBAAqB/P,IAAqBxB,mCAC7DgR,EAAarD,aAAWd,GAAc,CACxCsH,aAAclD,GAAcvD,OAC5BgI,SAAU,CAAE/R,QAAS,CAAExE,MAAAA,EAAOsW,SAAAA,IAC9BE,SAAUC,cACVzE,UAAWyE,cACXC,WAAYD,cACZrE,SAAAA,EACArJ,QAAS,GACTuM,YAAa,GACbL,kBAAmB,SAE+CpD,KAA7DmD,IAAAA,aAAcuB,IAAAA,SAAUG,IAAAA,WAAY1E,IAAAA,UAAavD,EAAYoD,KAEpEvM,GAAoB,WAClBiR,EAAS/R,QAAQxE,MAAQA,IACxB,CAACA,EAAOuW,IACXjR,GAAoB,WAClBiR,EAAS/R,QAAQ8R,SAAWA,IAC3B,CAACA,EAAUC,IACdjR,GAAoB,kBAAMmJ,EAAS,CAAEd,KAAMd,GAAYsI,YAAa/C,SAAAA,MAAa,CAACA,IAGlF7N,aAAU,oBACCkF,EAAQlG,aACXwG,EAASxG,EAAMwG,OAEfiL,IAAiBlD,GAAcxD,iBAE/B0D,EAAUxN,gBAAVmS,EAAmBhO,SAASoB,eAC5B2M,EAAWlS,gBAAXoS,EAAoBjO,SAASoB,MAEjC0E,EAAS,CAAEd,KAAMd,GAAYkI,eAExBnO,EAAmBmD,EAAQ5D,EAAca,SAC5CzD,EAAMqG,0BACNoI,EAAUxN,YAAS2C,kBAIvB5B,OAAOiE,iBAAiB,YAAaC,GAC9B,kBAAMlE,OAAOmE,oBAAoB,YAAaD,MACpD,CAACuL,EAAchD,EAAW0E,EAAYjI,QAErC3N,EAAWwP,WACb,iBAAO,CAAExC,KAAMkH,IAAiBlD,GAAcxD,KAAM8D,SAAAA,KACpD,CAAC4C,EAAc5C,WAIf/G,gBAAC6K,GAAe5K,UAAStL,MAAO6R,GAC7BjR,EAAOyB,EAAkBvB,EAAUuV,KAO1C,OI5NKQ,GAgBAhK,GJ4NDkF,GAASlO,GAAiB,SAASkO,EACrClR,EACA2B,WAEwB2T,GAAkB,CAACC,GAAQnS,KAAM8N,EAAO9N,MAAMvD,KAAK,MAAtE+E,OAAOgJ,OACRuD,EAAY7N,EAAYsB,EAAMuM,UAAWxP,GAEzCmD,+BAAkCE,IAClC0N,EAAID,KAEJrB,EAAgBxN,eAClB,SAAClB,UACSA,EAAM9C,UAGPX,EAAKoS,WACLpS,EAAKqS,WACLrS,EAAKgX,UACRvT,EAAMqG,iBACN6E,EAAS,CAAEd,KAAMd,GAAYqI,cAC7B3B,EAAET,WAAU,WACLrN,EAAM8Q,SAAS/R,QAAQxE,OAC1ByO,EAAS,CAAEd,KAAMd,GAAYuI,WAAYjO,MAAOnB,GAAM0B,sBAIvD5H,EAAKiX,QACRxT,EAAMqG,iBACN6E,EAAS,CAAEd,KAAMd,GAAYqI,cAC7B3B,EAAET,WAAU,WACLrN,EAAM8Q,SAAS/R,QAAQxE,OAC1ByO,EAAS,CAAEd,KAAMd,GAAYuI,WAAYjO,MAAOnB,GAAM6B,aAKhE,CAAC4G,EAAUhJ,EAAO8N,IAGhB5C,EAAclM,eAChB,SAAClB,MACKmB,EAAyBnB,EAAMqN,eAAgB,OAAOrN,EAAMqG,iBAC5DnE,EAAMuP,eAAiBlD,GAAcxD,MACvCG,EAAS,CAAEd,KAAMd,GAAYkI,eAC7BxB,EAAET,WAAU,iCAAMrN,EAAMuM,UAAUxN,gBAAhBwS,EAAyB7P,MAAM,CAAEC,eAAe,SAElE7D,EAAMqG,iBACN6E,EAAS,CAAEd,KAAMd,GAAYqI,iBAGjC,CAACzG,EAAU8E,EAAG9N,IAGZwR,EAAazD,IAAY,cACtB/N,EAAM+Q,SAAShS,cACb,CAACiB,EAAM+Q,SAAShS,QAAQmB,GAAIA,GAAIjF,KAAK,OAC3C,CAAC+E,EAAM+Q,SAAShS,QAASmB,IAExB7E,EAAWwP,WACb,iBAAO,CAAExC,KAAMrI,EAAMuP,eAAiBlD,GAAcxD,KAAM8D,SAAU3M,EAAM2M,YAC1E,CAAC3M,WAgBI7E,OAdgBC,EACF,CACnB2B,IAAKwP,EACLrM,GAAAA,EACAgI,KAAM,0BACW,2BACAlI,EAAMiR,WAAWlS,gBAAjB0S,EAA0BvR,mBAC1BF,EAAMuP,eAAiBlD,GAAcxD,WAAc/L,oBACjD0U,EACnB7E,SAAU3M,EAAM2M,SAChBC,UAAWJ,EACXpB,QAASF,IAG+C7P,EA5FnC,aAwIrBqW,GAAwBvX,EAASC,eAAiBD,EAASyB,OAE3D+V,GAAUvT,GAAiB,SAASuT,EAGtCvW,EAEA2B,WAEwB2T,GAAkB,CAACC,GAAQnS,KAAMmT,EAAQnT,MAAMvD,KAAK,MAAvE+E,OAAOgJ,OACRiI,EAAavS,EAAYsB,EAAMiR,WAAYlU,GAE3CmD,gCAAmCE,IACnC0N,EAAID,KACJ+D,EAAoB/D,KAExBhO,GAAoB,eACdiB,EAAYd,EAAMiR,WAAWlS,QAC5B+B,GACDd,EAAMuP,eAAiBlD,GAAcxD,MACrC/H,IAAcC,SAASgB,eAE3BjB,EAAUY,MAAM,CAAEC,eAAe,MAChC,CAAC3B,EAAMuP,aAAcvP,EAAMiR,iBAE1BzE,EAAgBxN,eAClB,SAAClB,UACC8T,EAAkBjE,UAEV7P,EAAM9C,UAIPX,EAAKoS,SACkB,KAAtBzM,EAAM6P,mBACR/R,EAAMqG,iBACNrG,EAAM0G,kBACCwE,EAAS,CAAEd,KAAMd,GAAY0I,OAAQvV,MAAOuD,EAAM9C,WAGxDX,EAAKqS,MACR5O,EAAMqG,iBACNrG,EAAM0G,kBACNwE,EAAS,CAAEd,KAAMd,GAAYkI,eACG,OAA5BtP,EAAMwP,mBAERxP,EAAM8Q,SAAS/R,QAAQ8R,SADL7Q,EAAMsD,QAAQtD,EAAMwP,mBAAhCI,QACkC7Q,QAAQxE,OAElDyS,KAAcK,WAAU,iCAAMrN,EAAMuM,UAAUxN,gBAAhB8S,EAAyBnQ,MAAM,CAAEC,eAAe,kBAG3EtH,EAAKgX,iBACRvT,EAAMqG,iBACNrG,EAAM0G,kBACCwE,EAAS,CAAEd,KAAMd,GAAYuI,WAAYjO,MAAOnB,GAAM2B,YAE1D7H,EAAKiX,eACRxT,EAAMqG,iBACNrG,EAAM0G,kBACCwE,EAAS,CAAEd,KAAMd,GAAYuI,WAAYjO,MAAOnB,GAAM4B,gBAE1D9H,EAAKyX,UACLzX,EAAK0X,cACRjU,EAAMqG,iBACNrG,EAAM0G,kBACCwE,EAAS,CAAEd,KAAMd,GAAYuI,WAAYjO,MAAOnB,GAAM0B,aAE1D5H,EAAK2X,SACL3X,EAAK4X,gBACRnU,EAAMqG,iBACNrG,EAAM0G,kBACCwE,EAAS,CAAEd,KAAMd,GAAYuI,WAAYjO,MAAOnB,GAAM6B,YAE1D/H,EAAK+O,cACRtL,EAAMqG,iBACNrG,EAAM0G,kBACNwE,EAAS,CAAEd,KAAMd,GAAYkI,eACtBxB,EAAET,WAAU,iCAAMrN,EAAMuM,UAAUxN,gBAAhBmT,EAAyBxQ,MAAM,CAAEC,eAAe,YAEtEtH,EAAK6J,IACRpG,EAAMqG,iBACNrG,EAAM0G,gCAImB,IAArB1G,EAAM9C,IAAImC,SACZ6L,EAAS,CAAEd,KAAMd,GAAY0I,OAAQvV,MAAOuD,EAAM9C,MAClD4W,EAAkBtE,YAAW,kBAAMtE,EAAS,CAAEd,KAAMd,GAAY+I,gBAAgB,SAKxF,CAACrC,EAAG9E,EAAU4I,EAAmB5R,IAG/BwR,EAAazD,IAAY,8CAAM/N,EAAM+Q,SAAShS,gBAAfoT,EAAwBjS,eAAMF,EAAMuM,UAAUxN,gBAAhBqT,EAAyBlS,KAAI,CAC5FF,EAAM+Q,SAAShS,QACfiB,EAAMuM,UAAUxN,UAGd1D,EAAWwP,WACb,iBAAO,CAAExC,KAAMrI,EAAMuP,eAAiBlD,GAAcxD,QACpD,CAAC7I,WAcI7E,OAFgBC,EAVF,yBAEW,OAA5B4E,EAAMwP,4BAAyCxP,EAAMsD,QAAQtD,EAAMwP,yBAAhC1S,EAAYuV,EAAwCnS,qBACtEsR,EACnBtR,GAAAA,EACA0M,UAAWJ,EACXzB,KAAM,UACNuH,SAAU,EACVvV,IAAKkU,IAML5V,EAlIsB,KAoItBqW,GACA1R,EAAMuP,eAAiBlD,GAAcxD,SA+HzC8H,GAAQrE,OAASA,GACjBqE,GAAQ4B,MAzRR,SAASA,EACPnX,OAEK4E,EAAS0Q,GAAkB,CAACC,GAAQnS,KAAM+T,EAAM/T,MAAMvD,KAAK,SAC5DiF,8BAAiCE,IAEjC8K,EAAclM,eAAY,iCAAMgB,EAAMuM,UAAUxN,gBAAhByT,EAAyB9Q,MAAM,CAAEC,eAAe,MAAS,CAC3F3B,EAAMuM,YAGJlR,EAAWwP,WACb,iBAAO,CAAExC,KAAMrI,EAAMuP,eAAiBlD,GAAcxD,KAAM8D,SAAU3M,EAAM2M,YAC1E,CAAC3M,WAGI7E,OAAYC,EADE,CAAE2B,IAAKiD,EAAM+Q,SAAU7Q,GAAAA,EAAIkL,QAASF,IACV7P,EAtBzB,UAiSxBsV,GAAQgB,QAAUA,GAClBhB,GAAQ8B,OA1GR,SAASA,EAMPrX,SAKuDA,EAAjDuR,SAAAA,gBAAkBpS,EAA+Ba,EAA/Bb,MAAU4L,IAAqB/K,0BAC/BsV,GAAkB,CAACC,GAAQnS,KAAMiU,EAAOjU,MAAMvD,KAAK,MAAtE+E,OAAOgJ,OACR9I,+BAAkCE,IAClC0B,EAC0B,OAA5B9B,EAAMwP,mBAA6BxP,EAAMsD,QAAQtD,EAAMwP,mBAAmBtP,KAAOA,EAC/EwS,EAAW1S,EAAM8Q,SAAS/R,QAAQxE,QAAUA,EAE5C8B,EAAMwC,SAAwC,CAAE8N,SAAAA,EAAUpS,MAAAA,IAE9DsF,GAAoB,WAClBxD,EAAI0C,QAAQ4N,SAAWA,IACtB,CAACtQ,EAAKsQ,IACT9M,GAAoB,WAClBxD,EAAI0C,QAAQxE,MAAQA,IACnB,CAAC8B,EAAK9B,IACTsF,GAAoB,mBAClBxD,EAAI0C,QAAQiR,mBAAYjP,SAASyF,eAAetG,cAAxByS,EAA6BC,oBAA7BC,EAA0CC,gBACjE,CAACzW,EAAK6D,QAEL6S,EAAS/T,eAAY,kBAAMgB,EAAM8Q,SAAS/R,QAAQ8R,SAAStW,KAAQ,CAACyF,EAAM8Q,SAAUvW,IAExFsF,GAAoB,kBAClBmJ,EAAS,CAAEd,KAAMd,GAAYgJ,eAAgBlQ,GAAAA,EAAI0P,QAASvT,IACnD,kBAAM2M,EAAS,CAAEd,KAAMd,GAAYiJ,iBAAkBnQ,GAAAA,OAC3D,CAAC7D,EAAK6D,IAETL,GAAoB,iBACdG,EAAMuP,eAAiBlD,GAAcxD,MACpC6J,IACL1J,EAAS,CAAEd,KAAMd,GAAYuI,WAAYjO,MAAOnB,GAAM2O,SAAUhP,GAAAA,aAChEa,SAASyF,eAAetG,aAAKwB,SAAAA,WAC5B,CAAC1B,EAAMuP,eAEV1P,GAAoB,cACdG,EAAMuP,eAAiBlD,GAAcxD,MACpC/G,OACDgM,EAAId,YACRc,EAAET,WAAU,iCAAMtM,SAASyF,eAAetG,WAAxB8S,EAA6BC,sBAA7BD,EAA6BC,eAAiB,CAAEC,MAAO,eAClEpF,EAAEH,WACR,CAACzN,EAAI4B,EAAQ9B,EAAMuP,mBAElBrE,EAAclM,eAChB,SAAClB,MACK6O,EAAU,OAAO7O,EAAMqG,iBAC3B4O,IACA/J,EAAS,CAAEd,KAAMd,GAAYkI,eAC7BtC,KAAcK,WAAU,iCAAMrN,EAAMuM,UAAUxN,gBAAhBoU,EAAyBzR,MAAM,CAAEC,eAAe,SAEhF,CAACqH,EAAUhJ,EAAMuM,UAAWI,EAAUoG,IAGpCK,EAAcpU,eAAY,cACxB2N,EAAU,OAAO3D,EAAS,CAAEd,KAAMd,GAAYuI,WAAYjO,MAAOnB,GAAM6O,UAC3EpG,EAAS,CAAEd,KAAMd,GAAYuI,WAAYjO,MAAOnB,GAAM2O,SAAUhP,GAAAA,MAC/D,CAACyM,EAAUzM,EAAI8I,IAEdqK,EAAarU,eAAY,WACvB2N,GACA7K,GACJkH,EAAS,CAAEd,KAAMd,GAAYuI,WAAYjO,MAAOnB,GAAM2O,SAAUhP,GAAAA,MAC/D,CAACyM,EAAU7K,EAAQ5B,EAAI8I,IAEtBsK,EAActU,eAAY,WACxB2N,GACC7K,GACLkH,EAAS,CAAEd,KAAMd,GAAYuI,WAAYjO,MAAOnB,GAAM6O,YACrD,CAACzC,EAAU7K,EAAQkH,IAElB3N,EAAWwP,WAA6B,iBAAO,CAAE/I,OAAAA,EAAQ4Q,SAAAA,EAAU/F,SAAAA,KAAa,CAClF7K,EACA4Q,EACA/F,WAgBKxR,OAAYgL,EAdE,CACnBjG,GAAAA,EACA6K,KAAM,SACNuH,UAAW,mBACmB,IAAb3F,QAA2B7P,mBACd,IAAb4V,QAA2B5V,EAC5CsO,QAASF,EACTqI,QAASH,EACTI,cAAeH,EACfI,YAAaJ,EACbK,eAAgBJ,EAChBK,aAAcL,IAG0CjY,EApHnC,OInezB,SAAK+V,GACHA,mBACAA,uBAFF,CAAKA,KAAAA,QAgBL,SAAKhK,GACHA,2BACAA,6BAEAA,2BACAA,uBACAA,iCACAA,mCACAA,uCARF,CAAKA,KAAAA,QAqBL,IAAIG,YAMDH,GAAYwM,oBAAW5T,UAClBA,EAAM6T,YAAczC,GAAWtI,OAAe9I,OACtCA,GAAO8T,gBAAiB,KAAMD,UAAWzC,GAAWtI,aAEjE1B,GAAY2M,mBAAU/T,UACjBA,EAAM6T,YAAczC,GAAWvI,KAAa7I,OACpCA,GAAO6T,UAAWzC,GAAWvI,WAE1CzB,GAAY4M,UAAW,SAAChU,EAAOyH,OAC1BqM,EAAkB3F,GAAqB1G,EAAQ,CACjD6G,aAAc,kBAAMtO,EAAMqO,OAC1BG,mBAAoB,kBAAMxO,EAAM8T,iBAChC3E,UAAW,SAAAP,UAAQA,EAAK1O,IACxB2O,gBAAiB,SAAAD,UAAQA,EAAKgB,QAAQ7Q,QAAQ4N,kBAGtB,KAAtB3M,EAAM6P,aAAsB7P,EAAM8T,kBAAoBA,EAAwB9T,OACtEA,GAAO6P,YAAa,GAAIiE,gBAAAA,QAErC1M,GAAY0I,QAAS,SAAC9P,EAAOyH,OACxBoI,EAAc7P,EAAM6P,YAAcpI,EAAOlN,MACzCD,EAAQ0F,EAAMqO,MAAMM,WACtB,SAAAC,yBACEA,EAAKgB,QAAQ7Q,QAAQiR,oBAAWE,WAAWL,MAAiBjB,EAAKgB,QAAQ7Q,QAAQ4N,wBAGpB3M,GAAlD,IAAX1F,GAAgBA,IAAU0F,EAAM8T,iBAAoCjE,YAAAA,IACrDA,YAAAA,EAAaiE,gBAAiBxZ,QAElD8M,GAAY+I,sBAAanQ,SACE,KAAtBA,EAAM6P,YAA2B7P,OACzBA,GAAO6P,YAAa,SAEjCzI,GAAY6M,cAAe,SAACjU,EAAOyH,eAC/BzH,GACHqO,gBAAWrO,EAAMqO,OAAO,CAAEnO,GAAIuH,EAAOvH,GAAI0P,QAASnI,EAAOmI,iBAE1DxI,GAAY8M,gBAAiB,SAAClU,EAAOyH,OAChC0M,EAAYnU,EAAMqO,MAAMU,QACxBqF,EAA8C,OAA1BpU,EAAM8T,gBAA2BK,EAAUnU,EAAM8T,iBAAmB,KAExFhF,EAAMqF,EAAUxF,WAAU,SAAA6B,UAAKA,EAAEtQ,KAAOuH,EAAOvH,aAEtC,IAAT4O,GAAYqF,EAAUvG,OAAOkB,EAAK,QAGjC9O,GACHqO,MAAO8F,EACPL,gBACMhF,IAAQ9O,EAAM8T,iBACQ,OAAtBM,EADsC,KAKnCD,EAAU3R,QAAQ4R,UAM7BC,GAAchP,gBAA2D,MAG7E,SAASiP,GAAejW,OAClB0J,EAAUxC,aAAW8O,OACT,OAAZtM,EAAkB,KAChBzK,EAAM,IAAI1C,UAAUyD,8BAAqCkW,GAAK/V,6BAC9D5D,MAAMM,mBAAmBN,MAAMM,kBAAkBoC,EAAKgX,IACpDhX,SAEDyK,EAGT,SAASE,GAAajI,EAAwByH,UACrCnN,EAAMmN,EAAOS,KAAMX,GAAUvH,EAAOyH,GAb7C4M,GAAY9V,YAAc,cAkB1B,IAAIiW,GAAmBtX,oBAKPqX,GACdnZ,OAEIgR,EAAarD,aAAWd,GAAc,CACxC4L,UAAWzC,GAAWtI,OACtByD,UAAWyE,cACXyD,SAAUzD,cACV3C,MAAO,GACPwB,YAAa,GACbiE,gBAAiB,SAEkC1H,KAA9CyH,IAAAA,UAAWY,IAAAA,SAAUlI,IAAAA,UAAavD,EAAYoD,KAGrDtN,aAAU,oBACCkF,EAAQlG,aACXwG,EAASxG,EAAMwG,OAEfuP,IAAczC,GAAWvI,iBAEzB0D,EAAUxN,gBAAVmS,EAAmBhO,SAASoB,eAC5BmQ,EAAS1V,gBAAT2V,EAAkBxR,SAASoB,MAE/B0E,EAAS,CAAEd,KAAMd,GAAYwM,YAExBzS,EAAmBmD,EAAQ5D,EAAca,SAC5CzD,EAAMqG,0BACNoI,EAAUxN,YAAS2C,kBAIvB5B,OAAOiE,iBAAiB,YAAaC,GAC9B,kBAAMlE,OAAOmE,oBAAoB,YAAaD,MACpD,CAAC6P,EAAWtH,EAAWkI,EAAUzL,QAEhC3N,EAAWwP,WAA2B,iBAAO,CAAExC,KAAMwL,IAAczC,GAAWvI,QAAS,CACzFgL,WAIAjO,gBAACyO,GAAYxO,UAAStL,MAAO6R,GAC1BjR,EAAOC,EAAOC,EAAUmZ,KAO/B,OC9KKG,GAcAvN,GD6KDkF,GAASlO,GAAiB,SAASkO,EACrClR,EACA2B,WAEwBuX,GAAe,CAACC,GAAK/V,KAAM8N,EAAO9N,MAAMvD,KAAK,MAAhE+E,OAAOgJ,OACRuD,EAAY7N,EAAYsB,EAAMuM,UAAWxP,GAEzCmD,4BAA+BE,IAC/B0N,EAAID,KAEJrB,EAAgBxN,eAClB,SAAClB,UACSA,EAAM9C,UAGPX,EAAKoS,WACLpS,EAAKqS,WACLrS,EAAKgX,UACRvT,EAAMqG,iBACNrG,EAAM0G,kBACNwE,EAAS,CAAEd,KAAMd,GAAY2M,WAC7BjG,EAAET,WAAU,kBAAMrE,EAAS,CAAEd,KAAMd,GAAY4M,SAAUtS,MAAOnB,GAAM0B,sBAGnE5H,EAAKiX,QACRxT,EAAMqG,iBACNrG,EAAM0G,kBACNwE,EAAS,CAAEd,KAAMd,GAAY2M,WAC7BjG,EAAET,WAAU,kBAAMrE,EAAS,CAAEd,KAAMd,GAAY4M,SAAUtS,MAAOnB,GAAM6B,aAI5E,CAAC4G,EAAU8E,IAGT5C,EAAclM,eAChB,SAAClB,MACKmB,EAAyBnB,EAAMqN,eAAgB,OAAOrN,EAAMqG,iBAC5D/I,EAAMuR,WACN3M,EAAM6T,YAAczC,GAAWvI,MACjCG,EAAS,CAAEd,KAAMd,GAAYwM,YAC7B9F,EAAET,WAAU,iCAAMrN,EAAMuM,UAAUxN,gBAAhBwS,EAAyB7P,MAAM,CAAEC,eAAe,SAElE7D,EAAMqG,iBACNrG,EAAM0G,kBACNwE,EAAS,CAAEd,KAAMd,GAAY2M,eAGjC,CAAC/K,EAAU8E,EAAG9N,EAAO5E,EAAMuR,WAGzBtR,EAAWwP,WACb,iBAAO,CAAExC,KAAMrI,EAAM6T,YAAczC,GAAWvI,QAC9C,CAAC7I,WAcI7E,OAZgBC,EACF,CACnB2B,IAAKwP,EACLrM,GAAAA,EACAgI,KAAM,0BACW,2BACAlI,EAAMyU,SAAS1V,gBAAf6V,EAAwB1U,mBACxBF,EAAM6T,YAAczC,GAAWvI,WAAc/L,EAC9D8P,UAAWJ,EACXpB,QAASF,IAG+C7P,EAhFnC,aAiGrBwZ,GAAsB1a,EAASC,eAAiBD,EAASyB,OAEzDkZ,GAAQ1W,GAAiB,SAAS0W,EACpC1Z,EAEA2B,aAEwBuX,GAAe,CAACC,GAAK/V,KAAMsW,EAAMtW,MAAMvD,KAAK,MAA/D+E,OAAOgJ,OACRyL,EAAW/V,EAAYsB,EAAMyU,SAAU1X,GAEvCmD,2BAA8BE,IAC9BwR,EAAoB/D,KAExB/O,aAAU,eACJgC,EAAYd,EAAMyU,SAAS1V,QAC1B+B,GACDd,EAAM6T,YAAczC,GAAWvI,MAC/B/H,IAAcC,SAASgB,eAE3BjB,EAAUY,MAAM,CAAEC,eAAe,MAChC,CAAC3B,EAAM6T,UAAW7T,EAAMyU,WAE3B5U,GAAoB,eACdiB,EAAYd,EAAMyU,SAAS1V,WAC1B+B,GACDd,EAAM6T,YAAczC,GAAWvI,aAE/BkM,EAAShU,SAASiU,iBAAiBlU,EAAWmU,WAAWC,aAAc,CACzEC,oBAAWC,SACyB,aAA9BA,EAAK3V,aAAa,QAA+BwV,WAAWI,cAC5DD,EAAKE,aAAa,QAAgBL,WAAWM,YAC1CN,WAAWO,iBAIfT,EAAOU,YACVV,EAAOW,YAA4B5Q,aAAa,OAAQ,UAE3D,CAAC9E,EAAM6T,UAAW7T,EAAMyU,eAEvBjI,EAAgBxN,eAClB,SAAClB,UACC8T,EAAkBjE,UAEV7P,EAAM9C,UAIPX,EAAKoS,SACkB,KAAtBzM,EAAM6P,mBACR/R,EAAMqG,iBACNrG,EAAM0G,kBACCwE,EAAS,CAAEd,KAAMd,GAAY0I,OAAQvV,MAAOuD,EAAM9C,WAGxDX,EAAKqS,YACR5O,EAAMqG,iBACNrG,EAAM0G,kBACNwE,EAAS,CAAEd,KAAMd,GAAYwM,YACC,OAA1B5T,EAAM8T,2BAER/S,SAASyF,eADIxG,EAAMqO,MAAMrO,EAAM8T,iBAAzB5T,QACuByV,SAE/B3I,KAAcK,WAAU,iCAAMrN,EAAMuM,UAAUxN,gBAAhByT,EAAyB9Q,MAAM,CAAEC,eAAe,kBAG3EtH,EAAKgX,iBACRvT,EAAMqG,iBACNrG,EAAM0G,kBACCwE,EAAS,CAAEd,KAAMd,GAAY4M,SAAUtS,MAAOnB,GAAM2B,YAExD7H,EAAKiX,eACRxT,EAAMqG,iBACNrG,EAAM0G,kBACCwE,EAAS,CAAEd,KAAMd,GAAY4M,SAAUtS,MAAOnB,GAAM4B,gBAExD9H,EAAKyX,UACLzX,EAAK0X,cACRjU,EAAMqG,iBACNrG,EAAM0G,kBACCwE,EAAS,CAAEd,KAAMd,GAAY4M,SAAUtS,MAAOnB,GAAM0B,aAExD5H,EAAK2X,SACL3X,EAAK4X,gBACRnU,EAAMqG,iBACNrG,EAAM0G,kBACCwE,EAAS,CAAEd,KAAMd,GAAY4M,SAAUtS,MAAOnB,GAAM6B,YAExD/H,EAAK+O,OACRtL,EAAMqG,iBACNrG,EAAM0G,kBACNwE,EAAS,CAAEd,KAAMd,GAAYwM,YAC7B5G,KAAcK,WAAU,iCAAMrN,EAAMuM,UAAUxN,gBAAhB8S,EAAyBnQ,MAAM,CAAEC,eAAe,kBAG3EtH,EAAK6J,IACRpG,EAAMqG,iBACNrG,EAAM0G,gCAImB,IAArB1G,EAAM9C,IAAImC,SACZ6L,EAAS,CAAEd,KAAMd,GAAY0I,OAAQvV,MAAOuD,EAAM9C,MAClD4W,EAAkBtE,YAAW,kBAAMtE,EAAS,CAAEd,KAAMd,GAAY+I,gBAAgB,SAKxF,CAACnH,EAAU4I,EAAmB5R,IAG5B3E,EAAWwP,WACb,iBAAO,CAAExC,KAAMrI,EAAM6T,YAAczC,GAAWvI,QAC9C,CAAC7I,WAcI7E,OAFgBC,EAVF,yBAES,OAA1B4E,EAAM8T,0BAAuC9T,EAAMqO,MAAMrO,EAAM8T,uBAA9BhX,EAAY8Y,EAAoC1V,8BAChEF,EAAMuM,UAAUxN,gBAAhBmT,EAAyBhS,GAC5CA,GAAAA,EACA0M,UAAWJ,EACXzB,KAAM,OACNuH,SAAU,EACVvV,IAAK0X,IAMLpZ,EA7IoB,MA+IpBwZ,GACA7U,EAAM6T,YAAczC,GAAWvI,SAM/BgN,GAAmB3Y,WAgGvBqX,GAAKjI,OAASA,GACdiI,GAAKO,MAAQA,GACbP,GAAKuB,KAlFL,SAASA,EACP1a,SAKyDA,EAAnDuR,SAAAA,gBAAkBvB,EAAiChQ,EAAjCgQ,QAAYjF,IAAqB/K,4BACjCkZ,GAAe,CAACC,GAAK/V,KAAMsX,EAAKtX,MAAMvD,KAAK,MAA9D+E,OAAOgJ,OACR9I,0BAA6BE,IAC7B0B,EAAmC,OAA1B9B,EAAM8T,iBAA2B9T,EAAMqO,MAAMrO,EAAM8T,iBAAiB5T,KAAOA,EAExFL,GAAoB,cACdG,EAAM6T,YAAczC,GAAWvI,MAC9B/G,OACDgM,EAAId,YACRc,EAAET,WAAU,iCAAMtM,SAASyF,eAAetG,WAAxB2S,EAA6BI,sBAA7BJ,EAA6BI,eAAiB,CAAEC,MAAO,eAClEpF,EAAEH,WACR,CAACzN,EAAI4B,EAAQ9B,EAAM6T,gBAElBxX,EAAMwC,SAAmC,CAAE8N,SAAAA,IAE/C9M,GAAoB,WAClBxD,EAAI0C,QAAQ4N,SAAWA,IACtB,CAACtQ,EAAKsQ,IAET9M,GAAoB,mBAClBxD,EAAI0C,QAAQiR,mBAAYjP,SAASyF,eAAetG,cAAxB6V,EAA6BnD,oBAA7BI,EAA0CF,gBACjE,CAACzW,EAAK6D,IAETL,GAAoB,kBAClBmJ,EAAS,CAAEd,KAAMd,GAAY6M,aAAc/T,GAAAA,EAAI0P,QAASvT,IACjD,kBAAM2M,EAAS,CAAEd,KAAMd,GAAY8M,eAAgBhU,GAAAA,OACzD,CAAC7D,EAAK6D,QAELgL,EAAclM,eAChB,SAAClB,UACK6O,EAAiB7O,EAAMqG,kBAC3B6E,EAAS,CAAEd,KAAMd,GAAYwM,YAC7B5G,KAAcK,WAAU,iCAAMrN,EAAMuM,UAAUxN,gBAAhBqT,EAAyB1Q,MAAM,CAAEC,eAAe,OAC1EyJ,EAAgBA,EAAQtN,aAE9B,CAACkL,EAAUhJ,EAAMuM,UAAWI,EAAUvB,IAGpCgI,EAAcpU,eAAY,cACxB2N,EAAU,OAAO3D,EAAS,CAAEd,KAAMd,GAAY4M,SAAUtS,MAAOnB,GAAM6O,UACzEpG,EAAS,CAAEd,KAAMd,GAAY4M,SAAUtS,MAAOnB,GAAM2O,SAAUhP,GAAAA,MAC7D,CAACyM,EAAUzM,EAAI8I,IAEdqK,EAAarU,eAAY,WACvB2N,GACA7K,GACJkH,EAAS,CAAEd,KAAMd,GAAY4M,SAAUtS,MAAOnB,GAAM2O,SAAUhP,GAAAA,MAC7D,CAACyM,EAAU7K,EAAQ5B,EAAI8I,IAEtBsK,EAActU,eAAY,WACxB2N,GACC7K,GACLkH,EAAS,CAAEd,KAAMd,GAAY4M,SAAUtS,MAAOnB,GAAM6O,YACnD,CAACzC,EAAU7K,EAAQkH,IAElB3N,EAAWwP,WAA2B,iBAAO,CAAE/I,OAAAA,EAAQ6K,SAAAA,KAAa,CAAC7K,EAAQ6K,WAc1ExR,OAAYgL,EAbE,CACnBjG,GAAAA,EACA6K,KAAM,WACNuH,UAAW,mBACmB,IAAb3F,QAA2B7P,EAC5CsO,QAASF,EACTqI,QAASH,EACTI,cAAeH,EACfI,YAAaJ,EACbK,eAAgBJ,EAChBK,aAAcL,IAG0CjY,EAAUwa,KCpftE,SAAKlB,GACHA,mBACAA,uBAFF,CAAKA,KAAAA,QAcL,SAAKvN,GACHA,qCACAA,mCAEAA,6BACAA,iCACAA,2BACAA,+BAPF,CAAKA,KAAAA,QAkBL,IAAIG,YAMDH,GAAY4O,eAAgB,SAAAhW,qBACxBA,GACHiW,aAAc3b,EAAM0F,EAAMiW,qBACvBtB,GAAc9L,MAAO8L,GAAc7L,SACnC6L,GAAc7L,QAAS6L,GAAc9L,eAGzCzB,GAAY8O,uBAAclW,UACrBA,EAAMiW,eAAiBtB,GAAc7L,OAAe9I,OAC5CA,GAAOiW,aAActB,GAAc7L,aAEhD1B,GAAY+O,oBAAWnW,EAAOyH,UACzBzH,EAAMoW,SAAW3O,EAAO2O,OAAepW,OAC/BA,GAAOoW,OAAQ3O,EAAO2O,aAEnChP,GAAYwE,sBAAa5L,EAAOyH,UAC3BzH,EAAM6L,WAAapE,EAAOoE,SAAiB7L,OACnCA,GAAO6L,SAAUpE,EAAOoE,eAErCzE,GAAYiP,mBAAUrW,EAAOyH,UACxBzH,EAAMsW,QAAU7O,EAAO6O,MAActW,OAC7BA,GAAOsW,MAAO7O,EAAO6O,YAElClP,GAAY0E,qBAAY9L,EAAOyH,UAC1BzH,EAAM+L,UAAYtE,EAAOsE,QAAgB/L,OACjCA,GAAO+L,QAAStE,EAAOsE,eAInCwK,GAAiBlR,gBAA2D,MAGhF,SAASmR,GAAkBnY,OACrB0J,EAAUxC,aAAWgR,OACT,OAAZxO,EAAkB,KAChBzK,EAAM,IAAI1C,UAAUyD,8BAAqCoY,GAAQjY,6BACjE5D,MAAMM,mBAAmBN,MAAMM,kBAAkBoC,EAAKkZ,IACpDlZ,SAEDyK,EATTwO,GAAehY,YAAc,iBAY7B,IAAImY,GAAsBrR,gBAKhB,MAGV,SAASsR,YACApR,aAAWmR,IAHpBA,GAAoBnY,YAAc,sBAMlC,IAAIqY,GAAsBvR,gBAA6B,MAYvD,SAAS4C,GAAajI,EAAwByH,UACrCnN,EAAMmN,EAAOS,KAAMX,GAAUvH,EAAOyH,YAU7BgP,GACdrb,OAEIyQ,+BAAwCzL,IACxC2L,8BAAsC3L,IAEtCgM,EAAarD,aAAWd,GAAc,CACxCgO,aAActB,GAAc7L,OAC5B4C,aAAa,EACb0K,OAAQ,KACRvK,SAAAA,EACAyK,MAAO,KACPvK,QAAAA,MAEgDK,KAA3C6J,IAAAA,aAAcG,IAAAA,OAAQE,IAAAA,MAAStN,EAAYoD,KAElDtN,aAAU,kBAAMkK,EAAS,CAAEd,KAAMd,GAAYwE,YAAaC,SAAAA,MAAa,CAACA,EAAU7C,IAClFlK,aAAU,kBAAMkK,EAAS,CAAEd,KAAMd,GAAY0E,WAAYC,QAAAA,MAAY,CAACA,EAAS/C,QAE3E6N,EAAchM,WAChB,iBAAO,CAAEgB,SAAAA,EAAUE,QAAAA,EAAS9C,MAAO,kBAAMD,EAAS,CAAEd,KAAMd,GAAY8O,mBACtE,CAACrK,EAAUE,EAAS/C,IAGlB8N,EAAeH,KACfI,QAAkBD,SAAAA,EAAcC,gBAChCC,EAA4BhY,eAAY,uCAExC8X,SAAAA,EAAcE,sCACbZ,SAAAA,EAAQlT,SAASnC,SAASgB,wBAAkBuU,SAAAA,EAAOpT,SAASnC,SAASgB,kBAEvE,CAAC+U,EAAcV,EAAQE,IAE1BxX,aAAU,wBAAMiY,SAAAA,EAAkBF,KAAc,CAACE,EAAiBF,IAGlE/X,aAAU,cACJmX,IAAiBtB,GAAc9L,YAUnC/I,OAAOiE,iBAAiB,QAASC,GAAS,GACnC,kBAAMlE,OAAOmE,oBAAoB,QAASD,GAAS,aATjDA,IACHgT,KACCZ,GACAE,GAELtN,EAAS,CAAEd,KAAMd,GAAY8O,kBAK9B,CAACD,EAAce,EAA2BF,EAAcV,EAAQE,EAAOtN,IAG1ElK,aAAU,oBACCkF,EAAQlG,OACXwG,EAASxG,EAAMwG,OAEf2R,IAAiBtB,GAAc9L,cAE/BuN,SAAAA,EAAQlT,SAASoB,YACjBgS,SAAAA,EAAOpT,SAASoB,MAEpB0E,EAAS,CAAEd,KAAMd,GAAY8O,eAExB/U,EAAmBmD,EAAQ5D,EAAca,SAC5CzD,EAAMqG,uBACNiS,GAAAA,EAAQ1U,kBAIZ5B,OAAOiE,iBAAiB,YAAaC,GAC9B,kBAAMlE,OAAOmE,oBAAoB,YAAaD,MACpD,CAACiS,EAAcG,EAAQE,EAAOtN,QAE7B3N,EAAWwP,WACb,iBAAO,CAAExC,KAAM4N,IAAiBtB,GAAc9L,QAC9C,CAACoN,WAIDrQ,gBAAC2Q,GAAe1Q,UAAStL,MAAO6R,GAC7BjR,EAAOC,EAAOC,EArFK,QAjB1Bub,GAAoBrY,YAAc,sBA6GlC,IAYI+N,GAASlO,GAAiB,SAASkO,EACrClR,EACA2B,SAEwByZ,GAAkB,CAACC,GAAQjY,KAAM8N,EAAO9N,MAAMvD,KAAK,MAAtE+E,OAAOgJ,OACRiO,EAAoBpY,SAAiC,MAErDiY,EAAeH,KACfO,QAAcJ,SAAAA,EAAcI,YAE5BC,EAhIG5R,aAAWqR,IAiIdQ,EAAiC,OAAjBD,GAAgCA,IAAiBnX,EAAM+L,QAEvEQ,EAAY7N,EACduY,EACAla,EACAqa,EAAgB,KAAO,SAAAhB,UAAUpN,EAAS,CAAEd,KAAMd,GAAY+O,UAAWC,OAAAA,MAIvEiB,EAAmBxY,SAAuB,MAC1CyY,EAA2BzY,SACX,oBAAXiB,OAAyB,KAAOiB,SAASgB,eAElDjD,aAAU,oBACCkF,IACPsT,EAAyBvY,QAAUsY,EAAiBtY,QACpDsY,EAAiBtY,QAAUgC,SAASgB,qBAGtCjC,OAAOiE,iBAAiB,QAASC,GAAS,GACnC,kBAAMlE,OAAOmE,oBAAoB,QAASD,GAAS,MACzD,CAACsT,EAA0BD,QAE1B7K,EAAgBxN,eAClB,SAAClB,YACKsZ,EAAe,IACbpX,EAAMiW,eAAiBtB,GAAc7L,OAAQ,cACzChL,EAAM9C,UACPX,EAAKoS,WACLpS,EAAKqS,MACR5O,EAAMqG,iBACNrG,EAAM0G,kBACNwE,EAAS,CAAEd,KAAMd,GAAY8O,wBAC7BlW,EAAMoW,WAAQ1U,qBAIV5D,EAAM9C,UACPX,EAAKoS,WACLpS,EAAKqS,MACR5O,EAAMqG,iBACNrG,EAAM0G,kBACFxE,EAAMiW,eAAiBtB,GAAc7L,eAAQoO,GAAAA,EAAclX,EAAM6L,WACrE7C,EAAS,CAAEd,KAAMd,GAAY4O,2BAG1B3b,EAAK+O,UACJpJ,EAAMiW,eAAiBtB,GAAc9L,KAAM,aAAOqO,SAAAA,EAAclX,EAAM6L,cACrEoL,EAAkBlY,QAAS,WAC3BkY,EAAkBlY,QAAQmE,SAASnC,SAASgB,eAAgB,OACjEiH,EAAS,CAAEd,KAAMd,GAAY8O,0BAG1B7b,EAAK6J,OACJlE,EAAMiW,eAAiBtB,GAAc9L,KAAM,WAC1C7I,EAAMsW,MAAO,WACbtW,EAAMoW,OAAQ,UAGftY,EAAMsG,SAAU,WAEbkT,EAAyBvY,QAAS,mBACnCiB,EAAMoW,eAANmB,EAAcrU,SAASoU,EAAyBvY,SAAU,UAC1DiB,EAAMsW,MAAMpT,SAASoU,EAAyBvY,SAAU,WAGxDyY,EAAoB3W,IACpB4W,EAAcD,EAAkBhV,QAClC8U,EAAyBvY,YAEXyY,EAAkBhV,QAAQxC,EAAMoW,QAChCqB,EAAa,OAE7B3Z,EAAMqG,iBACNrG,EAAM0G,kBAEN5C,EAAQ5B,EAAMsW,MAAO/V,EAAM6B,WAE3BtE,EAAMqG,iBACNrG,EAAM0G,kBAEN5C,EAAQ5B,EAAMsW,MAAO/V,EAAM0B,UAOrC,CACE+G,EACAhJ,EAAMiW,aACNjW,EAAM6L,SACN7L,EAAMoW,OACNpW,EAAMsW,MACNW,EACAC,EACAE,IAIAM,EAAc1Y,eAChB,SAAClB,aACKsZ,GACApX,EAAMiW,eAAiBtB,GAAc9L,MACpC7I,EAAMsW,OACNtW,EAAMoW,cAGHtY,EAAM9C,UACPX,EAAK6J,QAEHoT,EAAyBvY,QAAS,mBACnCiB,EAAMoW,eAANuB,EAAczU,SAASoU,EAAyBvY,SAAU,UAC1DiB,EAAMsW,MAAMpT,SAASoU,EAAyBvY,SAAU,WAGxDyY,EAAoB3W,IACpB4W,EAAcD,EAAkBhV,QAClC8U,EAAyBvY,YAEXyY,EAAkBhV,QAAQxC,EAAMoW,QAChCqB,EAAa,OAE7B3Z,EAAMqG,iBACNrG,EAAM0G,kBACN5C,EAAQ5B,EAAMsW,MAAO/V,EAAM6B,SAIjC,CAACpC,EAAMiW,aAAcjW,EAAMsW,MAAOtW,EAAMoW,OAAQgB,IAG9ClM,EAAclM,eAChB,SAAClB,SACKmB,EAAyBnB,EAAMqN,gBAC/B/P,EAAMuR,WACNyK,GACFpO,EAAS,CAAEd,KAAMd,GAAY8O,wBAC7BlW,EAAMoW,WAAQ1U,UAEV1B,EAAMiW,eAAiBtB,GAAc7L,eAAQoO,GAAAA,EAAclX,EAAM6L,WACrE7C,EAAS,CAAEd,KAAMd,GAAY4O,oBAGjC,CACEhN,EACAhJ,EAAMoW,OACNpW,EAAMiW,aACNjW,EAAM6L,SACNzQ,EAAMuR,SACNuK,EACAE,IAIA/b,EAAWwP,WACb,iBAAO,CAAExC,KAAMrI,EAAMiW,eAAiBtB,GAAc9L,QACpD,CAAC7I,WAqBI7E,OAlBgBC,EACFgc,EACjB,CACElP,KAAM,SACN0E,UAAWJ,EACXpB,QAASF,GAEX,CACEnO,IAAKwP,EACLrM,GAAIF,EAAM6L,SACV3D,KAAM,yBACWlI,EAAMiW,eAAiBtB,GAAc9L,WAAc/L,kBACnDkD,EAAMsW,MAAQtW,EAAM+L,aAAUjP,EAC/C8P,UAAWJ,EACXoL,QAASF,EACTtM,QAASF,IAG2C7P,EAzMnC,aAoNrB2P,GAAU5M,GAAiB,SAAS4M,EAEtC5P,EAAiE2B,SAC9ByZ,GAAkB,CAACC,GAAQjY,KAAMwM,EAAQxM,MAAMvD,KAAK,MAAhFgb,OAAAA,aAAgBjN,OACnBiC,EAAavM,EAAY3B,GAEzBmD,gCAAmCE,IAEnC8K,EAAclM,eAChB,SAAClB,MACKmB,EAAyBnB,EAAMqN,eAAgB,OAAOrN,EAAMqG,iBAChE6E,EAAS,CAAEd,KAAMd,GAAY8O,iBAE/B,CAAClN,IAGC3N,EAAWwP,WACb,iBAAO,CAAExC,KAAM4N,IAAiBtB,GAAc9L,QAC9C,CAACoN,WAUI9a,OAFgBC,EANF,CACnB2B,IAAKkO,EACL/K,GAAAA,iBACe,EACfkL,QAASF,IAI+C7P,EAlClC,UA6CtBwR,GAAsB1S,EAASC,eAAiBD,EAASyB,OAEzDkR,GAAQ1O,GAAiB,SAAS0O,EACpC1R,EAEA2B,SAE6C3B,EAAvCsG,MAAAA,gBAAkByE,IAAqB/K,eAErBob,GAAkB,CAACC,GAAQjY,KAAMsO,EAAMtO,MAAMvD,KAAK,MAArE+E,OAAOgJ,OACR6O,EAAmBhZ,SAA8B,MACjDkO,EAAWrO,EAAYmZ,EAAkB9a,GAAK,SAAAuZ,GAChDtN,EAAS,CAAEd,KAAMd,GAAYiP,SAAUC,MAAAA,OAGrC9J,EAAgBxN,eAClB,SAAClB,gBACSA,EAAM9C,UACPX,EAAK+O,UACJpJ,EAAMiW,eAAiBtB,GAAc9L,KAAM,WAC1CgP,EAAiB9Y,QAAS,WAC1B8Y,EAAiB9Y,QAAQmE,SAASnC,SAASgB,eAAgB,OAChEjE,EAAMqG,iBACN6E,EAAS,CAAEd,KAAMd,GAAY8O,wBAC7BlW,EAAMoW,WAAQ1U,WAIpB,CAAC1B,EAAO6X,EAAkB7O,IAI5BlK,aAAU,kBAAM,kBAAMkK,EAAS,CAAEd,KAAMd,GAAYiP,SAAUC,MAAO,UAAS,CAACtN,IAG9ElK,aAAU,iBACJkB,EAAMiW,eAAiBtB,GAAc7L,iBAAW1N,EAAMW,cACxDiN,EAAS,CAAEd,KAAMd,GAAYiP,SAAUC,MAAO,SAE/C,CAACtW,EAAMiW,aAAc7a,EAAMW,QAASiN,IAGvClK,aAAU,cACH4C,GACD1B,EAAMiW,eAAiBtB,GAAc9L,MACpCgP,EAAiB9Y,aAElBgD,EAAgBhB,SAASgB,cACzB8V,EAAiB9Y,QAAQmE,SAASnB,IAEtCH,EAAQiW,EAAiB9Y,QAASwB,EAAM0B,UACvC,CAACP,EAAOmW,EAAkB7X,EAAMiW,eAGnCnX,aAAU,cACJkB,EAAMiW,eAAiBtB,GAAc9L,MACpCgP,EAAiB9Y,eAuCtBe,OAAOiE,iBAAiB,UAAWC,GAC5B,kBAAMlE,OAAOmE,oBAAoB,UAAWD,aAtC1CA,EAAQlG,MACXA,EAAM9C,MAAQX,EAAK6J,KAClBnD,SAASgB,eACT8V,EAAiB9Y,SACjB8Y,EAAiB9Y,QAAQmE,SAASnC,SAASgB,gBAMhDjE,EAAMqG,uBAEF2T,EAASlW,EAAQiW,EAAiB9Y,QAASjB,EAAMsG,SAAW7D,EAAM4B,SAAW5B,EAAM2B,SAEnF4V,IAAWtX,EAAYuC,0BAClB/C,EAAMoW,eAAN2B,EAAcrW,QAChB,GAAIoW,IAAWtX,EAAYwC,SAAU,KACrChD,EAAMoW,OAAQ,WAEfvU,EAAWhB,IACXmX,EAAYnW,EAASW,QAAQxC,EAAMoW,QAWnCxU,EATeC,EAChB+L,OAAOoK,EAAY,GACnBC,QAAO,SAAA/Y,0BAAY2Y,EAAiB9Y,gBAAjBmZ,EAA0BhV,SAAShE,OAO/BqB,EAAM0B,SAAWzB,EAAY5F,OACrDgH,EAAQb,SAASC,KAAMT,EAAM0B,YAOlC,CAACP,EAAOmW,EAAkB7X,EAAMiW,aAAcjW,EAAMoW,SAGvDtX,aAAU,cACH4C,GACD1B,EAAMiW,eAAiBtB,GAAc9L,MACpCgP,EAAiB9Y,eAOtBe,OAAOiE,iBAAiB,QAASC,GAAS,GACnC,kBAAMlE,OAAOmE,oBAAoB,QAASD,GAAS,aANjDA,oBACH6T,EAAiB9Y,gBAAjBoZ,EAA0BjV,SAASnC,SAASgB,iBAChDiH,EAAS,CAAEd,KAAMd,GAAY8O,kBAK9B,CAACxU,EAAO1B,EAAMiW,aAAcjN,QAE3B3N,EAAWwP,WACb,iBAAO,CAAExC,KAAMrI,EAAMiW,eAAiBtB,GAAc9L,QACpD,CAAC7I,WASD4F,gBAACgR,GAAoB/Q,UAAStL,MAAOyF,EAAM+L,SACxC5Q,OACMgL,EATU,CACnBpJ,IAAKgQ,EACL7M,GAAIF,EAAM+L,QACVa,UAAWJ,IAOPnR,EAtIgB,MAwIhBwR,GACA7M,EAAMiW,eAAiBtB,GAAc9L,UAuF7C4N,GAAQnK,OAASA,GACjBmK,GAAQzL,QAAUA,GAClByL,GAAQ3J,MAAQA,GAChB2J,GAAQnP,MA9ER,SACElM,OAEIgd,EAAWvZ,SAA2B,QACZwB,WAA+B,IAAxDgY,OAAUC,OAEXC,EAAoBvZ,eACtB,SAACwZ,GACCF,GAAY,SAAAG,OACN3J,EAAM2J,EAASjW,QAAQgW,OACd,IAAT1J,EAAY,KACVlR,EAAQ6a,EAAS1J,eACrBnR,EAAMgQ,OAAOkB,EAAK,GACXlR,SAEF6a,OAGX,CAACH,IAGCvB,EAAkB/X,eACpB,SAACwZ,UACCF,GAAY,SAAAG,mBAAgBA,GAAUD,OAC/B,kBAAMD,EAAkBC,MAEjC,CAACF,EAAaC,IAGZvB,EAA4BhY,eAAY,iBACtCE,EAAU6B,SAASgB,gCAEnBqW,EAASrZ,gBAAT2Z,EAAkBxV,SAAShE,KAGxBmZ,EAASM,MAAK,SAAAtc,2BAEjB0E,SAASyF,eAAenK,EAAIwP,oBAAW3I,SAAShE,eAChD6B,SAASyF,eAAenK,EAAI0P,iBAA5B8G,EAAsC3P,SAAShE,SAGlD,CAACkZ,EAAUC,IAEVnB,EAAclY,eAChB,SAAC6M,iBACqBwM,kBAAU,KAArBO,UACHA,EAAQ/M,WAAaA,GAAU+M,EAAQ3P,WAG/C,CAACoP,IAGCzN,EAAaC,WACf,iBAAO,CACLkM,gBAAiBA,EACjBwB,kBAAmBA,EACnBvB,0BAAAA,EACAE,YAAAA,KAEF,CAACH,EAAiBwB,EAAmBvB,EAA2BE,IAG9D7b,EAAWwP,WAA4B,iBAAO,KAAK,WAKrDjF,gBAAC8Q,GAAoB7Q,UAAStL,MAAOqQ,GAClCzP,OAJkBC,EADF,CAAE2B,IAAKqb,IAK4B/c,EAxElC,SChmBxB,IAAIwd,GAAexT,gBAAuD,CACxEyT,2BACS,yBAQKC,GACd7Y,SAE8BG,WAAmB,IAA5C2Y,OAAUC,aAER,CAGLD,EAAS7b,OAAS,EAAK+C,EAAK,CAACA,UAAO8Y,GAAU/d,KAAK,KAAO+d,EAAS/d,KAAK,UAAQ6B,EAGhF+N,WAAQ,kBACC,SAAuBzP,OACxB0d,EAAW9Z,eAAY,SAACzE,UAC1B0e,GAAY,SAAAR,mBAAgBA,GAAUle,OAE/B,kBACL0e,GAAY,SAAAR,OACN7a,EAAQ6a,EAAS1J,QACjBD,EAAMlR,EAAM4E,QAAQjI,UACX,IAATuU,GAAYlR,EAAMgQ,OAAOkB,EAAK,GAC3BlR,QAEV,IAECgN,EAAaC,WAAQ,iBAAO,CAAEiO,SAAAA,KAAa,CAACA,WAEzClT,gBAACiT,GAAahT,UAAStL,MAAOqQ,GAAaxP,EAAMsB,aAEzD,CAACuc,KCvCR,OCkBK7R,GDlBD8R,GAAqB7T,gBAAuD,CAC9EyT,2BACS,gBAQX,SAAgBK,WAI4B9Y,WAAmB,IAAxD+Y,OAAgBC,aAEd,CAELD,EAAejc,OAAS,EAAIic,EAAene,KAAK,UAAO6B,EAGvD+N,WAAQ,kBACC,SAA6BzP,OAC9B0d,EAAW9Z,eAAY,SAACzE,UAC1B8e,GAAkB,SAAAZ,mBAAgBA,GAAUle,OAErC,kBACL8e,GAAkB,SAAAZ,OACZ7a,EAAQ6a,EAAS1J,QACjBD,EAAMlR,EAAM4E,QAAQjI,UACX,IAATuU,GAAYlR,EAAMgQ,OAAOkB,EAAK,GAC3BlR,QAEV,IAECgN,EAAaC,WAAQ,iBAAO,CAAEiO,SAAAA,KAAa,CAACA,WAG9ClT,gBAACsT,GAAmBrT,UAAStL,MAAOqQ,GACjCxP,EAAMsB,aAIZ,CAAC2c,MCzBR,SAAKjS,GACHA,uCACAA,2CAFF,CAAKA,KAAAA,QASL,IA8LKkS,GA9LD/R,YAMDH,GAAYgJ,yBAAgBpQ,EAAOyH,eAE7BzH,GACHsD,kBACKtD,EAAMsD,SACT,CAAEpD,GAAIuH,EAAOvH,GAAIhB,QAASuI,EAAOvI,QAAS4R,SAAUrJ,EAAOqJ,kBAIhE1J,GAAYiJ,2BAAkBrQ,EAAOyH,OAChCnE,EAAUtD,EAAMsD,QAAQyL,QACxBD,EAAM9O,EAAMsD,QAAQqL,WAAU,SAAA4K,UAASA,EAAMrZ,KAAOuH,EAAOvH,aAClD,IAAT4O,EAAmB9O,GACvBsD,EAAQsK,OAAOkB,EAAK,QACR9O,GAAOsD,QAAAA,UAInBkW,GAAoBnU,gBAA2D,MAGnF,SAASoU,GAAqBpb,OACxB0J,EAAUxC,aAAWiU,OACT,OAAZzR,EAAkB,KAChBzK,EAAM,IAAI1C,UAAUyD,8BAAqCqb,GAAWlb,6BACpE5D,MAAMM,mBAAmBN,MAAMM,kBAAkBoC,EAAKmc,IACpDnc,SAEDyK,EAGT,SAASE,GAAajI,EAAwByH,UACrCnN,EAAMmN,EAAOS,KAAMX,GAAUvH,EAAOyH,YAS7BiS,GAIdte,OAUMb,EAAyCa,EAAzCb,MAAOsW,EAAkCzV,EAAlCyV,SAAajU,IAAqBxB,wBAC3CgR,EAAarD,aAAWd,GAAc,CACxC6I,SAAU,CAAE/R,QAAS,CAAExE,MAAAA,EAAOsW,SAAAA,IAC9BvN,QAAS,OAEmB8I,KAAvB0E,IAAAA,SAAUxN,IAAAA,UACiByV,KAA7BvH,OAAYmI,SACwBR,KAApCS,OAAaC,OACd3Z,2BAA8BE,IAC9B0Z,EAAgBjb,SAA2B,MAE/CgB,GAAoB,WAClBiR,EAAS/R,QAAQxE,MAAQA,IACxB,CAACA,EAAOuW,IACXjR,GAAoB,WAClBiR,EAAS/R,QAAQ8R,SAAWA,IAC3B,CAACA,EAAUC,QAEViJ,EAAgB/a,eAClB,SAAAgb,MACMA,IAAczf,SACXsW,EAASmJ,KAElB,CAACnJ,EAAUtW,IAGbsF,GAAoB,eACdiB,EAAYgZ,EAAc/a,WACzB+B,UAEDiU,EAAShU,SAASiU,iBAAiBlU,EAAWmU,WAAWC,aAAc,CACzEC,oBAAWC,SACyB,UAA9BA,EAAK3V,aAAa,QAA4BwV,WAAWI,cACzDD,EAAKE,aAAa,QAAgBL,WAAWM,YAC1CN,WAAWO,iBAIfT,EAAOU,YACVV,EAAOW,YAA4B5Q,aAAa,OAAQ,UAE3D,CAACgV,IAEJhb,aAAU,eACJgC,EAAYgZ,EAAc/a,WACzB+B,SA0DLA,EAAUiD,iBAAiB,UAAWC,GAC/B,kBAAMlD,EAAWmD,oBAAoB,UAAWD,aAzD9CA,EAAQlG,UACPA,EAAM9C,UACPX,EAAK4f,eACL5f,EAAKiX,WAENxT,EAAMqG,iBACNrG,EAAM0G,kBAEO5C,EACX0B,EAAQvI,KAAI,SAAAwe,UAASA,EAAMra,QAAQH,WACnCwB,EAAM4B,SAAW5B,EAAMuC,cAGVtC,EAAYyC,QAAS,KAC9BiX,EAAe5W,EAAQ6W,MACzB,SAAApK,UAAUA,EAAO7Q,QAAQH,UAAYgC,SAASgB,iBAE5CmY,GAAcH,EAAcG,EAAapJ,SAAS/R,QAAQxE,kBAK/DF,EAAK+f,gBACL/f,EAAKgX,aAENvT,EAAMqG,iBACNrG,EAAM0G,kBAEO5C,EACX0B,EAAQvI,KAAI,SAAAgV,UAAUA,EAAO7Q,QAAQH,WACrCwB,EAAM2B,KAAO3B,EAAMuC,cAGNtC,EAAYyC,QAAS,KAC9BiX,EAAe5W,EAAQ6W,MACzB,SAAApK,UAAUA,EAAO7Q,QAAQH,UAAYgC,SAASgB,iBAE5CmY,GAAcH,EAAcG,EAAapJ,SAAS/R,QAAQxE,kBAK/DF,EAAKoS,MAEN3O,EAAMqG,iBACNrG,EAAM0G,sBAEF0V,EAAe5W,EAAQ6W,MACzB,SAAApK,UAAUA,EAAO7Q,QAAQH,UAAYgC,SAASgB,iBAE5CmY,GAAcH,EAAcG,EAAapJ,SAAS/R,QAAQxE,WAQrE,CAACuf,EAAexW,EAASyW,QAExBM,EAAiB,CACnBtd,IAAK+c,EACL5Z,GAAAA,EACA6K,KAAM,+BACayG,qBACCoI,GAElBvd,EAAMwO,WAAiC,iBAAO,KAAK,WAGrDjF,gBAACiU,OACCjU,gBAAC+T,OACC/T,gBAAC4T,GAAkB3T,UAAStL,MAAO6R,GAChCjR,OAAYyB,EAAqByd,GAAkBhe,EA1IhC,UAlB9Bmd,GAAkBjb,YAAc,oBAqKhC,SAAK+a,GACHA,qBACAA,uBAFF,CAAKA,KAAAA,QA8FLI,GAAWjH,OA1EX,SAASA,EAMPrX,SAIIkf,EAAYzb,SAA2B,MACvCqB,kCAAqCE,MAEP2Y,GAAU7Y,GAAvCsR,OAAYmI,SACwBR,KAApCS,OAAaC,kBC5QKU,YAAAA,IAAAA,EAAe,SACdla,WAASka,GAA5BC,OAAOC,aAOL,CAAEC,QALK1b,eAAY,SAAC2b,UAAiBF,GAAS,SAAAD,UAASA,EAAQG,OAAO,CAACF,IAK5DG,QAJJ5b,eAAY,SAAC2b,UAAiBE,QAAQL,EAAQG,KAAO,CAACH,IAIzCM,WAHV9b,eAAY,SAAC2b,UAAiBF,GAAS,SAAAD,UAASA,GAASG,OAAO,CAACF,IAG3CM,WAFtB/b,eAAY,SAAC2b,UAAiBF,GAAS,SAAAD,UAASA,EAAQG,OAAO,CAACF,KDuQ1CO,CAAS1B,GAAY2B,OAAtDP,IAAAA,QAASI,IAAAA,WAAYF,IAAAA,QAErBrgB,EAA+Ba,EAA/Bb,MAAUqC,IAAqBxB,aACjC0V,EAAWjS,SAAO,CAAEtE,MAAAA,IAExBsF,GAAoB,WAClBiR,EAAS/R,QAAQxE,MAAQA,IACxB,CAACA,EAAOuW,UAEiD2I,GAC1D,CAACC,GAAWlb,KAAMiU,EAAOjU,MAAMvD,KAAK,aADrBigB,IAAVpK,SAA8BxN,IAAAA,QAAW0F,OAIhDnJ,GAAoB,kBAClBmJ,EAAS,CAAEd,KAAMd,GAAYgJ,eAAgBlQ,GAAAA,EAAIhB,QAASob,EAAWxJ,SAAAA,IAC9D,kBAAM9H,EAAS,CAAEd,KAAMd,GAAYiJ,iBAAkBnQ,GAAAA,OAC3D,CAACA,EAAI8I,EAAUsR,EAAWlf,QAEzB8P,EAAclM,eAAY,iBACxBkc,EAAmBnc,QAAQxE,QAAUA,IAEzCmgB,EAAQpB,GAAY6B,QACpBD,EAAmBnc,QAAQ8R,SAAStW,YACpC+f,EAAUvb,YAAS2C,WAClB,CAACgZ,EAASQ,EAAoB3gB,IAE7B6Y,EAAcpU,eAAY,kBAAM0b,EAAQpB,GAAY6B,UAAS,CAACT,IAC9DU,EAAapc,eAAY,kBAAM8b,EAAWxB,GAAY6B,UAAS,CAACL,IAEhEO,SAAa/X,YAAAA,EAAU,aAAIpD,MAAOA,EAClCob,EAAUJ,EAAmBnc,QAAQxE,QAAUA,EAC/C8f,EAAiB,CACnBtd,IAAKud,EACLpa,GAAAA,EACA6K,KAAM,uBACUuQ,EAAU,OAAS,0BAChB9J,qBACCoI,EACpBtH,SAAUgJ,QAAmDxe,IAArCoe,EAAmBnc,QAAQxE,OAAuB8gB,EAAtD,GAAwE,EAC5FjQ,QAASF,EACTqI,QAASH,EACTmI,OAAQH,GAEN/e,EAAMwO,WAA6B,iBAAO,CAAEyQ,QAAAA,EAASxZ,OAAQ8Y,EAAQtB,GAAY6B,WAAY,CAC/FG,EACAV,WAIAhV,gBAACiU,OACCjU,gBAAC+T,OACExe,OAAYyB,EAAqByd,GAAkBhe,EAjFnC,UA0FzBqd,GAAWnH,eFtQTnX,OAEM0d,EA7CCvT,aAAWsT,IA6CZC,SACF5Y,sBAAyBE,IAE7BP,GAAoB,kBAAMiZ,EAAS5Y,KAAK,CAACA,EAAI4Y,QAEzClc,EAAmBxB,EACnBif,EAAiB,CAAEna,GAAAA,GACnB7D,EAAMwO,WAA4B,iBAAO,KAAK,WAE3C1P,OAAYyB,EAAqByd,GAAkBhe,EAhBpC,UE4QxBqd,GAAWpO,qBDnQTlQ,OAEM0d,EAjDCvT,aAAW2T,IAiDZJ,SACF5Y,4BAA+BE,IAEnCP,GAAoB,kBAAMiZ,EAAS5Y,KAAK,CAACA,EAAI4Y,QAEzClc,EAAmBxB,EACnBif,EAAiB,CAAEna,GAAAA,GACnB7D,EAAMwO,WAAkC,iBAAO,KAAK,WAEjD1P,OAAYyB,EAAqByd,GAAkBhe,EAhB9B,MGtC9B,IAAImf,GAAenW,gBAAsC,MAGzD,SAASoW,GAAgBpd,OACnB0J,EAAUxC,aAAWiW,OACT,OAAZzT,EAAkB,KAChBzK,EAAM,IAAI1C,UAAUyD,+DACpBzD,MAAMM,mBAAmBN,MAAMM,kBAAkBoC,EAAKme,IACpDne,SAEDyK,EATTyT,GAAajd,YAAc,eAc3B,IClCYmd,GDkCRrU,GAAoBnK,oBAkDRye,GACdvgB,WAKMkgB,EAA2ClgB,EAA3CkgB,QAASzK,EAAkCzV,EAAlCyV,SAAajU,IAAqBxB,0BAC7C8E,uBAA0BE,IAC1B0W,EAAevR,aAAWiW,IAE1BI,EAAS5c,eAAY,kBAAM6R,GAAUyK,KAAU,CAACzK,EAAUyK,IAC1DpQ,EAAclM,eAChB,SAAClB,MACKmB,EAAyBnB,EAAMqN,eAAgB,OAAOrN,EAAMqG,iBAChErG,EAAMqG,iBACNyX,MAEF,CAACA,IAEClE,EAAc1Y,eAChB,SAAClB,GACKA,EAAM9C,MAAQX,EAAK6J,KAAKpG,EAAMqG,iBAC9BrG,EAAM9C,MAAQX,EAAKoS,OAAOmP,MAEhC,CAACA,IAICC,EAAiB7c,eACnB,SAAClB,UAA2CA,EAAMqG,mBAClD,IAGE9I,EAAWwP,WAA6B,iBAAO,CAAEyQ,QAAAA,KAAY,CAACA,IAC9DjB,EAAiB,CACnBna,GAAAA,EACAnD,IAAsB,OAAjB+Z,OAAwBha,EAAYga,EAAagF,UACtD/Q,KAAM,SACNuH,SAAU,iBACMgJ,0BACGxE,YAAAA,EAAciF,cAAdC,EAAqB9b,4BACpB4W,YAAAA,EAAcmF,oBAAdC,EAA2Bhc,GAC/CkL,QAASF,EACT0M,QAASF,EACTyE,WAAYN,SAGc,WAAxBjf,EAAiBJ,IACnB3B,OAAO4C,OAAO4c,EAAgB,CAAEnS,KAAM,WAGjC/M,OAAYyB,EAAqByd,GAAkBhf,EAlEnC,mBE9ET+gB,SACVC,EAAUxd,UAAO,UAErBC,aAAU,WACRud,EAAQtd,SAAU,IACjB,IAEIsd,EAAQtd,QDNjB,SAASud,GAAWlH,gCAAsBmH,mCAAAA,oBACxCnH,GAAQmH,EAAQpf,OAAS,MAAKiY,EAAKoH,WAAUlS,YAAOiS,GAGtD,SAASE,GAAcrH,gCAAsBmH,mCAAAA,oBAC3CnH,GAAQmH,EAAQpf,OAAS,MAAKiY,EAAKoH,WAAUE,eAAUH,YAiDzCI,GACdvH,EACAwH,EACA3b,EACA4b,EACAC,OAEIhP,EAAId,KACJ+P,OAAiBjgB,IAATggB,WEjEUrP,OAClBzN,EAAQ,CAAEgd,QAAQ,UAEf,eACDhd,EAAMgd,cACVhd,EAAMgd,QAAS,EACRvP,2BF2DwBwP,CAAKH,GAAQ,oBAE9CR,iBAAWlH,UAASwH,EAAS3b,IAE7B6M,EAAET,WAAU,WACVoP,iBAAcrH,UAASnU,IACvBqb,iBAAWlH,UAASyH,IAEpB/O,EAAExD,IAzDN,SAA2B8K,EAAmB0H,OACxChP,EAAId,SAEHoI,EAAM,OAAOtH,EAAEH,cAG0BuP,iBAAiB9H,KAElC,GAFvB+H,qBAAoBC,iBAEyCriB,KAAI,SAAAR,SAC3CA,EACvB8iB,MAAM,KAENpF,OAAO4C,SAEP9f,KAAI,SAAAuiB,UAAMA,EAAEC,SAAS,MAAQC,WAAWF,GAAqB,IAAhBE,WAAWF,MACxDG,MAAK,SAACjN,EAAGkN,UAAMA,EAAIlN,0BAND,OADlBmN,cAiBc,IAAfA,EACF7P,EAAER,YAAW,WACXwP,EAAKpB,GAAOkC,YACXD,QAIHb,EAAKpB,GAAOkC,UAId9P,EAAExD,KAAI,kBAAMwS,EAAKpB,GAAOmC,cAEjB/P,EAAEH,QAoBLmQ,CAAkB1I,GAAM,SAAA2I,UACtBtB,iBAAcrH,UAASyH,EAAOD,IACvBG,EAAMgB,UASnBjQ,EAAExD,KAAI,kBAAMmS,iBAAcrH,UAASwH,EAAS3b,EAAS4b,OAGrD/O,EAAExD,KAAI,kBAAMyS,EAAMrB,GAAOmC,cAElB/P,EAAEH,QG/DX,SAASqQ,GAAgBzB,mBAAAA,IAAAA,EAAkB,IAClC1R,WAAQ,kBAAM0R,EAAQc,MAAM,KAAKpF,QAAO,SAAAhb,UAAaA,EAAUghB,OAAO9gB,OAAS,OAAI,CACxFof,IJgKJZ,GAAOrU,MA9IP,SAAoElM,SAC1BiF,WAAmC,MAAtE6d,OAAeC,SACkB9d,WAAkC,MAAnE+d,OAAcC,SAC+Bhe,WAAsC,MAAnFie,OAAoBC,OAErBxW,EAAU8C,WACZ,iBAAO,QACGqT,EACRpC,UAAWqC,EACXpC,MAAOqC,EACPI,SAAUH,EACVpC,YAAaqC,EACbG,eAAgBF,KAElB,CACEL,EACAC,EACAC,EACAC,EACAC,EACAC,WAKF3Y,gBAAC4V,GAAa3V,UAAStL,MAAOwN,GAC3B5M,EAAOC,EAAO,GAAIiM,MAqHzBsU,GAAOpJ,MAnCP,SAASA,EACPnX,OAEI4E,EAAQyb,GAAgB,CAACE,GAAOnd,KAAM+T,EAAM/T,MAAMvD,KAAK,MACvDiF,6BAAgCE,IAEhC8K,EAAclM,eAAY,WACvBgB,WACLA,SAAa2V,QACb3V,SAAa0B,MAAM,CAAEC,eAAe,OACnC,CAAC3B,kBAGG7E,OAAYC,EADE,CAAE2B,IAAKiD,EAAMwe,SAAUte,GAAAA,EAAIkL,QAASF,IACV,GAjBzB,UAwCxByQ,GAAOrQ,YAdP,SAASA,EACPlQ,OAEI4E,EAAQyb,GAAgB,CAACE,GAAOnd,KAAM8M,EAAY9M,MAAMvD,KAAK,MAC7DiF,mCAAsCE,WAGnCjF,OAAYC,EADE,CAAE2B,IAAKiD,EAAMye,eAAgBve,GAAAA,IACH,GAXlB,MClK/B,SAAYwb,GACVA,sBACAA,wBAFF,CAAYA,KAAAA,QG0BZ,IAGKgD,GAHDC,GAAoBtZ,gBAA8C,MACtEsZ,GAAkBpgB,YAAc,oBAEhC,SAAKmgB,GACHA,oBACAA,kBAFF,CAAKA,KAAAA,QAoDL,IAAIE,GAAiBvZ,gBAA2C,MAGhE,SAASwZ,GACPxiB,SAEI,aAAcA,EAAYwiB,GAAYxiB,EAAIK,UACvCL,EAAI0C,QAAQkZ,QAAO,qBAAGjY,QAAsB0e,GAAWI,WAAS3hB,OAAS,EAGlF,SAAS4hB,GAAWjC,OACdkC,EAAUngB,SAAOie,GACjBmC,EAAyBpgB,SAAoD,IAC7E4E,iBCtGAA,EAAU5E,UAAO,UAErBC,aAAU,kBACD,WACL2E,EAAQ1E,SAAU,KAEnB,IAEI0E,ED8FOyb,GAEdpgB,aAAU,WACRkgB,EAAQjgB,QAAU+d,IACjB,CAACA,QAEAqC,EAAangB,eACf,SAACogB,EAAaC,kBAAAA,IAAAA,EAAWjlB,EAAe6B,YAClC6S,EAAMmQ,EAAuBlgB,QAAQ4P,WAAU,qBAAGzO,KAAgBkf,MACzD,IAATtQ,IAEJxU,EAAM+kB,UACHjlB,EAAe4B,oBACdijB,EAAuBlgB,QAAQ6O,OAAOkB,EAAK,MAE5C1U,EAAe6B,mBACdgjB,EAAuBlgB,QAAQ+P,GAAK9O,MAAQ0e,GAAWziB,aAItD4iB,GAAYI,IAA2Bxb,EAAQ1E,gBAClDigB,EAAQjgB,SAARigB,EAAQjgB,cAGZ,CAACigB,EAASvb,EAASwb,IAGjBnG,EAAW9Z,eACb,SAACogB,OACK5U,EAAQyU,EAAuBlgB,QAAQob,MAAK,qBAAGja,KAAgBkf,YAC9D5U,EAEMA,EAAMxK,QAAU0e,GAAWI,UACpCtU,EAAMxK,MAAQ0e,GAAWI,SAFzBG,EAAuBlgB,QAAQ2O,KAAK,CAAExN,GAAIkf,EAASpf,MAAO0e,GAAWI,UAKhE,kBAAMK,EAAWC,EAAShlB,EAAe4B,YAElD,CAACijB,EAAwBE,WAGpBtU,WACL,iBAAO,CACLnO,SAAUuiB,EACVnG,SAAAA,EACAqG,WAAAA,KAEF,CAACrG,EAAUqG,EAAYF,IAI3B,SAASK,MA/DTV,GAAergB,YAAc,iBAgE7B,IAAIghB,GAAa,CAAC,cAAe,aAAc,cAAe,cAC9D,SAASC,GAAsBC,aACzB3H,EAAS,OACIyH,mBAAY,OAApB/gB,UACPsZ,EAAOtZ,YAAQihB,EAAOjhB,MAAS8gB,UAE1BxH,EAeT,IAEI4H,GAAgCvlB,EAASC,eAE7C,SAASulB,GACPvkB,OAIEwkB,EAeExkB,EAfFwkB,YACAC,EAcEzkB,EAdFykB,WACAC,EAaE1kB,EAbF0kB,YACAC,EAYE3kB,EAZF2kB,WAGAC,EASE5kB,EATF4kB,MACAC,EAQE7kB,EARF6kB,UACAC,EAOE9kB,EAPF8kB,QACAC,EAME/kB,EANF+kB,MACAC,EAKEhlB,EALFglB,UACAC,EAIEjlB,EAJFilB,QAGGvkB,IACDV,uHACA0F,EAAYjC,SAA2B,QACnBwB,WAASqe,GAAWI,SAAvC9e,OAAOsgB,OACRjB,EAAWvjB,EAAKC,QAAU3B,EAAe4B,QAAU5B,EAAe6B,SA3IxE,eACM8L,EAAUxC,aAAWoZ,OAET,OAAZ5W,QACI,IAAInN,MAAM,oFAGXmN,EAsIgBwY,GAAjBC,IAAAA,KAAMC,IAAAA,SAnId,eACM1Y,EAAUxC,aAAWqZ,OAET,OAAZ7W,QACI,IAAInN,MAAM,oFAGXmN,EA6HwB2Y,GAAzB5H,IAAAA,SAAUqG,IAAAA,WAEZ9C,EAAUD,KACVlc,EAAKE,IAELugB,EAAkB9hB,UAAO,GAEzB+hB,EAAU7B,IAAW,WAGlB4B,EAAgB5hB,UACnBuhB,EAAS5B,GAAWziB,QACpBkjB,EAAWjf,GACXuf,EAAO1gB,QAAQghB,iBAInBlgB,GAAoB,cACbK,SACE4Y,EAAS5Y,KACf,CAAC4Y,EAAU5Y,IAEdL,GAAoB,iBAEdwf,IAAajlB,EAAe6B,QAC3BiE,IAGDsgB,GAAQxgB,IAAU0e,GAAWI,QAC/BwB,EAAS5B,GAAWI,SAItBxkB,EAAM0F,UACH0e,GAAWziB,QAAS,kBAAMkjB,EAAWjf,MACrCwe,GAAWI,SAAU,kBAAMhG,EAAS5Y,WAEtC,CAACF,EAAOE,EAAI4Y,EAAUqG,EAAYqB,EAAMnB,QAEvCwB,EAAe7C,GAAgBgC,GAC/Bc,EAAmB9C,GAAgBiC,GACnCc,EAAiB/C,GAAgBkC,GAEjCc,EAAehD,GAAgBmC,GAC/Bc,EAAmBjD,GAAgBoC,GACnCc,EAAiBlD,GAAgBqC,GAEjCZ,EAzFN,SAAmBA,OACb0B,EAAYtiB,SAAO2gB,GAAsBC,WAE7C3gB,aAAU,WACRqiB,EAAUpiB,QAAUygB,GAAsBC,KACzC,CAACA,IAEG0B,EAkFMC,CAAU,CAAExB,YAAAA,EAAaC,WAAAA,EAAYC,YAAAA,EAAaC,WAAAA,IAE/DjhB,aAAU,cACJkB,IAAU0e,GAAWI,SAAiC,OAAtBhe,EAAU/B,cACtC,IAAInE,MAAM,qEAEjB,CAACkG,EAAWd,QAGXqhB,EAAOhF,IAAYoE,SAEvB5gB,GAAoB,eACduV,EAAOtU,EAAU/B,WAChBqW,IACDiM,SAEJV,EAAgB5hB,SAAU,EAEtByhB,GAAMf,EAAO1gB,QAAQ6gB,cACpBY,GAAMf,EAAO1gB,QAAQ+gB,cAEnBU,EACH7D,GAAWvH,EAAMyL,EAAcC,EAAkBC,GAAgB,SAAAhD,GAC/D4C,EAAgB5hB,SAAU,EACtBgf,IAAWrC,GAAOkC,UAAU6B,EAAO1gB,QAAQ8gB,gBAEjDlD,GAAWvH,EAAM4L,EAAcC,EAAkBC,GAAgB,SAAAnD,GAC/D4C,EAAgB5hB,SAAU,EAEtBgf,IAAWrC,GAAOkC,WAIjBiB,GAAY+B,KACfN,EAAS5B,GAAWziB,QACpBkjB,EAAWjf,GACXuf,EAAO1gB,QAAQghB,oBAGtB,CACDN,EACAvf,EACAygB,EACAxB,EACAyB,EACA9f,EACAugB,EACAb,EACAK,EACAC,EACAC,EACAC,EACAC,EACAC,IAQAtb,gBAACgZ,GAAe/Y,UAAStL,MAAOqmB,GAC7BzlB,OAJkBW,EADF,CAAEiB,IAAK+D,IADb,GArIkB,MA+I3B4e,GACA1f,IAAU0e,GAAWI,mBAMbwC,GACdlmB,OAGMolB,EAAuDplB,EAAvDolB,OAAuDplB,EAAjDqlB,OAAAA,gBAAgB1kB,EAAiCX,EAAjCW,QAAYoK,IAAqB/K,mCAExD,EAAC,GAAM,GAAOmiB,SAASiD,SACpB,IAAI5lB,MAAM,kFAGMyF,WAASmgB,EAAO9B,GAAWI,QAAUJ,GAAWziB,QAAnE+D,OAAOsgB,OAERiB,EAAaxC,IAAW,WAC1BuB,EAAS5B,GAAWziB,WAGlBogB,EAAUD,KACVoF,EAAgB3W,WAClB,iBAAO,CAAE2V,KAAAA,EAAMC,OAAQA,IAAWpE,KAClC,CAACmE,EAAMC,EAAQpE,IAGjBvd,aAAU,WACJ0hB,EACFF,EAAS5B,GAAWI,SACVD,GAAY0C,IACtBjB,EAAS5B,GAAWziB,UAErB,CAACukB,EAAMe,QAENE,EAAc,CAAE1lB,QAAAA,UAIlB6J,gBAACgZ,GAAe/Y,UAAStL,MAAOgnB,GAC9B3b,gBAAC+Y,GAAkB9Y,UAAStL,MAAOinB,GAChCrmB,OAEMsmB,GACHjlB,GAAIU,WACJR,SAAUkJ,gBAAC+Z,oBAAoB8B,EAAiBtb,MAT3C,GAYPjJ,WACAwiB,GACA1f,IAAU0e,GAAWI,WAO/BwC,GAAWI,MAAQ/B,0BE1VjBvkB,SAIqDA,EAA/CumB,WAAAA,aAAa,WAAa/kB,IAAqBxB,kBACjDif,EAAiB/f,EAAMqnB,EAAY,CACrCC,OAAQ,iBAAO,CAAE7W,KAAM,WACvB8W,UAAW,iBAAO,CAAE9W,KAAM,YAGxB1O,EAAMwO,WAA4B,iBAAO,CAAE8W,WAAAA,KAAe,CAACA,WAExDxmB,OAAYyB,EAAqByd,GAAkBhe,EAnBpC,2ECZtBjB,OAEI+H,EAAatE,SAAyB,IAAI6F,KACxCf,EAAsCvI,EAAtCuI,aAAiBwC,IAAqB/K,2BAE5CgI,EAAaD,GAAY,EAAM,CAAEQ,aAAAA,IAS1BxI,OAAYgL,EAPE,CACnBpJ,aAAImC,GACGA,GACLiE,EAAWpE,QAAQuL,IAAIpL,MAI+B,GAjB/B"}